<?php
/**
 *  Autoloader function generated by crodas/Autoloader
 *
 *  https://github.com/crodas/Autoloader
 *
 *  This is a generated file, do not modify it.
 */

spl_autoload_register(function ($class) {
    /*
        This array has a map of (class => file)
    */
    static $classes = array (
  'sql\\begintransaction' => 
  array (
    0 => '/SQL/BeginTransaction.php',
    1 => 'class_exists',
  ),
  'sql\\transaction' => 
  array (
    0 => '/SQL/Transaction.php',
    1 => 'class_exists',
  ),
  'sql\\committransaction' => 
  array (
    0 => '/SQL/CommitTransaction.php',
    1 => 'class_exists',
  ),
  'sql\\delete' => 
  array (
    0 => '/SQL/Delete.php',
    1 => 'class_exists',
  ),
  'sql\\statement' => 
  array (
    0 => '/SQL/Statement.php',
    1 => 'class_exists',
  ),
  'sql\\drop' => 
  array (
    0 => '/SQL/Drop.php',
    1 => 'class_exists',
  ),
  'sql\\insert' => 
  array (
    0 => '/SQL/Insert.php',
    1 => 'class_exists',
  ),
  'sql\\rollbacktransaction' => 
  array (
    0 => '/SQL/RollbackTransaction.php',
    1 => 'class_exists',
  ),
  'sql\\select' => 
  array (
    0 => '/SQL/Select.php',
    1 => 'class_exists',
  ),
  'sql\\table' => 
  array (
    0 => '/SQL/Table.php',
    1 => 'class_exists',
  ),
  'sql\\update' => 
  array (
    0 => '/SQL/Update.php',
    1 => 'class_exists',
  ),
  'sql\\view' => 
  array (
    0 => '/SQL/View.php',
    1 => 'class_exists',
  ),
  'sql\\writer\\mysql' => 
  array (
    0 => '/SQL/Writer/MySQL.php',
    1 => 'class_exists',
  ),
  'sql\\writer' => 
  array (
    0 => '/SQL/Writer.php',
    1 => 'class_exists',
  ),
  'sqlparser\\lexer' => 
  array (
    0 => '/SQLParser/Lexer.php',
    1 => 'class_exists',
  ),
  'sqlparser_yytoken' => 
  array (
    0 => '/SQLParser/Parser.php',
    1 => 'class_exists',
  ),
  'sqlparser_yystackentry' => 
  array (
    0 => '/SQLParser/Parser.php',
    1 => 'class_exists',
  ),
  'sqlparser_parser' => 
  array (
    0 => '/SQLParser/Parser.php',
    1 => 'class_exists',
  ),
  'sqlparser\\stmt\\column' => 
  array (
    0 => '/SQLParser/Stmt/Column.php',
    1 => 'class_exists',
  ),
  'sqlparser\\stmt\\expr' => 
  array (
    0 => '/SQLParser/Stmt/Expr.php',
    1 => 'class_exists',
  ),
  'sqlparser\\stmt\\exprlist' => 
  array (
    0 => '/SQLParser/Stmt/ExprList.php',
    1 => 'class_exists',
  ),
  'sqlparser\\stmt\\join' => 
  array (
    0 => '/SQLParser/Stmt/Join.php',
    1 => 'class_exists',
  ),
  'sqlparser\\stmt\\variableplaceholder' => 
  array (
    0 => '/SQLParser/Stmt/VariablePlaceholder.php',
    1 => 'class_exists',
  ),
  'sqlparser' => 
  array (
    0 => '/SQLParser.php',
    1 => 'class_exists',
  ),
);

    static $deps    = array (
  'sql\\begintransaction' => 
  array (
    0 => 'sql\\transaction',
  ),
  'sql\\committransaction' => 
  array (
    0 => 'sql\\transaction',
  ),
  'sql\\delete' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\drop' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\insert' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\rollbacktransaction' => 
  array (
    0 => 'sql\\transaction',
  ),
  'sql\\select' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\table' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\update' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\view' => 
  array (
    0 => 'sql\\statement',
  ),
  'sql\\writer\\mysql' => 
  array (
    0 => 'sql\\writer',
  ),
);

$class = strtolower($class);
if (isset($classes[$class])) {
    if (!empty($deps[$class])) {
        foreach ($deps[$class] as $zclass) {
if (
    ! $classes[$zclass][1]( $zclass, false )
) {
    require __DIR__  . $classes[$zclass][0];
}
        }
    }
if (
    ! $classes[$class][1]( $class, false )
) {
    require __DIR__  . $classes[$class][0];
}
    return true;
}

    /**
     * Autoloader that implements the PSR-0 spec for interoperability between
     * PHP software.
     *
     * kudos to@alganet for this autoloader script.
     * borrowed from https://github.com/Respect/Validation/blob/develop/tests/bootstrap.php
     */
    $fileParts = explode('\\', ltrim($class, '\\'));
    if (false !== strpos(end($fileParts), '_')) {
        array_splice($fileParts, -1, 1, explode('_', current($fileParts)));
    }
    $file = stream_resolve_include_path(implode(DIRECTORY_SEPARATOR, $fileParts) . '.php');
    if ($file) {
        return require $file;
    }

    return false;
} 
);


