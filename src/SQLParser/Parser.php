<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 102 "src/SQLParser/Parser.php"

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_NOT                          =  1;
    const T_AND                          =  2;
    const T_OR                           =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_NE                           =  7;
    const T_GT                           =  8;
    const T_GE                           =  9;
    const T_LT                           = 10;
    const T_LE                           = 11;
    const T_IN                           = 12;
    const T_PLUS                         = 13;
    const T_MINUS                        = 14;
    const T_CONCAT                       = 15;
    const T_TIMES                        = 16;
    const T_DIV                          = 17;
    const T_MOD                          = 18;
    const T_PIPE                         = 19;
    const T_BITWISE                      = 20;
    const T_FILTER_PIPE                  = 21;
    const SEMICOLON                      = 22;
    const PAR_OPEN                       = 23;
    const PAR_CLOSE                      = 24;
    const SELECT                         = 25;
    const ALL                            = 26;
    const DISTINCT                       = 27;
    const DISTINCTROW                    = 28;
    const HIGH_PRIORITY                  = 29;
    const STRAIGHT_JOIN                  = 30;
    const SQL_SMALL_RESULT               = 31;
    const SQL_BIG_RESULT                 = 32;
    const SQL_CACHE                      = 33;
    const SQL_CALC_FOUND_ROWS            = 34;
    const SQL_BUFFER_RESULT              = 35;
    const SQL_NO_CACHE                   = 36;
    const FROM                           = 37;
    const COMMA                          = 38;
    const T_AS                           = 39;
    const JOIN                           = 40;
    const INNER                          = 41;
    const LEFT                           = 42;
    const RIGHT                          = 43;
    const NATURAL                        = 44;
    const OUTER                          = 45;
    const ON                             = 46;
    const USING                          = 47;
    const WHERE                          = 48;
    const ORDER                          = 49;
    const BY                             = 50;
    const DESC                           = 51;
    const ASC                            = 52;
    const LIMIT                          = 53;
    const OFFSET                         = 54;
    const GROUP                          = 55;
    const HAVING                         = 56;
    const VALUES                         = 57;
    const DROP                           = 58;
    const TABLE                          = 59;
    const DELETE                         = 60;
    const UPDATE                         = 61;
    const INSERT                         = 62;
    const REPLACE                        = 63;
    const INTO                           = 64;
    const SET                            = 65;
    const CREATE                         = 66;
    const NUMBER                         = 67;
    const NULL                           = 68;
    const T_IS                           = 69;
    const T_CASE                         = 70;
    const T_END                          = 71;
    const T_ELSE                         = 72;
    const WHEN                           = 73;
    const THEN                           = 74;
    const INTERVAL                       = 75;
    const ALPHA                          = 76;
    const T_NULL                         = 77;
    const T_DOT                          = 78;
    const T_STRING                       = 79;
    const COLUMN                         = 80;
    const QUESTION                       = 81;
    const T_DOLLAR                       = 82;
    const YY_NO_ACTION = 368;
    const YY_ACCEPT_ACTION = 367;
    const YY_ERROR_ACTION = 366;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1358;
static public $yy_action = array(
 /*     0 */    18,  178,   16,   22,  126,  207,  269,  269,  269,  269,
 /*    10 */   229,  161,   35,  119,   13,  199,  179,  182,   61,   26,
 /*    20 */   181,  183,    7,   38,  167,  216,  216,  216,  216,  216,
 /*    30 */   216,  216,  216,  216,  216,  216,   14,   12,   62,  362,
 /*    40 */    15,   15,   15,   15,   15,   15,  134,   17,   17,   18,
 /*    50 */    17,   17,   17,  126,  179,  182,  151,  123,  181,  183,
 /*    60 */   195,   35,  119,  115,  199,  193,  206,  120,   53,   81,
 /*    70 */    83,    7,  197,   63,   11,   54,  148,   59,  181,  183,
 /*    80 */   220,  126,   18,  137,  150,  114,  126,  121,  209,  120,
 /*    90 */    58,   17,   17,   17,   35,  119,  229,  199,  201,  205,
 /*   100 */   226,   77,   76,   64,    7,   50,   83,  222,  221,  179,
 /*   110 */   182,   21,   49,  181,  183,  206,  125,   40,   81,  155,
 /*   120 */   201,  205,   42,   11,   54,  148,    9,  181,  183,  220,
 /*   130 */   126,   14,   12,   32,   10,   15,   15,   15,   15,   15,
 /*   140 */    15,  120,   17,   17,   64,   17,   17,   17,  206,  135,
 /*   150 */     2,   81,  120,  116,  147,  223,   11,   54,  148,  142,
 /*   160 */   181,  183,  220,  126,   18,  233,  221,  175,  126,   62,
 /*   170 */   222,  172,  201,  205,  111,   69,   35,  119,  165,  199,
 /*   180 */   204,  204,   56,  201,  205,  126,    7,  191,  144,   70,
 /*   190 */   109,  200,  164,   35,  119,  221,  199,  149,   64,   74,
 /*   200 */   126,   14,   12,  113,   26,   15,   15,   15,   15,   15,
 /*   210 */    15,  199,   17,   17,   25,   17,   17,   17,   53,  199,
 /*   220 */    14,   12,  185,   31,   15,   15,   15,   15,   15,   15,
 /*   230 */   206,   17,   17,   81,   17,   17,   17,   27,   11,   54,
 /*   240 */   148,    5,  181,  183,  220,  126,   44,  206,   60,  120,
 /*   250 */   116,  148,  133,   29,  225,   11,   54,  148,  158,  181,
 /*   260 */   183,  220,  126,   45,  166,   33,   51,  222,   64,  169,
 /*   270 */   179,  182,   50,   62,  181,  183,  220,  126,  179,  182,
 /*   280 */   201,  205,  181,  183,  179,  182,  211,   64,  181,  183,
 /*   290 */    14,   12,   24,  170,   15,   15,   15,   15,   15,   15,
 /*   300 */    36,   17,   17,   20,   17,   17,   17,  156,   37,   14,
 /*   310 */    12,  131,  146,   15,   15,   15,   15,   15,   15,   73,
 /*   320 */    17,   17,  154,   17,   17,   17,   14,   12,   28,    8,
 /*   330 */    15,   15,   15,   15,   15,   15,  136,   17,   17,   52,
 /*   340 */    17,   17,   17,  177,   14,   12,  231,  120,   15,   15,
 /*   350 */    15,   15,   15,   15,   67,   17,   17,   64,   17,   17,
 /*   360 */    17,  228,   18,  232,  145,  114,  126,  171,   53,   68,
 /*   370 */    83,  148,   71,  189,   35,  119,   64,  199,  201,  205,
 /*   380 */   184,   23,  180,  120,    4,  213,  153,    3,    6,  190,
 /*   390 */   224,  179,  182,   64,  152,  181,  183,  196,  110,   84,
 /*   400 */   230,  128,   55,   80,  212,   96,  186,   13,   47,  139,
 /*   410 */    40,   64,   78,  219,  201,  205,  129,  162,   46,  130,
 /*   420 */   187,  192,  215,  208,   75,  188,    1,  141,  206,  201,
 /*   430 */   205,   81,  108,   19,  273,  153,   11,   54,  148,  273,
 /*   440 */   181,  183,  220,  126,   14,   12,  273,  110,   15,   15,
 /*   450 */    15,   15,   15,   15,   96,   17,   17,  273,   17,   17,
 /*   460 */    17,  153,  273,   66,  273,  129,  273,  273,  273,  187,
 /*   470 */   217,  215,  208,  110,  188,   72,  112,  273,  201,  205,
 /*   480 */    57,  273,  273,  273,  191,  144,  273,  109,  273,  273,
 /*   490 */   273,  129,  273,  273,  273,  187,  273,  215,  208,  273,
 /*   500 */   188,  273,  273,  214,  201,  205,  273,  273,  273,   12,
 /*   510 */   273,   64,   15,   15,   15,   15,   15,   15,  273,   17,
 /*   520 */    17,  273,   17,   17,   17,  273,   15,   15,   15,   15,
 /*   530 */    15,   15,  273,   17,   17,  273,   17,   17,   17,  273,
 /*   540 */   273,  123,  273,  273,  273,  273,  273,  124,  367,  138,
 /*   550 */   163,  157,  159,  160,  174,  176,  173,  168,   30,  110,
 /*   560 */    83,  273,  273,  273,  273,  273,   88,  202,  157,  159,
 /*   570 */   160,  174,  176,  173,  168,   64,  273,  129,  273,  273,
 /*   580 */   273,  187,   48,  215,  208,  110,  188,  273,  112,   64,
 /*   590 */   201,  205,  153,  118,  126,  122,   34,   39,   39,   48,
 /*   600 */   273,  127,  123,  194,  110,  199,  273,  187,  124,  273,
 /*   610 */   227,   85,  188,  132,  203,  273,  201,  205,  273,  273,
 /*   620 */   110,  273,  129,  273,  273,  273,  187,   96,  215,  208,
 /*   630 */   273,  188,  273,  273,  273,  201,  205,  123,  129,  273,
 /*   640 */   273,  273,  187,  124,  215,  208,   59,  188,  273,  112,
 /*   650 */   273,  201,  205,   41,  273,  110,  117,  209,  120,   58,
 /*   660 */   273,  273,   91,  273,  179,  182,  273,  273,  181,  183,
 /*   670 */   220,  126,  153,  129,  273,  273,  222,  187,  273,  215,
 /*   680 */   208,  273,  188,  273,  110,  273,  201,  205,  273,  201,
 /*   690 */   205,   57,  143,  157,  159,  160,  174,  176,  173,  168,
 /*   700 */   120,  273,  129,  273,  273,  273,  187,  273,  215,  208,
 /*   710 */   273,  188,  273,  273,  218,  201,  205,  153,   43,  140,
 /*   720 */   273,  273,  273,  273,   48,  273,  273,  273,  273,  110,
 /*   730 */   273,  201,  205,  153,  273,  273,   85,  273,  273,  198,
 /*   740 */   273,  273,  273,  273,  273,  110,  273,  129,  273,  273,
 /*   750 */   273,  187,  104,  215,  208,  273,  188,  273,  273,  273,
 /*   760 */   201,  205,  273,  129,  273,  273,  273,  187,  153,  215,
 /*   770 */   208,  273,  188,  126,  273,  273,  201,  205,  273,  273,
 /*   780 */   110,  273,  273,  273,  199,  273,  273,   94,  273,  273,
 /*   790 */   273,  273,  273,  273,  273,  273,  273,  153,  129,  273,
 /*   800 */   273,  273,  187,  273,  215,  208,  273,  188,  273,  110,
 /*   810 */   273,  201,  205,  273,  273,  273,  105,  273,  273,  273,
 /*   820 */   273,  273,  273,  273,  273,  273,  273,  129,  273,  273,
 /*   830 */   273,  187,  273,  215,  208,  273,  188,  273,  273,  273,
 /*   840 */   201,  205,  153,  179,  182,  273,  273,  181,  183,  220,
 /*   850 */   126,  273,  273,  273,  110,  273,  273,  273,  153,  273,
 /*   860 */   273,   98,  273,  273,  273,  273,  273,  273,  273,  273,
 /*   870 */   110,  273,  129,  273,  273,  273,  187,   87,  215,  208,
 /*   880 */   273,  188,  273,  273,  273,  201,  205,  273,  129,  273,
 /*   890 */   273,  273,  187,  153,  215,  208,  273,  188,  273,  273,
 /*   900 */   273,  201,  205,  273,  273,  110,  273,  273,  273,  273,
 /*   910 */   273,  273,  107,  273,  273,  273,  273,  273,  273,  273,
 /*   920 */   273,  273,  153,  129,  273,  273,  273,  187,  273,  215,
 /*   930 */   208,  273,  188,  273,  110,  273,  201,  205,   59,  273,
 /*   940 */   273,   89,  273,  273,  273,  273,  273,  273,   79,  209,
 /*   950 */   120,   58,  129,  273,  273,  273,  187,  273,  215,  208,
 /*   960 */   273,  188,  273,  273,  273,  201,  205,  153,  222,  273,
 /*   970 */   273,  273,  273,  273,  273,  273,  273,  273,  273,  110,
 /*   980 */   273,  201,  205,  153,  273,  273,  106,  273,  273,  273,
 /*   990 */   273,  273,  273,  273,  273,  110,  273,  129,  273,  273,
 /*  1000 */   273,  187,  101,  215,  208,  273,  188,  273,  273,  273,
 /*  1010 */   201,  205,  273,  129,  273,  273,  273,  187,  153,  215,
 /*  1020 */   208,  273,  188,  273,  273,  273,  201,  205,  273,  273,
 /*  1030 */   110,  273,  273,  273,  273,  273,  273,   90,  273,  273,
 /*  1040 */   273,  273,  273,  273,  273,  273,  273,  153,  129,  273,
 /*  1050 */   273,  273,  187,  273,  215,  208,  273,  188,  273,  110,
 /*  1060 */   273,  201,  205,   59,  273,  273,   97,  273,  273,  273,
 /*  1070 */   273,  273,  273,  273,   82,  120,   58,  129,  273,  273,
 /*  1080 */   273,  187,  273,  215,  208,  273,  188,  273,  273,  273,
 /*  1090 */   201,  205,  153,  222,  273,  273,  273,  273,  273,  273,
 /*  1100 */   273,  273,  273,  273,  110,  273,  201,  205,  153,  273,
 /*  1110 */   273,   95,  273,  273,  273,  273,  273,  273,  273,  273,
 /*  1120 */   110,  273,  129,  273,  273,  273,  187,  102,  215,  208,
 /*  1130 */   273,  188,  273,  273,  273,  201,  205,  273,  129,  273,
 /*  1140 */   273,  273,  187,  153,  215,  208,  273,  188,  273,  273,
 /*  1150 */   273,  201,  205,  273,  273,  110,  273,  273,  273,  273,
 /*  1160 */   273,  273,   86,  273,  273,  273,  273,  273,  273,  273,
 /*  1170 */   273,  273,  153,  129,  273,  273,  273,  187,  273,  215,
 /*  1180 */   208,  273,  188,  273,  110,  273,  201,  205,   59,  273,
 /*  1190 */   273,  100,  273,  273,  273,  273,  273,  273,  273,   65,
 /*  1200 */   120,   58,  129,  273,  273,  273,  187,  273,  215,  208,
 /*  1210 */   273,  188,  273,  273,  273,  201,  205,  153,  222,  273,
 /*  1220 */   273,  273,  273,  273,  273,  273,  273,  273,  273,  110,
 /*  1230 */   273,  201,  205,  153,  273,  273,  103,  273,  273,  273,
 /*  1240 */   273,  273,  273,  273,  273,  110,  273,  129,  273,  273,
 /*  1250 */   273,  187,   93,  215,  208,  273,  188,  273,  273,  273,
 /*  1260 */   201,  205,  273,  129,  273,  273,  273,  187,  153,  215,
 /*  1270 */   208,  273,  188,  273,  273,  273,  201,  205,  273,  273,
 /*  1280 */   110,  273,  273,  273,  273,  273,  273,   92,  273,  273,
 /*  1290 */   273,  273,  273,  273,  273,  273,  273,  153,  129,  273,
 /*  1300 */   273,  273,  187,  273,  215,  208,  273,  188,  273,  110,
 /*  1310 */   273,  201,  205,   59,  273,  273,   99,  273,  273,  273,
 /*  1320 */   273,  273,  273,  273,  210,  120,   58,  129,  273,  273,
 /*  1330 */   273,  187,  273,  215,  208,  273,  188,  273,  273,  273,
 /*  1340 */   201,  205,  273,  222,  273,  273,  273,  273,  273,  273,
 /*  1350 */   273,  273,  273,  273,  273,  273,  201,  205,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   71,   72,   73,    5,   24,   40,   41,   42,   43,
 /*    10 */    44,   24,   13,   14,   48,   16,   75,   76,   39,   38,
 /*    20 */    79,   80,   23,   38,   24,   26,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,   34,   35,   36,    2,    3,   38,   12,
 /*    40 */     6,    7,    8,    9,   10,   11,  119,   13,   14,    1,
 /*    50 */    16,   17,   18,    5,   75,   76,  129,   88,   79,   80,
 /*    60 */   129,   13,   14,   94,   16,  134,   67,  106,   23,   70,
 /*    70 */    25,   23,   24,   39,   75,   76,   77,   94,   79,   80,
 /*    80 */    81,   82,    1,  122,  123,  124,    5,  104,  105,  106,
 /*    90 */   107,   16,   17,   18,   13,   14,   44,   16,  137,  138,
 /*   100 */    41,   42,   43,   69,   23,   78,   25,  124,  106,   75,
 /*   110 */    76,   46,   47,   79,   80,   67,  114,   65,   70,   94,
 /*   120 */   137,  138,   23,   75,   76,   77,   38,   79,   80,   81,
 /*   130 */    82,    2,    3,   37,   38,    6,    7,    8,    9,   10,
 /*   140 */    11,  106,   13,   14,   69,   16,   17,   18,   67,   67,
 /*   150 */    50,   70,  106,  107,  129,   24,   75,   76,   77,  124,
 /*   160 */    79,   80,   81,   82,    1,   88,  106,  121,    5,   38,
 /*   170 */   124,   94,  137,  138,  114,    1,   13,   14,   68,   16,
 /*   180 */    51,   52,   12,  137,  138,    5,   23,  108,  109,   38,
 /*   190 */   111,  106,   24,   13,   14,  106,   16,  120,   69,  120,
 /*   200 */     5,    2,    3,  114,   38,    6,    7,    8,    9,   10,
 /*   210 */    11,   16,   13,   14,   56,   16,   17,   18,   23,   16,
 /*   220 */     2,    3,  137,   22,    6,    7,    8,    9,   10,   11,
 /*   230 */    67,   13,   14,   70,   16,   17,   18,   38,   75,   76,
 /*   240 */    77,   50,   79,   80,   81,   82,   38,   67,   39,  106,
 /*   250 */   107,   77,   23,   54,   67,   75,   76,   77,   24,   79,
 /*   260 */    80,   81,   82,   59,  121,   59,   23,  124,   69,   24,
 /*   270 */    75,   76,   78,   38,   79,   80,   81,   82,   75,   76,
 /*   280 */   137,  138,   79,   80,   75,   76,   76,   69,   79,   80,
 /*   290 */     2,    3,   74,   24,    6,    7,    8,    9,   10,   11,
 /*   300 */    37,   13,   14,    6,   16,   17,   18,  102,   40,    2,
 /*   310 */     3,   55,   24,    6,    7,    8,    9,   10,   11,  100,
 /*   320 */    13,   14,  129,   16,   17,   18,    2,    3,   53,   23,
 /*   330 */     6,    7,    8,    9,   10,   11,   49,   13,   14,   23,
 /*   340 */    16,   17,   18,  128,    2,    3,   45,  106,    6,    7,
 /*   350 */     8,    9,   10,   11,  101,   13,   14,   69,   16,   17,
 /*   360 */    18,  112,    1,  112,  123,  124,    5,  102,   23,   99,
 /*   370 */    25,   77,  101,  106,   13,   14,   69,   16,  137,  138,
 /*   380 */   106,   74,  106,  106,   23,  106,   94,   23,   23,  106,
 /*   390 */   106,   75,   76,   69,  128,   79,   80,  102,  106,   97,
 /*   400 */    76,  124,   57,  126,  106,  113,  110,   48,   98,  117,
 /*   410 */    65,   69,   99,   71,  137,  138,  124,  127,   98,    1,
 /*   420 */   128,  129,  130,  131,  101,  133,   95,  135,   67,  137,
 /*   430 */   138,   70,  132,   73,  139,   94,   75,   76,   77,  139,
 /*   440 */    79,   80,   81,   82,    2,    3,  139,  106,    6,    7,
 /*   450 */     8,    9,   10,   11,  113,   13,   14,  139,   16,   17,
 /*   460 */    18,   94,  139,   96,  139,  124,  139,  139,  139,  128,
 /*   470 */   103,  130,  131,  106,  133,   99,  135,  139,  137,  138,
 /*   480 */   113,  139,  139,  139,  108,  109,  139,  111,  139,  139,
 /*   490 */   139,  124,  139,  139,  139,  128,  139,  130,  131,  139,
 /*   500 */   133,  139,  139,  136,  137,  138,  139,  139,  139,    3,
 /*   510 */   139,   69,    6,    7,    8,    9,   10,   11,  139,   13,
 /*   520 */    14,  139,   16,   17,   18,  139,    6,    7,    8,    9,
 /*   530 */    10,   11,  139,   13,   14,  139,   16,   17,   18,  139,
 /*   540 */   139,   88,  139,  139,  139,  139,  139,   94,   84,   85,
 /*   550 */    86,   87,   88,   89,   90,   91,   92,   93,   23,  106,
 /*   560 */    25,  139,  139,  139,  139,  139,  113,   86,   87,   88,
 /*   570 */    89,   90,   91,   92,   93,   69,  139,  124,  139,  139,
 /*   580 */   139,  128,  118,  130,  131,  106,  133,  139,  135,   69,
 /*   590 */   137,  138,   94,   58,    5,   60,   61,   62,   63,  118,
 /*   600 */   139,   66,   88,  124,  106,   16,  139,  128,   94,  139,
 /*   610 */   131,  113,  133,  115,  116,  139,  137,  138,  139,  139,
 /*   620 */   106,  139,  124,  139,  139,  139,  128,  113,  130,  131,
 /*   630 */   139,  133,  139,  139,  139,  137,  138,   88,  124,  139,
 /*   640 */   139,  139,  128,   94,  130,  131,   94,  133,  139,  135,
 /*   650 */   139,  137,  138,   64,  139,  106,  104,  105,  106,  107,
 /*   660 */   139,  139,  113,  139,   75,   76,  139,  139,   79,   80,
 /*   670 */    81,   82,   94,  124,  139,  139,  124,  128,  139,  130,
 /*   680 */   131,  139,  133,  139,  106,  139,  137,  138,  139,  137,
 /*   690 */   138,  113,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   700 */   106,  139,  124,  139,  139,  139,  128,  139,  130,  131,
 /*   710 */   139,  133,  139,  139,  136,  137,  138,   94,  124,  125,
 /*   720 */   139,  139,  139,  139,  118,  139,  139,  139,  139,  106,
 /*   730 */   139,  137,  138,   94,  139,  139,  113,  139,  139,  116,
 /*   740 */   139,  139,  139,  139,  139,  106,  139,  124,  139,  139,
 /*   750 */   139,  128,  113,  130,  131,  139,  133,  139,  139,  139,
 /*   760 */   137,  138,  139,  124,  139,  139,  139,  128,   94,  130,
 /*   770 */   131,  139,  133,    5,  139,  139,  137,  138,  139,  139,
 /*   780 */   106,  139,  139,  139,   16,  139,  139,  113,  139,  139,
 /*   790 */   139,  139,  139,  139,  139,  139,  139,   94,  124,  139,
 /*   800 */   139,  139,  128,  139,  130,  131,  139,  133,  139,  106,
 /*   810 */   139,  137,  138,  139,  139,  139,  113,  139,  139,  139,
 /*   820 */   139,  139,  139,  139,  139,  139,  139,  124,  139,  139,
 /*   830 */   139,  128,  139,  130,  131,  139,  133,  139,  139,  139,
 /*   840 */   137,  138,   94,   75,   76,  139,  139,   79,   80,   81,
 /*   850 */    82,  139,  139,  139,  106,  139,  139,  139,   94,  139,
 /*   860 */   139,  113,  139,  139,  139,  139,  139,  139,  139,  139,
 /*   870 */   106,  139,  124,  139,  139,  139,  128,  113,  130,  131,
 /*   880 */   139,  133,  139,  139,  139,  137,  138,  139,  124,  139,
 /*   890 */   139,  139,  128,   94,  130,  131,  139,  133,  139,  139,
 /*   900 */   139,  137,  138,  139,  139,  106,  139,  139,  139,  139,
 /*   910 */   139,  139,  113,  139,  139,  139,  139,  139,  139,  139,
 /*   920 */   139,  139,   94,  124,  139,  139,  139,  128,  139,  130,
 /*   930 */   131,  139,  133,  139,  106,  139,  137,  138,   94,  139,
 /*   940 */   139,  113,  139,  139,  139,  139,  139,  139,  104,  105,
 /*   950 */   106,  107,  124,  139,  139,  139,  128,  139,  130,  131,
 /*   960 */   139,  133,  139,  139,  139,  137,  138,   94,  124,  139,
 /*   970 */   139,  139,  139,  139,  139,  139,  139,  139,  139,  106,
 /*   980 */   139,  137,  138,   94,  139,  139,  113,  139,  139,  139,
 /*   990 */   139,  139,  139,  139,  139,  106,  139,  124,  139,  139,
 /*  1000 */   139,  128,  113,  130,  131,  139,  133,  139,  139,  139,
 /*  1010 */   137,  138,  139,  124,  139,  139,  139,  128,   94,  130,
 /*  1020 */   131,  139,  133,  139,  139,  139,  137,  138,  139,  139,
 /*  1030 */   106,  139,  139,  139,  139,  139,  139,  113,  139,  139,
 /*  1040 */   139,  139,  139,  139,  139,  139,  139,   94,  124,  139,
 /*  1050 */   139,  139,  128,  139,  130,  131,  139,  133,  139,  106,
 /*  1060 */   139,  137,  138,   94,  139,  139,  113,  139,  139,  139,
 /*  1070 */   139,  139,  139,  139,  105,  106,  107,  124,  139,  139,
 /*  1080 */   139,  128,  139,  130,  131,  139,  133,  139,  139,  139,
 /*  1090 */   137,  138,   94,  124,  139,  139,  139,  139,  139,  139,
 /*  1100 */   139,  139,  139,  139,  106,  139,  137,  138,   94,  139,
 /*  1110 */   139,  113,  139,  139,  139,  139,  139,  139,  139,  139,
 /*  1120 */   106,  139,  124,  139,  139,  139,  128,  113,  130,  131,
 /*  1130 */   139,  133,  139,  139,  139,  137,  138,  139,  124,  139,
 /*  1140 */   139,  139,  128,   94,  130,  131,  139,  133,  139,  139,
 /*  1150 */   139,  137,  138,  139,  139,  106,  139,  139,  139,  139,
 /*  1160 */   139,  139,  113,  139,  139,  139,  139,  139,  139,  139,
 /*  1170 */   139,  139,   94,  124,  139,  139,  139,  128,  139,  130,
 /*  1180 */   131,  139,  133,  139,  106,  139,  137,  138,   94,  139,
 /*  1190 */   139,  113,  139,  139,  139,  139,  139,  139,  139,  105,
 /*  1200 */   106,  107,  124,  139,  139,  139,  128,  139,  130,  131,
 /*  1210 */   139,  133,  139,  139,  139,  137,  138,   94,  124,  139,
 /*  1220 */   139,  139,  139,  139,  139,  139,  139,  139,  139,  106,
 /*  1230 */   139,  137,  138,   94,  139,  139,  113,  139,  139,  139,
 /*  1240 */   139,  139,  139,  139,  139,  106,  139,  124,  139,  139,
 /*  1250 */   139,  128,  113,  130,  131,  139,  133,  139,  139,  139,
 /*  1260 */   137,  138,  139,  124,  139,  139,  139,  128,   94,  130,
 /*  1270 */   131,  139,  133,  139,  139,  139,  137,  138,  139,  139,
 /*  1280 */   106,  139,  139,  139,  139,  139,  139,  113,  139,  139,
 /*  1290 */   139,  139,  139,  139,  139,  139,  139,   94,  124,  139,
 /*  1300 */   139,  139,  128,  139,  130,  131,  139,  133,  139,  106,
 /*  1310 */   139,  137,  138,   94,  139,  139,  113,  139,  139,  139,
 /*  1320 */   139,  139,  139,  139,  105,  106,  107,  124,  139,  139,
 /*  1330 */   139,  128,  139,  130,  131,  139,  133,  139,  139,  139,
 /*  1340 */   137,  138,  139,  124,  139,  139,  139,  139,  139,  139,
 /*  1350 */   139,  139,  139,  139,  139,  139,  137,  138,
);
    const YY_SHIFT_USE_DFLT = -71;
    const YY_SHIFT_MAX = 144;
    static public $yy_shift_ofst = array(
 /*     0 */   535,   -1,  361,   81,   81,  163,   48,   81,  163,  163,
 /*    10 */   163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
 /*    20 */   163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
 /*    30 */   535,  535,  195,  195,  195,  180,  195,  195,  195,  589,
 /*    40 */   768,  768,  768,  768,  768,  768,  -34,   52,  345,  316,
 /*    50 */   203,  -59,  -59,   45,  365,  306,  364,   34,  -21,  209,
 /*    60 */   -59,  -59,  -59,  -59,  174,   65,   96,  275,  287,  294,
 /*    70 */   306,  275,  256,  287,  359,  275,  301,  301,  287,  -15,
 /*    80 */   418,  360,  359,  -71,  -71,  129,  199,  307,  288,  342,
 /*    90 */   324,  288,  218,  442,  442,  442,  442,  442,  442,  442,
 /*   100 */   442,  442,  442,  442,  506,  520,  520,   75,  -70,   59,
 /*   110 */    27,    0,  -19,  131,  297,  245,  243,  -15,  206,  187,
 /*   120 */   194,  -15,  263,  269,  245,  235,  210,  204,  229,  170,
 /*   130 */   110,  100,   88,   82,  151,  168,  191,  208,  201,  158,
 /*   140 */   234,  166,   99,  -13,  268,
);
    const YY_REDUCE_USE_DFLT = -74;
    const YY_REDUCE_MAX = 84;
    static public $yy_reduce_ofst = array(
 /*     0 */   464,  367,  292,  514,  453,  498,  341,  549,  341,  623,
 /*    10 */   578,  924,  703,  889,  639,  873,  828,  799,  748,  764,
 /*    20 */   953, 1139, 1174, 1123, 1078,  998, 1014,  674, 1049, 1203,
 /*    30 */   606,  481,  552,  -17,  844,  479,  969, 1094, 1219,  143,
 /*    40 */   -39,   46,  594,  277,  241,   35,  376,   79,   77,    2,
 /*    50 */    85,   60,   89,  -31,  -69,  -73,   25,  279,  267,  274,
 /*    60 */   276,  283,  284,  298,  266,  296,  302,  295,  271,  215,
 /*    70 */   193,  205,  219,  253,  270,  265,  249,  251,  323,  310,
 /*    80 */   290,  300,  313,  331,  320,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(23, 25, 58, 60, 61, 62, 63, 66, ),
        /* 1 */ array(1, 5, 13, 14, 16, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 2 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 3 */ array(1, 5, 13, 14, 16, 23, 25, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 4 */ array(1, 5, 13, 14, 16, 23, 25, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 5 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 6 */ array(1, 5, 13, 14, 16, 23, 24, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 7 */ array(1, 5, 13, 14, 16, 23, 25, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 8 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 9 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 10 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 11 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 12 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 13 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 14 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 15 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 16 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 17 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 18 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 19 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 20 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 21 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 22 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 23 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 24 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 25 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 26 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 27 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 28 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 29 */ array(1, 5, 13, 14, 16, 23, 67, 70, 75, 76, 77, 79, 80, 81, 82, ),
        /* 30 */ array(23, 25, 58, 60, 61, 62, 63, 66, ),
        /* 31 */ array(23, 25, 58, 60, 61, 62, 63, 66, ),
        /* 32 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 33 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 34 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 35 */ array(5, 13, 14, 16, 67, 75, 76, 77, 79, 80, 81, 82, ),
        /* 36 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 37 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 38 */ array(5, 16, 23, 75, 76, 79, 80, 81, 82, ),
        /* 39 */ array(5, 16, 64, 75, 76, 79, 80, 81, 82, ),
        /* 40 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 41 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 42 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 43 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 44 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 45 */ array(5, 16, 75, 76, 79, 80, 81, 82, ),
        /* 46 */ array(40, 41, 42, 43, 44, 48, ),
        /* 47 */ array(44, 65, ),
        /* 48 */ array(23, 25, 57, 65, ),
        /* 49 */ array(23, 75, 76, 79, 80, ),
        /* 50 */ array(16, 75, 76, 79, 80, ),
        /* 51 */ array(75, 76, 79, 80, ),
        /* 52 */ array(75, 76, 79, 80, ),
        /* 53 */ array(23, 25, ),
        /* 54 */ array(23, ),
        /* 55 */ array(23, ),
        /* 56 */ array(23, ),
        /* 57 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 39, 69, 75, 76, 79, 80, ),
        /* 58 */ array(39, 75, 76, 79, 80, ),
        /* 59 */ array(39, 75, 76, 79, 80, ),
        /* 60 */ array(75, 76, 79, 80, ),
        /* 61 */ array(75, 76, 79, 80, ),
        /* 62 */ array(75, 76, 79, 80, ),
        /* 63 */ array(75, 76, 79, 80, ),
        /* 64 */ array(1, 77, ),
        /* 65 */ array(46, 47, ),
        /* 66 */ array(37, 38, ),
        /* 67 */ array(53, ),
        /* 68 */ array(49, ),
        /* 69 */ array(77, ),
        /* 70 */ array(23, ),
        /* 71 */ array(53, ),
        /* 72 */ array(55, ),
        /* 73 */ array(49, ),
        /* 74 */ array(48, ),
        /* 75 */ array(53, ),
        /* 76 */ array(45, ),
        /* 77 */ array(45, ),
        /* 78 */ array(49, ),
        /* 79 */ array(38, ),
        /* 80 */ array(1, ),
        /* 81 */ array(73, ),
        /* 82 */ array(48, ),
        /* 83 */ array(),
        /* 84 */ array(),
        /* 85 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 51, 52, 69, ),
        /* 86 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 38, 54, 69, ),
        /* 87 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, 74, ),
        /* 88 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 24, 69, ),
        /* 89 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, 71, ),
        /* 90 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, 76, ),
        /* 91 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 24, 69, ),
        /* 92 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, 74, ),
        /* 93 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 94 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 95 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 96 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 97 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 98 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 99 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 100 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 101 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 102 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 103 */ array(2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 104 */ array(3, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 105 */ array(6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 106 */ array(6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 69, ),
        /* 107 */ array(16, 17, 18, 69, ),
        /* 108 */ array(71, 72, 73, ),
        /* 109 */ array(41, 42, 43, ),
        /* 110 */ array(12, 78, ),
        /* 111 */ array(24, 38, ),
        /* 112 */ array(24, 38, ),
        /* 113 */ array(24, 38, ),
        /* 114 */ array(6, ),
        /* 115 */ array(24, ),
        /* 116 */ array(23, ),
        /* 117 */ array(38, ),
        /* 118 */ array(59, ),
        /* 119 */ array(67, ),
        /* 120 */ array(78, ),
        /* 121 */ array(38, ),
        /* 122 */ array(37, ),
        /* 123 */ array(24, ),
        /* 124 */ array(24, ),
        /* 125 */ array(38, ),
        /* 126 */ array(76, ),
        /* 127 */ array(59, ),
        /* 128 */ array(23, ),
        /* 129 */ array(12, ),
        /* 130 */ array(68, ),
        /* 131 */ array(50, ),
        /* 132 */ array(38, ),
        /* 133 */ array(67, ),
        /* 134 */ array(38, ),
        /* 135 */ array(24, ),
        /* 136 */ array(50, ),
        /* 137 */ array(38, ),
        /* 138 */ array(22, ),
        /* 139 */ array(56, ),
        /* 140 */ array(24, ),
        /* 141 */ array(38, ),
        /* 142 */ array(23, ),
        /* 143 */ array(24, ),
        /* 144 */ array(40, ),
        /* 145 */ array(),
        /* 146 */ array(),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
);
    static public $yy_default = array(
 /*     0 */   245,  366,  366,  366,  366,  366,  366,  366,  366,  366,
 /*    10 */   366,  358,  366,  366,  366,  366,  366,  366,  366,  366,
 /*    20 */   366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
 /*    30 */   245,  245,  366,  366,  366,  366,  366,  366,  366,  366,
 /*    40 */   366,  366,  366,  366,  366,  366,  277,  269,  366,  366,
 /*    50 */   366,  366,  366,  366,  360,  366,  366,  351,  260,  366,
 /*    60 */   366,  366,  366,  366,  366,  275,  253,  287,  279,  366,
 /*    70 */   366,  287,  290,  279,  277,  287,  271,  271,  279,  262,
 /*    80 */   366,  366,  277,  250,  262,  283,  286,  366,  348,  366,
 /*    90 */   366,  366,  366,  272,  285,  289,  348,  305,  313,  284,
 /*   100 */   326,  276,  347,  327,  311,  312,  316,  319,  366,  267,
 /*   110 */   334,  366,  366,  366,  366,  366,  300,  252,  366,  366,
 /*   120 */   362,  295,  366,  366,  315,  273,  366,  366,  308,  335,
 /*   130 */   366,  366,  278,  366,  293,  366,  366,  302,  234,  288,
 /*   140 */   366,  343,  366,  366,  366,  303,  314,  321,  336,  294,
 /*   150 */   304,  345,  318,  315,  344,  320,  297,  238,  306,  239,
 /*   160 */   240,  237,  307,  236,  309,  310,  299,  301,  244,  246,
 /*   170 */   247,  296,  292,  243,  241,  298,  242,  317,  324,  358,
 /*   180 */   256,  359,  360,  361,  257,  355,  263,  332,  333,  259,
 /*   190 */   258,  261,  342,  337,  335,  340,  248,  341,  280,  363,
 /*   200 */   362,  356,  235,  281,  282,  357,  331,  346,  323,  255,
 /*   210 */   254,  365,  352,  353,  350,  322,  251,  249,  349,  325,
 /*   220 */   364,  339,  354,  274,  338,  330,  264,  329,  266,  268,
 /*   230 */   328,  270,  265,  291,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 140;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 234;
    const YYNRULE = 132;
    const YYERRORSYMBOL = 83;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_NOT',         'T_AND',         'T_OR',        
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_NE',        
  'T_GT',          'T_GE',          'T_LT',          'T_LE',        
  'T_IN',          'T_PLUS',        'T_MINUS',       'T_CONCAT',    
  'T_TIMES',       'T_DIV',         'T_MOD',         'T_PIPE',      
  'T_BITWISE',     'T_FILTER_PIPE',  'SEMICOLON',     'PAR_OPEN',    
  'PAR_CLOSE',     'SELECT',        'ALL',           'DISTINCT',    
  'DISTINCTROW',   'HIGH_PRIORITY',  'STRAIGHT_JOIN',  'SQL_SMALL_RESULT',
  'SQL_BIG_RESULT',  'SQL_CACHE',     'SQL_CALC_FOUND_ROWS',  'SQL_BUFFER_RESULT',
  'SQL_NO_CACHE',  'FROM',          'COMMA',         'T_AS',        
  'JOIN',          'INNER',         'LEFT',          'RIGHT',       
  'NATURAL',       'OUTER',         'ON',            'USING',       
  'WHERE',         'ORDER',         'BY',            'DESC',        
  'ASC',           'LIMIT',         'OFFSET',        'GROUP',       
  'HAVING',        'VALUES',        'DROP',          'TABLE',       
  'DELETE',        'UPDATE',        'INSERT',        'REPLACE',     
  'INTO',          'SET',           'CREATE',        'NUMBER',      
  'NULL',          'T_IS',          'T_CASE',        'T_END',       
  'T_ELSE',        'WHEN',          'THEN',          'INTERVAL',    
  'ALPHA',         'T_NULL',        'T_DOT',         'T_STRING',    
  'COLUMN',        'QUESTION',      'T_DOLLAR',      'error',       
  'query',         'stmts',         'stmt',          'drop',        
  'select',        'insert',        'update',        'delete',      
  'alter_table',   'create_table',  'inner_select',  'select_opts', 
  'expr_list_as',  'from',          'joins',         'where',       
  'group_by',      'order_by',      'limit',         'select_mod',  
  'table_list',    'table_with_alias',  'alpha',         'table_name',  
  'join',          'join_type',     'join_condition',  'join_prefix', 
  'join_postfix',  'expr',          'columns',       'order_by_fields',
  'order_by_field',  'expr_list_par_optional',  'insert_stmt',   'expr_list_par_many',
  'set_expr',      'insert_table',  'set_expr_values',  'assign',      
  'colname',       'create_fields',  'data_type',     'column_mod',  
  'null',          'expr_list_par',  'case',          'term',        
  'case_options',  'function_call',  'expr_list_par_or_null',  'expr_list',   
  'expr_as',       'xalpha',        'variable',    
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= PAR_OPEN stmt PAR_CLOSE",
 /*   4 */ "stmt ::= drop",
 /*   5 */ "stmt ::= select",
 /*   6 */ "stmt ::= insert",
 /*   7 */ "stmt ::= update",
 /*   8 */ "stmt ::= delete",
 /*   9 */ "stmt ::= alter_table",
 /*  10 */ "stmt ::= create_table",
 /*  11 */ "stmt ::=",
 /*  12 */ "inner_select ::= PAR_OPEN inner_select PAR_CLOSE",
 /*  13 */ "inner_select ::= PAR_OPEN select PAR_CLOSE",
 /*  14 */ "select ::= SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  15 */ "select_opts ::= select_opts select_mod",
 /*  16 */ "select_opts ::=",
 /*  17 */ "select_mod ::= ALL|DISTINCT|DISTINCTROW|HIGH_PRIORITY|STRAIGHT_JOIN|SQL_SMALL_RESULT|SQL_BIG_RESULT|SQL_CACHE|SQL_CALC_FOUND_ROWS|SQL_BUFFER_RESULT|SQL_NO_CACHE",
 /*  18 */ "from ::= FROM table_list",
 /*  19 */ "from ::=",
 /*  20 */ "table_list ::= table_list COMMA table_with_alias",
 /*  21 */ "table_list ::= table_with_alias",
 /*  22 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  23 */ "table_with_alias ::= inner_select alpha",
 /*  24 */ "table_with_alias ::= table_name T_AS alpha",
 /*  25 */ "table_with_alias ::= table_name alpha",
 /*  26 */ "table_with_alias ::= table_name",
 /*  27 */ "joins ::= joins join",
 /*  28 */ "joins ::=",
 /*  29 */ "join ::= join_type JOIN table_with_alias join_condition",
 /*  30 */ "join_type ::= join_prefix INNER",
 /*  31 */ "join_type ::= join_prefix LEFT join_postfix",
 /*  32 */ "join_type ::= join_prefix RIGHT join_postfix",
 /*  33 */ "join_type ::= join_prefix",
 /*  34 */ "join_prefix ::= NATURAL",
 /*  35 */ "join_prefix ::=",
 /*  36 */ "join_postfix ::= OUTER",
 /*  37 */ "join_postfix ::=",
 /*  38 */ "join_condition ::= ON expr",
 /*  39 */ "join_condition ::= USING columns",
 /*  40 */ "join_condition ::= USING PAR_OPEN columns PAR_CLOSE",
 /*  41 */ "join_condition ::=",
 /*  42 */ "where ::= WHERE expr",
 /*  43 */ "where ::=",
 /*  44 */ "order_by ::= ORDER BY order_by_fields",
 /*  45 */ "order_by ::=",
 /*  46 */ "order_by_fields ::= order_by_fields COMMA order_by_field",
 /*  47 */ "order_by_fields ::= order_by_field",
 /*  48 */ "order_by_field ::= expr DESC|ASC",
 /*  49 */ "order_by_field ::= expr",
 /*  50 */ "limit ::= LIMIT expr OFFSET expr",
 /*  51 */ "limit ::= LIMIT expr COMMA expr",
 /*  52 */ "limit ::= LIMIT expr",
 /*  53 */ "limit ::=",
 /*  54 */ "group_by ::= GROUP BY expr_list_par_optional",
 /*  55 */ "group_by ::= GROUP BY expr_list_par_optional HAVING expr",
 /*  56 */ "group_by ::=",
 /*  57 */ "insert ::= insert_stmt select",
 /*  58 */ "insert ::= insert_stmt inner_select",
 /*  59 */ "insert ::= insert_stmt VALUES expr_list_par_many",
 /*  60 */ "insert ::= insert_stmt set_expr",
 /*  61 */ "drop ::= DROP TABLE table_list",
 /*  62 */ "delete ::= DELETE FROM table_with_alias where order_by limit",
 /*  63 */ "update ::= UPDATE table_list joins set_expr where order_by limit",
 /*  64 */ "insert_stmt ::= INSERT|REPLACE INTO insert_table",
 /*  65 */ "insert_stmt ::= INSERT|REPLACE insert_table",
 /*  66 */ "insert_table ::= table_name",
 /*  67 */ "insert_table ::= table_name PAR_OPEN columns PAR_CLOSE",
 /*  68 */ "set_expr ::= SET set_expr_values",
 /*  69 */ "set_expr_values ::= set_expr_values COMMA assign",
 /*  70 */ "set_expr_values ::= assign",
 /*  71 */ "assign ::= colname T_EQ expr",
 /*  72 */ "create_table ::= CREATE TABLE colname PAR_OPEN create_fields PAR_CLOSE",
 /*  73 */ "create_fields ::= colname data_type column_mod",
 /*  74 */ "data_type ::= colname",
 /*  75 */ "data_type ::= colname PAR_OPEN NUMBER PAR_CLOSE",
 /*  76 */ "column_mod ::= T_NOT NULL",
 /*  77 */ "expr ::= expr T_AND expr",
 /*  78 */ "expr ::= expr T_OR expr",
 /*  79 */ "expr ::= T_NOT expr",
 /*  80 */ "expr ::= PAR_OPEN expr PAR_CLOSE",
 /*  81 */ "expr ::= inner_select",
 /*  82 */ "expr ::= expr T_EQ|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /*  83 */ "expr ::= expr T_IS T_NOT null",
 /*  84 */ "expr ::= expr T_IS null",
 /*  85 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /*  86 */ "expr ::= colname T_IN inner_select",
 /*  87 */ "expr ::= colname T_IN expr_list_par",
 /*  88 */ "expr ::= case",
 /*  89 */ "expr ::= term",
 /*  90 */ "case ::= T_CASE case_options T_END",
 /*  91 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /*  92 */ "case_options ::= case_options WHEN expr THEN expr",
 /*  93 */ "case_options ::= WHEN expr THEN expr",
 /*  94 */ "term ::= INTERVAL expr ALPHA",
 /*  95 */ "term ::= T_PLUS term",
 /*  96 */ "term ::= T_MINUS NUMBER",
 /*  97 */ "term ::= NUMBER",
 /*  98 */ "term ::= null",
 /*  99 */ "term ::= function_call",
 /* 100 */ "term ::= alpha",
 /* 101 */ "term ::= colname",
 /* 102 */ "null ::= T_NULL",
 /* 103 */ "function_call ::= ALPHA expr_list_par_or_null",
 /* 104 */ "columns ::= columns COMMA alpha",
 /* 105 */ "columns ::= alpha",
 /* 106 */ "expr_list_par_or_null ::= expr_list_par",
 /* 107 */ "expr_list_par_or_null ::= PAR_OPEN PAR_CLOSE",
 /* 108 */ "expr_list_par_optional ::= expr_list_par",
 /* 109 */ "expr_list_par_optional ::= expr_list",
 /* 110 */ "expr_list_par_many ::= expr_list_par_many COMMA expr_list_par",
 /* 111 */ "expr_list_par_many ::= expr_list_par",
 /* 112 */ "expr_list_par ::= PAR_OPEN expr_list PAR_CLOSE",
 /* 113 */ "expr_list ::= expr_list COMMA expr",
 /* 114 */ "expr_list ::= expr",
 /* 115 */ "expr_list_as ::= expr_list_as COMMA expr_as",
 /* 116 */ "expr_list_as ::= expr_as",
 /* 117 */ "expr_as ::= expr",
 /* 118 */ "expr_as ::= expr T_AS alpha",
 /* 119 */ "expr_as ::= expr alpha",
 /* 120 */ "table_name ::= colname",
 /* 121 */ "colname ::= alpha T_DOT xalpha",
 /* 122 */ "colname ::= xalpha",
 /* 123 */ "colname ::= variable",
 /* 124 */ "alpha ::= INTERVAL",
 /* 125 */ "alpha ::= T_STRING",
 /* 126 */ "alpha ::= ALPHA",
 /* 127 */ "alpha ::= COLUMN",
 /* 128 */ "xalpha ::= alpha",
 /* 129 */ "xalpha ::= T_TIMES",
 /* 130 */ "variable ::= QUESTION",
 /* 131 */ "variable ::= T_DOLLAR|T_COLON ALPHA",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 9 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 0 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 0 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 4 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 0 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 0 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 110, 'rhs' => 4 ),
  array( 'lhs' => 110, 'rhs' => 0 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 0 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 0 ),
  array( 'lhs' => 115, 'rhs' => 3 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 0 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 0 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 6 ),
  array( 'lhs' => 90, 'rhs' => 7 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 4 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 122, 'rhs' => 1 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 6 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 4 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 5 ),
  array( 'lhs' => 132, 'rhs' => 5 ),
  array( 'lhs' => 132, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 114, 'rhs' => 3 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 3 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        20 => 1,
        2 => 2,
        3 => 3,
        112 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        18 => 4,
        26 => 4,
        42 => 4,
        44 => 4,
        68 => 4,
        88 => 4,
        89 => 4,
        98 => 4,
        99 => 4,
        100 => 4,
        106 => 4,
        108 => 4,
        109 => 4,
        117 => 4,
        123 => 4,
        128 => 4,
        11 => 11,
        12 => 12,
        13 => 12,
        14 => 14,
        15 => 15,
        27 => 15,
        16 => 16,
        17 => 17,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        37 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        43 => 41,
        45 => 41,
        53 => 41,
        46 => 46,
        69 => 46,
        104 => 46,
        110 => 46,
        113 => 46,
        115 => 46,
        47 => 47,
        52 => 47,
        70 => 47,
        105 => 47,
        111 => 47,
        114 => 47,
        116 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 50,
        54 => 54,
        55 => 55,
        57 => 57,
        58 => 57,
        59 => 59,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        71 => 71,
        84 => 71,
        73 => 73,
        74 => 74,
        75 => 75,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        85 => 82,
        83 => 83,
        86 => 86,
        87 => 86,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        101 => 95,
        96 => 96,
        97 => 97,
        102 => 102,
        103 => 103,
        107 => 107,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        129 => 129,
        130 => 130,
        131 => 131,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1752 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1755 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 1758 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 1761 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1764 "src/SQLParser/Parser.php"
#line 44 "src/SQLParser/Parser.y"
    function yy_r11(){ $this->_retvalue = null;     }
#line 1767 "src/SQLParser/Parser.php"
#line 46 "src/SQLParser/Parser.y"
    function yy_r12(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 1770 "src/SQLParser/Parser.php"
#line 50 "src/SQLParser/Parser.y"
    function yy_r14(){ 
    $this->_retvalue = new SQLParser\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  $this->_retvalue->from($this->yystack[$this->yyidx + -5]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1782 "src/SQLParser/Parser.php"
#line 61 "src/SQLParser/Parser.y"
    function yy_r15(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1785 "src/SQLParser/Parser.php"
#line 62 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = array();     }
#line 1788 "src/SQLParser/Parser.php"
#line 63 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = strtoupper(@$this->yystack[$this->yyidx + 0]->minor);     }
#line 1791 "src/SQLParser/Parser.php"
#line 69 "src/SQLParser/Parser.y"
    function yy_r21(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 1794 "src/SQLParser/Parser.php"
#line 71 "src/SQLParser/Parser.y"
    function yy_r22(){ $this->_retvalue = new Stmt\Table($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1797 "src/SQLParser/Parser.php"
#line 72 "src/SQLParser/Parser.y"
    function yy_r23(){ $this->_retvalue = new Stmt\Table($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1800 "src/SQLParser/Parser.php"
#line 73 "src/SQLParser/Parser.y"
    function yy_r24(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->setAlias($this->yystack[$this->yyidx + 0]->minor);     }
#line 1803 "src/SQLParser/Parser.php"
#line 74 "src/SQLParser/Parser.y"
    function yy_r25(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->setAlias($this->yystack[$this->yyidx + 0]->minor);     }
#line 1806 "src/SQLParser/Parser.php"
#line 78 "src/SQLParser/Parser.y"
    function yy_r28(){ $this->_retvalue = [];     }
#line 1809 "src/SQLParser/Parser.php"
#line 80 "src/SQLParser/Parser.y"
    function yy_r29(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor); 
    if ($this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 1817 "src/SQLParser/Parser.php"
#line 87 "src/SQLParser/Parser.y"
    function yy_r30(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 1820 "src/SQLParser/Parser.php"
#line 88 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1823 "src/SQLParser/Parser.php"
#line 89 "src/SQLParser/Parser.y"
    function yy_r32(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1826 "src/SQLParser/Parser.php"
#line 90 "src/SQLParser/Parser.y"
    function yy_r33(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 1829 "src/SQLParser/Parser.php"
#line 92 "src/SQLParser/Parser.y"
    function yy_r34(){ $this->_retvalue = 'NATURAL';     }
#line 1832 "src/SQLParser/Parser.php"
#line 93 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = '';     }
#line 1835 "src/SQLParser/Parser.php"
#line 94 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = 'OUTER';     }
#line 1838 "src/SQLParser/Parser.php"
#line 97 "src/SQLParser/Parser.y"
    function yy_r38(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 1841 "src/SQLParser/Parser.php"
#line 98 "src/SQLParser/Parser.y"
    function yy_r39(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 1844 "src/SQLParser/Parser.php"
#line 99 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 1847 "src/SQLParser/Parser.php"
#line 100 "src/SQLParser/Parser.y"
    function yy_r41(){ $this->_retvalue = NULL;     }
#line 1850 "src/SQLParser/Parser.php"
#line 108 "src/SQLParser/Parser.y"
    function yy_r46(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 1853 "src/SQLParser/Parser.php"
#line 109 "src/SQLParser/Parser.y"
    function yy_r47(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 1856 "src/SQLParser/Parser.php"
#line 111 "src/SQLParser/Parser.y"
    function yy_r48(){ $this->_retvalue = new Stmt\Expr(strtoupper(@$this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);     }
#line 1859 "src/SQLParser/Parser.php"
#line 112 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = new Stmt\Expr("DESC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 1862 "src/SQLParser/Parser.php"
#line 114 "src/SQLParser/Parser.y"
    function yy_r50(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1865 "src/SQLParser/Parser.php"
#line 119 "src/SQLParser/Parser.y"
    function yy_r54(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 1868 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 1871 "src/SQLParser/Parser.php"
#line 123 "src/SQLParser/Parser.y"
    function yy_r57(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 1874 "src/SQLParser/Parser.php"
#line 125 "src/SQLParser/Parser.y"
    function yy_r59(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->yystack[$this->yyidx + -2]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 1877 "src/SQLParser/Parser.php"
#line 126 "src/SQLParser/Parser.y"
    function yy_r60(){ 
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; 
    $keys   = new Stmt\ExprList;
    $values = new Stmt\ExprList;
    foreach ($this->yystack[$this->yyidx + 0]->minor->getTerms() as $field) {
        $member = $field->getMembers();
        $keys->addTerm($member[0]);
        $values->addTerm($member[1]);
    }
    $this->yystack[$this->yyidx + -1]->minor->values($values)->fields($keys);
    }
#line 1890 "src/SQLParser/Parser.php"
#line 138 "src/SQLParser/Parser.y"
    function yy_r61(){
    $this->_retvalue = new SQLParser\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1895 "src/SQLParser/Parser.php"
#line 142 "src/SQLParser/Parser.y"
    function yy_r62(){
    $this->_retvalue = new SQLParser\Delete($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1903 "src/SQLParser/Parser.php"
#line 149 "src/SQLParser/Parser.y"
    function yy_r63(){
    $this->_retvalue = new SQLParser\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1912 "src/SQLParser/Parser.php"
#line 157 "src/SQLParser/Parser.y"
    function yy_r64(){ 
    $this->_retvalue = new SQLParser\Insert(@$this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->table($this->yystack[$this->yyidx + 0]->minor[0])->fields($this->yystack[$this->yyidx + 0]->minor[1]);     }
#line 1917 "src/SQLParser/Parser.php"
#line 160 "src/SQLParser/Parser.y"
    function yy_r65(){ 
    $this->_retvalue = new SQLParser\Insert(@$this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->table($this->yystack[$this->yyidx + 0]->minor[0]); 
    }
#line 1923 "src/SQLParser/Parser.php"
#line 165 "src/SQLParser/Parser.y"
    function yy_r66(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, []];    }
#line 1926 "src/SQLParser/Parser.php"
#line 166 "src/SQLParser/Parser.y"
    function yy_r67(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 1929 "src/SQLParser/Parser.php"
#line 171 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1932 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r73(){ 
    }
#line 1936 "src/SQLParser/Parser.php"
#line 178 "src/SQLParser/Parser.y"
    function yy_r74(){
    $this->_retvalue = new Stmt\DataType(@$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1941 "src/SQLParser/Parser.php"
#line 182 "src/SQLParser/Parser.y"
    function yy_r75(){
    $this->_retvalue = new Stmt\DataType(@$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 1946 "src/SQLParser/Parser.php"
#line 189 "src/SQLParser/Parser.y"
    function yy_r77(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1949 "src/SQLParser/Parser.php"
#line 190 "src/SQLParser/Parser.y"
    function yy_r78(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1952 "src/SQLParser/Parser.php"
#line 191 "src/SQLParser/Parser.y"
    function yy_r79(){ $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);     }
#line 1955 "src/SQLParser/Parser.php"
#line 192 "src/SQLParser/Parser.y"
    function yy_r80(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 1958 "src/SQLParser/Parser.php"
#line 193 "src/SQLParser/Parser.y"
    function yy_r81(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 1961 "src/SQLParser/Parser.php"
#line 194 "src/SQLParser/Parser.y"
    function yy_r82(){ $this->_retvalue = new Stmt\Expr(@$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1964 "src/SQLParser/Parser.php"
#line 195 "src/SQLParser/Parser.y"
    function yy_r83(){ $this->_retvalue = new Stmt\Expr("!=", $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1967 "src/SQLParser/Parser.php"
#line 198 "src/SQLParser/Parser.y"
    function yy_r86(){ $this->_retvalue = new Stmt\Expr('in', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1970 "src/SQLParser/Parser.php"
#line 203 "src/SQLParser/Parser.y"
    function yy_r90(){ 
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 1976 "src/SQLParser/Parser.php"
#line 207 "src/SQLParser/Parser.y"
    function yy_r91(){ 
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 1982 "src/SQLParser/Parser.php"
#line 212 "src/SQLParser/Parser.y"
    function yy_r92(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1985 "src/SQLParser/Parser.php"
#line 213 "src/SQLParser/Parser.y"
    function yy_r93(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 1988 "src/SQLParser/Parser.php"
#line 215 "src/SQLParser/Parser.y"
    function yy_r94(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 1991 "src/SQLParser/Parser.php"
#line 216 "src/SQLParser/Parser.y"
    function yy_r95(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 1994 "src/SQLParser/Parser.php"
#line 217 "src/SQLParser/Parser.y"
    function yy_r96(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 1997 "src/SQLParser/Parser.php"
#line 218 "src/SQLParser/Parser.y"
    function yy_r97(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2000 "src/SQLParser/Parser.php"
#line 224 "src/SQLParser/Parser.y"
    function yy_r102(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2003 "src/SQLParser/Parser.php"
#line 226 "src/SQLParser/Parser.y"
    function yy_r103(){ $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2006 "src/SQLParser/Parser.php"
#line 232 "src/SQLParser/Parser.y"
    function yy_r107(){ $this->_retvalue = new Stmt\Expr('EMPTY', '');     }
#line 2009 "src/SQLParser/Parser.php"
#line 249 "src/SQLParser/Parser.y"
    function yy_r118(){ $this->_retvalue = new Stmt\Expr('ALIAS', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2012 "src/SQLParser/Parser.php"
#line 250 "src/SQLParser/Parser.y"
    function yy_r119(){ $this->_retvalue = new Stmt\Expr('ALIAS', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2015 "src/SQLParser/Parser.php"
#line 252 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = new Stmt\Table($this->yystack[$this->yyidx + 0]->minor);     }
#line 2018 "src/SQLParser/Parser.php"
#line 254 "src/SQLParser/Parser.y"
    function yy_r121(){ $this->_retvalue = new Stmt\ColumnName($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2021 "src/SQLParser/Parser.php"
#line 255 "src/SQLParser/Parser.y"
    function yy_r122(){ $this->_retvalue = new Stmt\ColumnName($this->yystack[$this->yyidx + 0]->minor) ;     }
#line 2024 "src/SQLParser/Parser.php"
#line 258 "src/SQLParser/Parser.y"
    function yy_r124(){ $this->_retvalue = new Stmt\Expr('VALUE', @$this->yystack[$this->yyidx + 0]->minor);     }
#line 2027 "src/SQLParser/Parser.php"
#line 259 "src/SQLParser/Parser.y"
    function yy_r125(){ $this->_retvalue = new Stmt\Expr('VALUE', stripslashes(trim($this->yystack[$this->yyidx + 0]->minor, "\r\t\n \"'")));     }
#line 2030 "src/SQLParser/Parser.php"
#line 260 "src/SQLParser/Parser.y"
    function yy_r126(){ $this->_retvalue = new Stmt\Alpha($this->yystack[$this->yyidx + 0]->minor);     }
#line 2033 "src/SQLParser/Parser.php"
#line 261 "src/SQLParser/Parser.y"
    function yy_r127(){ $this->_retvalue = new Stmt\Alpha(trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t"));     }
#line 2036 "src/SQLParser/Parser.php"
#line 264 "src/SQLParser/Parser.y"
    function yy_r129(){ $this->_retvalue = new Stmt\All;     }
#line 2039 "src/SQLParser/Parser.php"
#line 266 "src/SQLParser/Parser.y"
    function yy_r130(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2042 "src/SQLParser/Parser.php"
#line 267 "src/SQLParser/Parser.y"
    function yy_r131(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2045 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 2165 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
