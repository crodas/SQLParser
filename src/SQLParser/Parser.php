<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 11 "src/SQLParser/Parser.php"

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements \ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_OR                           =  1;
    const T_AND                          =  2;
    const T_NOT                          =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_LIKE                         =  7;
    const T_GLOB                         =  8;
    const T_NE                           =  9;
    const T_GT                           = 10;
    const T_GE                           = 11;
    const T_LT                           = 12;
    const T_LE                           = 13;
    const T_IN                           = 14;
    const T_PLUS                         = 15;
    const T_MINUS                        = 16;
    const T_CONCAT                       = 17;
    const T_TIMES                        = 18;
    const T_DIV                          = 19;
    const T_MOD                          = 20;
    const T_PIPE                         = 21;
    const T_BITWISE                      = 22;
    const T_FILTER_PIPE                  = 23;
    const T_SEMICOLON                    = 24;
    const T_PAR_OPEN                     = 25;
    const T_PAR_CLOSE                    = 26;
    const T_BEGIN                        = 27;
    const T_SAVEPOINT                    = 28;
    const T_RELEASE                      = 29;
    const T_ROLLBACK                     = 30;
    const T_TO                           = 31;
    const T_TRANSACTION                  = 32;
    const T_WORK                         = 33;
    const T_COMMIT                       = 34;
    const T_END                          = 35;
    const T_ALTER                        = 36;
    const T_TABLE                        = 37;
    const T_DROP                         = 38;
    const T_PRIMARY                      = 39;
    const T_KEY                          = 40;
    const T_INDEX                        = 41;
    const T_SET                          = 42;
    const T_DEFAULT                      = 43;
    const T_MODIFY                       = 44;
    const T_ADD                          = 45;
    const T_RENAME                       = 46;
    const T_CREATE                       = 47;
    const T_ON                           = 48;
    const T_UNIQUE                       = 49;
    const T_AS                           = 50;
    const T_CHANGE                       = 51;
    const T_COLUMN                       = 52;
    const T_FIRST                        = 53;
    const T_AFTER                        = 54;
    const T_SELECT                       = 55;
    const T_ALL                          = 56;
    const T_DISTINCT                     = 57;
    const DISTINCTROW                    = 58;
    const HIGH_PRIORITY                  = 59;
    const STRAIGHT_JOIN                  = 60;
    const SQL_SMALL_RESULT               = 61;
    const SQL_BIG_RESULT                 = 62;
    const SQL_CACHE                      = 63;
    const SQL_CALC_FOUND_ROWS            = 64;
    const SQL_BUFFER_RESULT              = 65;
    const SQL_NO_CACHE                   = 66;
    const T_FROM                         = 67;
    const T_COMMA                        = 68;
    const T_JOIN                         = 69;
    const T_INNER                        = 70;
    const T_LEFT                         = 71;
    const T_RT_IGHT                      = 72;
    const T_NATURAL                      = 73;
    const T_OUTER                        = 74;
    const T_USING                        = 75;
    const T_WHERE                        = 76;
    const T_ORDER                        = 77;
    const T_BY                           = 78;
    const T_DESC                         = 79;
    const T_ASC                          = 80;
    const T_LIMIT                        = 81;
    const T_OFFSET                       = 82;
    const T_GROUP                        = 83;
    const T_HAVING                       = 84;
    const T_VALUES                       = 85;
    const T_DELETE                       = 86;
    const T_UPDATE                       = 87;
    const T_INSERT                       = 88;
    const REPLACE                        = 89;
    const T_INTO                         = 90;
    const T_DUPLICATE                    = 91;
    const T_VIEW                         = 92;
    const T_NUMBER                       = 93;
    const T_UNSIGNED                     = 94;
    const T_COLLATE                      = 95;
    const T_NULL                         = 96;
    const T_AUTO_INCREMENT               = 97;
    const T_IS                           = 98;
    const T_BETWEEN                      = 99;
    const T_BINARY                       = 100;
    const T_CASE                         = 101;
    const T_ELSE                         = 102;
    const T_WHEN                         = 103;
    const T_THEN                         = 104;
    const T_INTERVAL                     = 105;
    const ALPHA                          = 106;
    const T_STRING1                      = 107;
    const T_STRING2                      = 108;
    const T_DOT                          = 109;
    const INTERVAL                       = 110;
    const COLUMN                         = 111;
    const T_DOLLAR                       = 112;
    const PRIMARY                        = 113;
    const YY_NO_ACTION = 613;
    const YY_ACCEPT_ACTION = 612;
    const YY_ERROR_ACTION = 611;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 2181;
static public $yy_action = array(
 /*     0 */    34,  254,  120,  347,  216,  110,  121,  123,  152,  330,
 /*    10 */    31,  109,   40,  221,  366,  255,  463,  463,  463,  463,
 /*    20 */   336,   35,    9,   36,   23,   21,  131,  200,  342,   28,
 /*    30 */   211,  361,   28,   28,   28,   28,   28,  348,   25,   25,
 /*    40 */   302,   25,   25,   25,  216,   20,  121,  123,  111,  330,
 /*    50 */    25,   25,   25,  325,  325,  325,  325,  325,  325,  325,
 /*    60 */   325,  325,  325,  325,  281,  113,  302,  168,  342,   55,
 /*    70 */   373,  261,  262,  125,  612,  210,  389,  277,  276,  273,
 /*    80 */   265,  272,  271,  270,  269,  267,  266,  283,  274,  170,
 /*    90 */   388,  139,  301,  304,  298,  246,  343,  223,  150,  178,
 /*   100 */    74,   74,   33,  118,  382,  379,  126,  300,  286,  120,
 /*   110 */   187,  261,  262,   34,  254,  120,  149,   58,  301,  181,
 /*   120 */   298,  137,   17,  327,  108,   40,  221,  323,  255,  296,
 /*   130 */   137,   17,  189,  300,  286,    9,   28,  211,  361,   28,
 /*   140 */    28,   28,   28,   28,  348,   25,   25,  380,   25,   25,
 /*   150 */    25,  211,  361,  302,  433,  433,  215,  329,  322,  216,
 /*   160 */   387,  377,  236,  365,  377,  175,  244,   23,   21,  131,
 /*   170 */   313,   65,   28,  211,  361,   28,   28,   28,   28,   28,
 /*   180 */   348,   25,   25,  173,   25,   25,   25,  180,  240,  215,
 /*   190 */   205,  373,  343,  223,  377,  178,   61,  370,  185,  293,
 /*   200 */   207,  353,  383,  388,  167,  301,  304,  298,  216,  304,
 /*   210 */   151,  150,  386,  258,   70,   33,  118,  382,  379,  384,
 /*   220 */   300,  286,  120,  261,  262,   59,  261,  262,  137,   17,
 /*   230 */   370,  190,  245,  122,   13,  349,  216,  363,   34,  254,
 /*   240 */   120,  186,  318,   19,  359,  386,  295,  295,   14,  357,
 /*   250 */    40,  221,  384,  255,  117,  326,  261,  262,  346,  346,
 /*   260 */     9,  372,   42,   11,  137,   17,  117,  191,  374,  147,
 /*   270 */   302,   39,  264,  376,   56,  261,  262,  127,  302,  126,
 /*   280 */    23,   21,  131,   48,  175,   28,  211,  361,   28,   28,
 /*   290 */    28,   28,   28,  348,   25,   25,  175,   25,   25,   25,
 /*   300 */    23,   21,  131,  261,  262,   28,  211,  361,   28,   28,
 /*   310 */    28,   28,   28,  348,   25,   25,  216,   25,   25,   25,
 /*   320 */   176,  377,  301,   38,  298,  368,  119,  251,  388,   66,
 /*   330 */   301,  304,  298,  296,  216,  337,  150,  300,  286,  377,
 /*   340 */    33,  118,  382,  379,  239,  300,  286,  120,   68,   34,
 /*   350 */   254,  120,   36,   71,   71,  203,  293,  207,  314,  314,
 /*   360 */   365,   40,  221,  239,  255,  232,    1,  216,  319,  121,
 /*   370 */   123,    9,  330,  133,  290,  207,  231,  137,   17,   57,
 /*   380 */   116,  134,  215,  261,  262,  132,  164,  377,   76,  302,
 /*   390 */   201,  342,   31,  109,   41,  158,  366,  137,   17,   48,
 /*   400 */   106,  261,  262,   67,  217,  351,  329,   23,   21,  131,
 /*   410 */    54,  155,   28,  211,  361,   28,   28,   28,   28,   28,
 /*   420 */   348,   25,   25,  370,   25,   25,   25,  333,  243,  228,
 /*   430 */   336,  302,  334,  355,  261,  262,  226,  169,  386,  388,
 /*   440 */   212,  301,  304,  298,  219,  384,  165,  150,   77,  261,
 /*   450 */   262,   33,  118,  382,  379,   46,  300,  286,  120,   23,
 /*   460 */    21,  131,  140,   75,   28,  211,  361,   28,   28,   28,
 /*   470 */    28,   28,  348,   25,   25,  156,   25,   25,   25,  331,
 /*   480 */   171,  166,  369,  301,   60,  298,  297,  216,    7,  128,
 /*   490 */   115,  216,  330,  354,  296,   12,  233,  230,  300,  286,
 /*   500 */    29,   37,    2,   30,  137,   17,   23,   21,  131,  358,
 /*   510 */    16,   28,  211,  361,   28,   28,   28,   28,   28,  348,
 /*   520 */    25,   25,  362,   25,   25,   25,    3,   23,   21,  131,
 /*   530 */   310,  309,   28,  211,  361,   28,   28,   28,   28,   28,
 /*   540 */   348,   25,   25,   20,   25,   25,   25,   51,   34,  254,
 /*   550 */   120,  213,   72,   72,  261,  262,  137,   17,  261,  262,
 /*   560 */    40,  221,  329,  255,  244,   45,  216,  130,  295,  295,
 /*   570 */     5,  163,   23,   21,  131,   15,  194,   28,  211,  361,
 /*   580 */    28,   28,   28,   28,   28,  348,   25,   25,  302,   25,
 /*   590 */    25,   25,  179,  216,   22,  198,  216,  126,  154,  206,
 /*   600 */   216,  377,  153,  137,   17,  114,  279,   44,  237,  260,
 /*   610 */    47,  280,  277,  276,  273,  265,  272,  271,  270,  269,
 /*   620 */   267,  266,  283,  274,  137,   17,  139,   50,  172,   62,
 /*   630 */    32,  328,  360,  261,  262,  256,  324,  157,  388,  284,
 /*   640 */   301,  304,  298,  183,  371,  174,  150,  356,  332,   49,
 /*   650 */    33,  118,  382,  379,  367,  300,  286,  120,  378,  108,
 /*   660 */   261,  262,  304,  261,  262,  289,   27,  261,  262,  137,
 /*   670 */    17,   23,   18,  131,  177,  238,   28,  211,  361,   28,
 /*   680 */    28,   28,   28,   28,  348,   25,   25,   10,   25,   25,
 /*   690 */    25,   23,   24,  131,  294,  195,   28,  211,  361,   28,
 /*   700 */    28,   28,   28,   28,  348,   25,   25,  312,   25,   25,
 /*   710 */    25,  535,  535,  131,  352,  345,   28,  211,  361,   28,
 /*   720 */    28,   28,   28,   28,  348,   25,   25,    6,   25,   25,
 /*   730 */    25,   21,  131,    8,  253,   28,  211,  361,   28,   28,
 /*   740 */    28,   28,   28,  348,   25,   25,  339,   25,   25,   25,
 /*   750 */   242,  335,  254,  120,  338,   64,  305,  263,   73,  340,
 /*   760 */   291,  303,  288,   40,  221,  320,  255,  131,  137,   17,
 /*   770 */    28,  211,  361,   28,   28,   28,   28,   28,  348,   25,
 /*   780 */    25,  381,   25,   25,   25,  254,  120,  353,  137,   17,
 /*   790 */   292,  302,  249,  161,  196,   26,  175,  141,  275,  255,
 /*   800 */    63,  241,  216,  244,  121,  123,  162,  330,  137,   17,
 /*   810 */   375,  247,  299,  216,  205,  121,  123,  268,  330,  208,
 /*   820 */   204,   69,  364,  225,  302,  317,  341,  137,   17,  424,
 /*   830 */   193,  424,  254,  120,  216,  424,  424,  145,  424,  377,
 /*   840 */   424,  388,  216,  301,  304,  298,  255,  114,  424,  424,
 /*   850 */   234,  424,  424,   33,  118,  382,  379,  424,  300,  286,
 /*   860 */   120,  424,  137,   17,  424,  424,  424,  204,   69,  261,
 /*   870 */   262,  302,  424,  424,  215,  157,  301,  193,  298,  377,
 /*   880 */   261,  262,  321,  424,  182,  424,  424,  296,  259,  257,
 /*   890 */   424,  300,  286,  120,    4,  424,  142,  129,  214,  135,
 /*   900 */   424,  261,  262,  287,  285,  224,  215,  202,  373,  261,
 /*   910 */   262,  377,  424,   61,  424,  370,  136,  424,  424,  424,
 /*   920 */   350,  143,  424,  301,  175,  298,  424,  424,  316,  424,
 /*   930 */   386,  424,  424,  424,  296,  259,  257,  384,  300,  286,
 /*   940 */   120,  261,  262,  424,  424,  424,  424,  370,  424,  424,
 /*   950 */   424,  424,  349,  424,  424,  199,   43,   52,   52,  424,
 /*   960 */   216,  359,  386,  188,  424,  330,  357,  424,  424,  384,
 /*   970 */   424,  424,  308,  261,  262,  215,  424,  373,  424,  424,
 /*   980 */   377,  424,   89,  424,  424,  227,  277,  276,  273,  265,
 /*   990 */   272,  271,  270,  269,  267,  266,  283,  274,  282,  424,
 /*  1000 */   139,  228,  424,  424,  424,  424,  424,  424,  220,  424,
 /*  1010 */   215,  424,  229,  424,  216,  377,  370,   82,  424,  114,
 /*  1020 */   424,  349,  146,  424,  424,  424,  424,  261,  262,  424,
 /*  1030 */   359,  386,  424,  108,  344,  357,  228,  424,  384,  215,
 /*  1040 */   222,  424,  261,  262,  377,  215,  424,  229,  216,  424,
 /*  1050 */   377,  370,   89,  306,  424,  424,  349,  424,  424,  424,
 /*  1060 */   424,  424,  424,  424,  424,  359,  386,  424,  424,  424,
 /*  1070 */   357,  216,  424,  384,  188,  184,  330,  261,  262,  424,
 /*  1080 */   370,  261,  262,  424,  424,  385,  370,  215,  424,  373,
 /*  1090 */   424,  349,  377,  424,   79,  386,  424,  424,  424,  424,
 /*  1100 */   359,  386,  384,  424,  424,  357,  261,  262,  384,  278,
 /*  1110 */   184,  228,  261,  262,  424,  261,  262,  424,  218,  311,
 /*  1120 */   215,  424,  229,  254,  120,  377,  424,   84,  370,  424,
 /*  1130 */   302,  424,  424,  349,  112,  424,  424,  255,  261,  262,
 /*  1140 */   424,  424,  359,  386,  424,  424,  424,  357,  424,  424,
 /*  1150 */   384,  424,  302,  424,  261,  262,  424,  424,  424,  424,
 /*  1160 */   424,  370,  302,  424,  424,  424,  349,  424,  424,  424,
 /*  1170 */   424,  424,  424,  424,  424,  359,  386,  424,  424,  424,
 /*  1180 */   357,  424,  301,  384,  298,  216,  424,  261,  262,  424,
 /*  1190 */   192,  424,  424,  296,  424,  424,  424,  300,  286,  255,
 /*  1200 */   424,  424,  424,  216,  301,  215,  298,  373,  114,   53,
 /*  1210 */   377,  144,   79,  424,  301,  296,  298,  216,  424,  300,
 /*  1220 */   286,  424,  235,  424,  302,  296,  259,  257,  424,  300,
 /*  1230 */   286,  120,  424,  215,  424,  373,  424,  315,  377,  216,
 /*  1240 */    89,  424,  254,  120,  114,  424,  370,  138,  424,  424,
 /*  1250 */   302,  349,  261,  262,  424,  424,  255,  124,  424,  424,
 /*  1260 */   359,  386,  424,  117,  424,  357,  254,  120,  384,  424,
 /*  1270 */   261,  262,  261,  262,  370,  424,  301,  424,  298,  349,
 /*  1280 */   255,  302,  424,  424,  261,  262,  424,  296,  359,  386,
 /*  1290 */   424,  300,  286,  357,  424,  424,  384,  424,  184,  424,
 /*  1300 */   261,  262,  301,  424,  298,  302,  261,  262,  424,  424,
 /*  1310 */   424,  424,  424,  296,  216,  424,  424,  300,  286,  148,
 /*  1320 */   215,  424,  373,  424,  424,  377,  424,  107,  424,  424,
 /*  1330 */   424,  424,  424,  301,  424,  298,  424,  424,  424,  424,
 /*  1340 */   424,  424,  424,  424,  296,  259,  257,  424,  300,  286,
 /*  1350 */   120,  424,  424,  424,  424,  424,  424,  301,  215,  298,
 /*  1360 */   373,  370,  424,  377,  424,   78,  349,  424,  296,  259,
 /*  1370 */   257,  424,  300,  286,  120,  359,  386,  424,  424,  216,
 /*  1380 */   357,  261,  262,  384,  209,  424,  424,  261,  262,  424,
 /*  1390 */   424,  424,  424,  424,  424,  215,  424,  373,  216,  370,
 /*  1400 */   377,  424,   93,  197,  349,  216,  424,  121,  123,  424,
 /*  1410 */   330,  216,  424,  359,  386,  424,  160,  424,  357,  424,
 /*  1420 */   424,  384,  424,  424,  424,  261,  262,  424,  215,  159,
 /*  1430 */   373,  424,  216,  377,  216,   92,  370,  307,  424,  248,
 /*  1440 */   424,  349,  424,  424,  424,  424,  261,  262,  424,  424,
 /*  1450 */   359,  386,  215,  424,  373,  357,  424,  377,  384,  101,
 /*  1460 */   424,  424,  261,  262,  424,  261,  262,  424,  424,  370,
 /*  1470 */   424,  424,  261,  262,  349,  424,  424,  424,  261,  262,
 /*  1480 */   215,  424,  373,  359,  386,  377,  424,   96,  357,  424,
 /*  1490 */   424,  384,  424,  370,  424,  261,  262,  424,  349,  261,
 /*  1500 */   262,  261,  262,  424,  215,  424,  373,  359,  386,  377,
 /*  1510 */   424,  104,  357,  424,  424,  384,  424,  424,  424,  261,
 /*  1520 */   262,  370,  424,  424,  424,  424,  349,  215,  424,  373,
 /*  1530 */   424,  424,  377,  424,   86,  359,  386,  424,  424,  424,
 /*  1540 */   357,  424,  424,  384,  424,  370,  424,  261,  262,  424,
 /*  1550 */   349,  424,  424,  424,  424,  424,  424,  424,  424,  359,
 /*  1560 */   386,  424,  424,  424,  357,  424,  424,  384,  370,  424,
 /*  1570 */   424,  261,  262,  349,  424,  424,  424,  424,  424,  424,
 /*  1580 */   424,  424,  359,  386,  215,  424,  373,  357,  424,  377,
 /*  1590 */   384,   95,  424,  424,  261,  262,  424,  424,  424,  424,
 /*  1600 */   424,  424,  424,  424,  424,  424,  424,  424,  250,  424,
 /*  1610 */   424,  250,  215,  424,  373,  424,  424,  377,  424,  102,
 /*  1620 */   424,  424,  424,  250,  424,  370,  424,  424,  424,  424,
 /*  1630 */   349,  424,  424,  424,  424,  250,  215,  424,  373,  359,
 /*  1640 */   386,  377,  424,   94,  357,  424,  424,  384,  424,  250,
 /*  1650 */   250,  261,  262,  370,  424,  250,  250,  424,  349,  215,
 /*  1660 */   424,  373,  424,  250,  377,  250,   99,  359,  386,  424,
 /*  1670 */   424,  424,  357,  424,  252,  384,  424,  370,  424,  261,
 /*  1680 */   262,  250,  349,  424,  424,  424,  424,  424,  424,  424,
 /*  1690 */   424,  359,  386,  424,  424,  424,  357,  424,  424,  384,
 /*  1700 */   370,  424,  424,  261,  262,  349,  424,  424,  424,  424,
 /*  1710 */   424,  424,  424,  424,  359,  386,  215,  424,  373,  357,
 /*  1720 */   424,  377,  384,  100,  424,  424,  261,  262,  424,  424,
 /*  1730 */   424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  1740 */   424,  424,  424,  424,  215,  424,  373,  424,  424,  377,
 /*  1750 */   424,   97,  424,  424,  424,  424,  424,  370,  424,  424,
 /*  1760 */   424,  424,  349,  424,  424,  424,  424,  424,  215,  424,
 /*  1770 */   373,  359,  386,  377,  424,   88,  357,  424,  424,  384,
 /*  1780 */   424,  424,  424,  261,  262,  370,  424,  424,  424,  424,
 /*  1790 */   349,  215,  424,  373,  424,  424,  377,  424,   85,  359,
 /*  1800 */   386,  424,  424,  424,  357,  424,  424,  384,  424,  370,
 /*  1810 */   424,  261,  262,  424,  349,  424,  424,  424,  424,  424,
 /*  1820 */   424,  424,  424,  359,  386,  424,  424,  424,  357,  424,
 /*  1830 */   424,  384,  370,  424,  424,  261,  262,  349,  424,  424,
 /*  1840 */   424,  424,  424,  424,  424,  424,  359,  386,  215,  424,
 /*  1850 */   373,  357,  424,  377,  384,   87,  424,  424,  261,  262,
 /*  1860 */   424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  1870 */   424,  424,  424,  424,  424,  424,  215,  424,  373,  424,
 /*  1880 */   424,  377,  424,   81,  424,  424,  424,  424,  424,  370,
 /*  1890 */   424,  424,  424,  424,  349,  424,  424,  424,  424,  424,
 /*  1900 */   215,  424,  373,  359,  386,  377,  424,  105,  357,  424,
 /*  1910 */   424,  384,  424,  424,  424,  261,  262,  370,  424,  424,
 /*  1920 */   424,  424,  349,  215,  424,  373,  424,  424,  377,  424,
 /*  1930 */    98,  359,  386,  424,  424,  424,  357,  424,  424,  384,
 /*  1940 */   424,  370,  424,  261,  262,  424,  349,  424,  424,  424,
 /*  1950 */   424,  424,  424,  424,  424,  359,  386,  424,  424,  424,
 /*  1960 */   357,  424,  424,  384,  370,  424,  424,  261,  262,  349,
 /*  1970 */   424,  424,  424,  424,  424,  424,  424,  424,  359,  386,
 /*  1980 */   215,  424,  373,  357,  424,  377,  384,   90,  424,  424,
 /*  1990 */   261,  262,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  2000 */   424,  424,  424,  424,  424,  424,  424,  424,  215,  424,
 /*  2010 */   373,  424,  424,  377,  424,  103,  424,  424,  424,  424,
 /*  2020 */   424,  370,  424,  424,  424,  424,  349,  424,  424,  424,
 /*  2030 */   424,  424,  215,  424,  373,  359,  386,  377,  424,   91,
 /*  2040 */   357,  424,  424,  384,  424,  424,  424,  261,  262,  370,
 /*  2050 */   424,  424,  424,  424,  349,  215,  424,  373,  424,  424,
 /*  2060 */   377,  424,   83,  359,  386,  424,  424,  424,  357,  424,
 /*  2070 */   424,  384,  424,  370,  424,  261,  262,  424,  349,  424,
 /*  2080 */   424,  424,  424,  424,  424,  424,  424,  359,  386,  424,
 /*  2090 */   424,  424,  357,  424,  424,  384,  370,  424,  424,  261,
 /*  2100 */   262,  349,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  2110 */   359,  386,  215,  424,  373,  357,  424,  377,  384,   80,
 /*  2120 */   424,  424,  261,  262,  424,  424,  424,  424,  424,  424,
 /*  2130 */   424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  2140 */   424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
 /*  2150 */   424,  424,  424,  370,  424,  424,  424,  424,  349,  424,
 /*  2160 */   424,  424,  424,  424,  424,  424,  424,  359,  386,  424,
 /*  2170 */   424,  424,  357,  424,  424,  384,  424,  424,  424,  261,
 /*  2180 */   262,
    );
    static public $yy_lookahead = array(
 /*     0 */     3,    4,    5,   26,  131,  109,  133,  134,   26,  136,
 /*    10 */   188,  189,   15,   16,  192,   18,   69,   70,   71,   72,
 /*    20 */    73,   48,   25,   76,    1,    2,    3,  154,  155,    6,
 /*    30 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*    40 */    43,   18,   19,   20,  131,   68,  133,  134,   75,  136,
 /*    50 */    18,   19,   20,   56,   57,   58,   59,   60,   61,   62,
 /*    60 */    63,   64,   65,   66,   26,   25,   43,  154,  155,   68,
 /*    70 */   133,  198,  199,   50,  115,  116,  117,  118,  119,  120,
 /*    80 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  149,
 /*    90 */    93,  132,   95,   96,   97,  131,  156,  157,  101,  159,
 /*   100 */    40,   41,  105,  106,  107,  108,   68,  110,  111,  112,
 /*   110 */    93,  198,  199,    3,    4,    5,    3,  141,   95,  143,
 /*   120 */    97,   98,   99,  186,  165,   15,   16,  190,   18,  106,
 /*   130 */    98,   99,   25,  110,  111,   25,    6,    7,    8,    9,
 /*   140 */    10,   11,   12,   13,   14,   15,   16,   96,   18,   19,
 /*   150 */    20,    7,    8,   43,   40,   41,  131,  131,   14,  131,
 /*   160 */    40,  136,  198,   49,  136,   55,   52,    1,    2,    3,
 /*   170 */    53,   54,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   180 */    14,   15,   16,   26,   18,   19,   20,  161,  131,  131,
 /*   190 */    48,  133,  156,  157,  136,  159,  138,  172,  170,  171,
 /*   200 */   172,   94,  177,   93,  168,   95,   96,   97,  131,   96,
 /*   210 */    68,  101,  187,  136,   31,  105,  106,  107,  108,  194,
 /*   220 */   110,  111,  112,  198,  199,   68,  198,  199,   98,   99,
 /*   230 */   172,    3,  175,  176,   68,  177,  131,   26,    3,    4,
 /*   240 */     5,  136,   98,   99,  186,  187,   32,   33,   82,  191,
 /*   250 */    15,   16,  194,   18,   25,  197,  198,  199,   79,   80,
 /*   260 */    25,   26,   67,   68,   98,   99,   25,   39,  190,  131,
 /*   270 */    43,   43,  135,  195,  137,  198,  199,   50,   43,   68,
 /*   280 */     1,    2,    3,   42,   55,    6,    7,    8,    9,   10,
 /*   290 */    11,   12,   13,   14,   15,   16,   55,   18,   19,   20,
 /*   300 */     1,    2,    3,  198,  199,    6,    7,    8,    9,   10,
 /*   310 */    11,   12,   13,   14,   15,   16,  131,   18,   19,   20,
 /*   320 */   182,  136,   95,   95,   97,   97,   85,   26,   93,   48,
 /*   330 */    95,   96,   97,  106,  131,  131,  101,  110,  111,  136,
 /*   340 */   105,  106,  107,  108,   31,  110,  111,  112,   37,    3,
 /*   350 */     4,    5,   76,   40,   41,  170,  171,  172,   79,   80,
 /*   360 */    49,   15,   16,   50,   18,  122,  145,  131,   26,  133,
 /*   370 */   134,   25,  136,   38,  171,  172,  133,   98,   99,   44,
 /*   380 */    45,   46,  131,  198,  199,  183,   51,  136,  148,   43,
 /*   390 */   154,  155,  188,  189,    6,  151,  192,   98,   99,   42,
 /*   400 */   174,  198,  199,   92,   77,  106,  131,    1,    2,    3,
 /*   410 */    68,  168,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   420 */    14,   15,   16,  172,   18,   19,   20,  160,  177,  122,
 /*   430 */    73,   43,   74,   35,  198,  199,  161,  150,  187,   93,
 /*   440 */   133,   95,   96,   97,   83,  194,  151,  101,  148,  198,
 /*   450 */   199,  105,  106,  107,  108,   68,  110,  111,  112,    1,
 /*   460 */     2,    3,  166,   40,    6,    7,    8,    9,   10,   11,
 /*   470 */    12,   13,   14,   15,   16,   50,   18,   19,   20,   70,
 /*   480 */    71,   72,   26,   95,   37,   97,  190,  131,   78,   28,
 /*   490 */   134,  131,  136,   35,  106,   68,  136,   40,  110,  111,
 /*   500 */   102,  103,   78,   84,   98,   99,    1,    2,    3,   93,
 /*   510 */   104,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   520 */    15,   16,  100,   18,   19,   20,   24,    1,    2,    3,
 /*   530 */    43,   26,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   540 */    14,   15,   16,   68,   18,   19,   20,   25,    3,    4,
 /*   550 */     5,   39,   40,   41,  198,  199,   98,   99,  198,  199,
 /*   560 */    15,   16,  131,   18,   52,   69,  131,   31,   32,   33,
 /*   570 */    25,  136,    1,    2,    3,    6,   93,    6,    7,    8,
 /*   580 */     9,   10,   11,   12,   13,   14,   15,   16,   43,   18,
 /*   590 */    19,   20,  161,  131,   43,   40,  131,   68,  136,   91,
 /*   600 */   131,  136,   40,   98,   99,  136,   26,   37,  139,   26,
 /*   610 */    67,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*   620 */   126,  127,  128,  129,   98,   99,  132,   87,  149,   41,
 /*   630 */   104,  160,  140,  198,  199,  167,  181,  172,   93,  130,
 /*   640 */    95,   96,   97,  178,  179,  147,  101,  140,  158,   25,
 /*   650 */   105,  106,  107,  108,  184,  110,  111,  112,  144,  165,
 /*   660 */   198,  199,   96,  198,  199,  187,  103,  198,  199,   98,
 /*   670 */    99,    1,    2,    3,  193,  187,    6,    7,    8,    9,
 /*   680 */    10,   11,   12,   13,   14,   15,   16,   25,   18,   19,
 /*   690 */    20,    1,    2,    3,  190,  143,    6,    7,    8,    9,
 /*   700 */    10,   11,   12,   13,   14,   15,   16,  140,   18,   19,
 /*   710 */    20,    1,    2,    3,  184,  131,    6,    7,    8,    9,
 /*   720 */    10,   11,   12,   13,   14,   15,   16,   25,   18,   19,
 /*   730 */    20,    2,    3,   25,  200,    6,    7,    8,    9,   10,
 /*   740 */    11,   12,   13,   14,   15,   16,  131,   18,   19,   20,
 /*   750 */   131,  131,    4,    5,  131,  141,  131,  130,  142,  131,
 /*   760 */   131,  131,  131,   15,   16,  192,   18,    3,   98,   99,
 /*   770 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   780 */    16,  185,   18,   19,   20,    4,    5,   94,   98,   99,
 /*   790 */   130,   43,  144,  149,   25,   81,   55,  180,  152,   18,
 /*   800 */   141,  152,  131,   52,  133,  134,  151,  136,   98,   99,
 /*   810 */   144,  122,  167,  131,   48,  133,  134,  152,  136,   38,
 /*   820 */    39,   40,  144,   42,   43,  144,  155,   98,   99,  201,
 /*   830 */    49,  201,    4,    5,  131,  201,  201,  155,  201,  136,
 /*   840 */   201,   93,  131,   95,   96,   97,   18,  136,  201,  201,
 /*   850 */   139,  201,  201,  105,  106,  107,  108,  201,  110,  111,
 /*   860 */   112,  201,   98,   99,  201,  201,  201,   39,   40,  198,
 /*   870 */   199,   43,  201,  201,  131,  172,   95,   49,   97,  136,
 /*   880 */   198,  199,  179,  201,  173,  201,  201,  106,  107,  108,
 /*   890 */   201,  110,  111,  112,   25,  201,   27,   28,   29,   30,
 /*   900 */   201,  198,  199,   34,   35,   36,  131,   38,  133,  198,
 /*   910 */   199,  136,  201,  138,  201,  172,   47,  201,  201,  201,
 /*   920 */   177,  146,  201,   95,   55,   97,  201,  201,  153,  201,
 /*   930 */   187,  201,  201,  201,  106,  107,  108,  194,  110,  111,
 /*   940 */   112,  198,  199,  201,  201,  201,  201,  172,  201,  201,
 /*   950 */   201,  201,  177,  201,  201,   86,   87,   88,   89,  201,
 /*   960 */   131,  186,  187,  134,  201,  136,  191,  201,  201,  194,
 /*   970 */   201,  201,  197,  198,  199,  131,  201,  133,  201,  201,
 /*   980 */   136,  201,  138,  201,  201,  117,  118,  119,  120,  121,
 /*   990 */   122,  123,  124,  125,  126,  127,  128,  129,  169,  201,
 /*  1000 */   132,  122,  201,  201,  201,  201,  201,  201,  164,  201,
 /*  1010 */   131,  201,  133,  201,  131,  136,  172,  138,  201,  136,
 /*  1020 */   201,  177,  139,  201,  201,  201,  201,  198,  199,  201,
 /*  1030 */   186,  187,  201,  165,  190,  191,  122,  201,  194,  131,
 /*  1040 */   196,  201,  198,  199,  136,  131,  201,  133,  131,  201,
 /*  1050 */   136,  172,  138,  136,  201,  201,  177,  201,  201,  201,
 /*  1060 */   201,  201,  201,  201,  201,  186,  187,  201,  201,  201,
 /*  1070 */   191,  131,  201,  194,  134,  196,  136,  198,  199,  201,
 /*  1080 */   172,  198,  199,  201,  201,  177,  172,  131,  201,  133,
 /*  1090 */   201,  177,  136,  201,  138,  187,  201,  201,  201,  201,
 /*  1100 */   186,  187,  194,  201,  201,  191,  198,  199,  194,  169,
 /*  1110 */   196,  122,  198,  199,  201,  198,  199,  201,  162,  163,
 /*  1120 */   131,  201,  133,    4,    5,  136,  201,  138,  172,  201,
 /*  1130 */    43,  201,  201,  177,   25,  201,  201,   18,  198,  199,
 /*  1140 */   201,  201,  186,  187,  201,  201,  201,  191,  201,  201,
 /*  1150 */   194,  201,   43,  201,  198,  199,  201,  201,  201,  201,
 /*  1160 */   201,  172,   43,  201,  201,  201,  177,  201,  201,  201,
 /*  1170 */   201,  201,  201,  201,  201,  186,  187,  201,  201,  201,
 /*  1180 */   191,  201,   95,  194,   97,  131,  201,  198,  199,  201,
 /*  1190 */   136,  201,  201,  106,  201,  201,  201,  110,  111,   18,
 /*  1200 */   201,  201,  201,  131,   95,  131,   97,  133,  136,   90,
 /*  1210 */   136,  139,  138,  201,   95,  106,   97,  131,  201,  110,
 /*  1220 */   111,  201,  136,  201,   43,  106,  107,  108,  201,  110,
 /*  1230 */   111,  112,  201,  131,  201,  133,  201,  163,  136,  131,
 /*  1240 */   138,  201,    4,    5,  136,  201,  172,  139,  201,  201,
 /*  1250 */    43,  177,  198,  199,  201,  201,   18,   50,  201,  201,
 /*  1260 */   186,  187,  201,   25,  201,  191,    4,    5,  194,  201,
 /*  1270 */   198,  199,  198,  199,  172,  201,   95,  201,   97,  177,
 /*  1280 */    18,   43,  201,  201,  198,  199,  201,  106,  186,  187,
 /*  1290 */   201,  110,  111,  191,  201,  201,  194,  201,  196,  201,
 /*  1300 */   198,  199,   95,  201,   97,   43,  198,  199,  201,  201,
 /*  1310 */   201,  201,  201,  106,  131,  201,  201,  110,  111,  136,
 /*  1320 */   131,  201,  133,  201,  201,  136,  201,  138,  201,  201,
 /*  1330 */   201,  201,  201,   95,  201,   97,  201,  201,  201,  201,
 /*  1340 */   201,  201,  201,  201,  106,  107,  108,  201,  110,  111,
 /*  1350 */   112,  201,  201,  201,  201,  201,  201,   95,  131,   97,
 /*  1360 */   133,  172,  201,  136,  201,  138,  177,  201,  106,  107,
 /*  1370 */   108,  201,  110,  111,  112,  186,  187,  201,  201,  131,
 /*  1380 */   191,  198,  199,  194,  136,  201,  201,  198,  199,  201,
 /*  1390 */   201,  201,  201,  201,  201,  131,  201,  133,  131,  172,
 /*  1400 */   136,  201,  138,  136,  177,  131,  201,  133,  134,  201,
 /*  1410 */   136,  131,  201,  186,  187,  201,  136,  201,  191,  201,
 /*  1420 */   201,  194,  201,  201,  201,  198,  199,  201,  131,  155,
 /*  1430 */   133,  201,  131,  136,  131,  138,  172,  136,  201,  136,
 /*  1440 */   201,  177,  201,  201,  201,  201,  198,  199,  201,  201,
 /*  1450 */   186,  187,  131,  201,  133,  191,  201,  136,  194,  138,
 /*  1460 */   201,  201,  198,  199,  201,  198,  199,  201,  201,  172,
 /*  1470 */   201,  201,  198,  199,  177,  201,  201,  201,  198,  199,
 /*  1480 */   131,  201,  133,  186,  187,  136,  201,  138,  191,  201,
 /*  1490 */   201,  194,  201,  172,  201,  198,  199,  201,  177,  198,
 /*  1500 */   199,  198,  199,  201,  131,  201,  133,  186,  187,  136,
 /*  1510 */   201,  138,  191,  201,  201,  194,  201,  201,  201,  198,
 /*  1520 */   199,  172,  201,  201,  201,  201,  177,  131,  201,  133,
 /*  1530 */   201,  201,  136,  201,  138,  186,  187,  201,  201,  201,
 /*  1540 */   191,  201,  201,  194,  201,  172,  201,  198,  199,  201,
 /*  1550 */   177,  201,  201,  201,  201,  201,  201,  201,  201,  186,
 /*  1560 */   187,  201,  201,  201,  191,  201,  201,  194,  172,  201,
 /*  1570 */   201,  198,  199,  177,  201,  201,  201,  201,  201,  201,
 /*  1580 */   201,  201,  186,  187,  131,  201,  133,  191,  201,  136,
 /*  1590 */   194,  138,  201,  201,  198,  199,  201,  201,  201,  201,
 /*  1600 */   201,  201,  201,  201,  201,  201,  201,  201,   40,  201,
 /*  1610 */   201,   43,  131,  201,  133,  201,  201,  136,  201,  138,
 /*  1620 */   201,  201,  201,   55,  201,  172,  201,  201,  201,  201,
 /*  1630 */   177,  201,  201,  201,  201,   67,  131,  201,  133,  186,
 /*  1640 */   187,  136,  201,  138,  191,  201,  201,  194,  201,   81,
 /*  1650 */    82,  198,  199,  172,  201,   87,   88,  201,  177,  131,
 /*  1660 */   201,  133,  201,   95,  136,   97,  138,  186,  187,  201,
 /*  1670 */   201,  201,  191,  201,  106,  194,  201,  172,  201,  198,
 /*  1680 */   199,  113,  177,  201,  201,  201,  201,  201,  201,  201,
 /*  1690 */   201,  186,  187,  201,  201,  201,  191,  201,  201,  194,
 /*  1700 */   172,  201,  201,  198,  199,  177,  201,  201,  201,  201,
 /*  1710 */   201,  201,  201,  201,  186,  187,  131,  201,  133,  191,
 /*  1720 */   201,  136,  194,  138,  201,  201,  198,  199,  201,  201,
 /*  1730 */   201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  1740 */   201,  201,  201,  201,  131,  201,  133,  201,  201,  136,
 /*  1750 */   201,  138,  201,  201,  201,  201,  201,  172,  201,  201,
 /*  1760 */   201,  201,  177,  201,  201,  201,  201,  201,  131,  201,
 /*  1770 */   133,  186,  187,  136,  201,  138,  191,  201,  201,  194,
 /*  1780 */   201,  201,  201,  198,  199,  172,  201,  201,  201,  201,
 /*  1790 */   177,  131,  201,  133,  201,  201,  136,  201,  138,  186,
 /*  1800 */   187,  201,  201,  201,  191,  201,  201,  194,  201,  172,
 /*  1810 */   201,  198,  199,  201,  177,  201,  201,  201,  201,  201,
 /*  1820 */   201,  201,  201,  186,  187,  201,  201,  201,  191,  201,
 /*  1830 */   201,  194,  172,  201,  201,  198,  199,  177,  201,  201,
 /*  1840 */   201,  201,  201,  201,  201,  201,  186,  187,  131,  201,
 /*  1850 */   133,  191,  201,  136,  194,  138,  201,  201,  198,  199,
 /*  1860 */   201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  1870 */   201,  201,  201,  201,  201,  201,  131,  201,  133,  201,
 /*  1880 */   201,  136,  201,  138,  201,  201,  201,  201,  201,  172,
 /*  1890 */   201,  201,  201,  201,  177,  201,  201,  201,  201,  201,
 /*  1900 */   131,  201,  133,  186,  187,  136,  201,  138,  191,  201,
 /*  1910 */   201,  194,  201,  201,  201,  198,  199,  172,  201,  201,
 /*  1920 */   201,  201,  177,  131,  201,  133,  201,  201,  136,  201,
 /*  1930 */   138,  186,  187,  201,  201,  201,  191,  201,  201,  194,
 /*  1940 */   201,  172,  201,  198,  199,  201,  177,  201,  201,  201,
 /*  1950 */   201,  201,  201,  201,  201,  186,  187,  201,  201,  201,
 /*  1960 */   191,  201,  201,  194,  172,  201,  201,  198,  199,  177,
 /*  1970 */   201,  201,  201,  201,  201,  201,  201,  201,  186,  187,
 /*  1980 */   131,  201,  133,  191,  201,  136,  194,  138,  201,  201,
 /*  1990 */   198,  199,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  2000 */   201,  201,  201,  201,  201,  201,  201,  201,  131,  201,
 /*  2010 */   133,  201,  201,  136,  201,  138,  201,  201,  201,  201,
 /*  2020 */   201,  172,  201,  201,  201,  201,  177,  201,  201,  201,
 /*  2030 */   201,  201,  131,  201,  133,  186,  187,  136,  201,  138,
 /*  2040 */   191,  201,  201,  194,  201,  201,  201,  198,  199,  172,
 /*  2050 */   201,  201,  201,  201,  177,  131,  201,  133,  201,  201,
 /*  2060 */   136,  201,  138,  186,  187,  201,  201,  201,  191,  201,
 /*  2070 */   201,  194,  201,  172,  201,  198,  199,  201,  177,  201,
 /*  2080 */   201,  201,  201,  201,  201,  201,  201,  186,  187,  201,
 /*  2090 */   201,  201,  191,  201,  201,  194,  172,  201,  201,  198,
 /*  2100 */   199,  177,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  2110 */   186,  187,  131,  201,  133,  191,  201,  136,  194,  138,
 /*  2120 */   201,  201,  198,  199,  201,  201,  201,  201,  201,  201,
 /*  2130 */   201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  2140 */   201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
 /*  2150 */   201,  201,  201,  172,  201,  201,  201,  201,  177,  201,
 /*  2160 */   201,  201,  201,  201,  201,  201,  201,  186,  187,  201,
 /*  2170 */   201,  201,  191,  201,  201,  194,  201,  201,  201,  198,
 /*  2180 */   199,
);
    const YY_SHIFT_USE_DFLT = -105;
    const YY_SHIFT_MAX = 229;
    static public $yy_shift_ofst = array(
 /*     0 */   869,   -3,  545,  869,  869,  110,  110,  346,  235,  110,
 /*    10 */   346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
 /*    20 */   346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
 /*    30 */   346,  346,  346,  346,  346,  346,  346,  346,  748,  748,
 /*    40 */   748,  748, 1238, 1238, 1238, 1238, 1238, 1238, 1262, 1262,
 /*    50 */  1262,  828, 1119, 1262, 1262, 1262,  781,  828,  828,  828,
 /*    60 */  1262,   23, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
 /*    70 */  1262, 1262, 1262, 1262, 1262, 1262,  -53,  357,  166,  279,
 /*    80 */   299,  458,  505,  406,  505,  526,  571,  571,  571,  571,
 /*    90 */   571,  571,  710,  571,  690,  670,  571,  571,  571,  571,
 /*   100 */   571,  729,  764,  764,  764,  130, 1087,   32,  241,  702,
 /*   110 */  1181, 1109, 1087, 1087, 1087,  335,  114,  229,  708,  662,
 /*   120 */  1568,  227,  388, 1207, 1087, 1087, 1087, 1087, 1087, 1087,
 /*   130 */  1087,  144,  228,  512,  313,  536,  311,  113,  117,  214,
 /*   140 */   142,  179,  214,  195,  117,  -27,  117,  107,  624,  566,
 /*   150 */   563,  662,  693,  624,  624,  766,  741,  769,  714,  276,
 /*   160 */   624,  327,  714,  624,  751,  714,  358,  276,  387,  327,
 /*   170 */   361,  358,  327, -105, -105, -105, -105,  398,  409,   38,
 /*   180 */   211,   60,  157,  342,  -23,    1,  281,  -18,   40,   17,
 /*   190 */    51,  120,  183,  423,  456,  588,  483,  425,  540,  543,
 /*   200 */   387,  387,  570,    1,  562,  508,  555,  569,  487,  522,
 /*   210 */   502,  422,  301,  457,  461, -104, -104,  410,  427,  424,
 /*   220 */   419,  416,  475,  496,  447,  551,  529,  580,  583,  301,
);
    const YY_REDUCE_USE_DFLT = -179;
    const YY_REDUCE_MAX = 176;
    static public $yy_reduce_ofst = array(
 /*     0 */   -41,  775,  844,  494,  868,  879,  914,  956, 1102,  989,
 /*    10 */  1102,   58, 1074, 1613, 1585, 1264, 1528, 1505, 1481, 1453,
 /*    20 */  1396, 1373, 1349, 1321, 1297, 1189, 1227, 1924, 1769, 1745,
 /*    30 */  1901, 1849, 1792, 1981, 1877, 1717, 1637, 1660,  908,   25,
 /*    40 */   743,  251, -127,  -87,  236,  682,  671, 1274,  185,  465,
 /*    50 */    28,  711,  829,  940,  703,  203, 1108, 1072,  883,  469,
 /*    60 */   356,  204,  105,   77, 1303, 1301, 1280, 1267, 1248, 1183,
 /*    70 */  1086, 1054,  360,  917,  462,  435,  -60,   36, -178, -178,
 /*    80 */  -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
 /*    90 */  -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
 /*   100 */  -178, -178, -178, -178, -178, -178,   57, -178,  243,  -63,
 /*   110 */   -36,  275,   26,  431,  138,  137,  -24,  307,   78,  296,
 /*   120 */   534,  615,  619,  620,  623,  584,  625,  628,  629,  630,
 /*   130 */   631,  573,  596,  614,  616,  627,  552,  478,  567,  660,
 /*   140 */   468,  455,  509,  498,  507,  490,  492,  470,  514,  488,
 /*   150 */   481,  504,  530,  681,  678,  645,  689,  617,  646,  644,
 /*   160 */   648,  655,  665,  666,  659,  649,  471,  479,  300,  295,
 /*   170 */   287,  267,  244,  226,  240,  221,  202,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 1 */ array(3, 4, 5, 15, 16, 18, 25, 43, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 2 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 3 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 4 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 5 */ array(3, 4, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 6 */ array(3, 4, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 7 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 8 */ array(3, 4, 5, 15, 16, 18, 25, 26, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 9 */ array(3, 4, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 10 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 11 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 12 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 13 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 14 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 15 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 16 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 17 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 18 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 19 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 20 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 21 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 22 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 23 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 24 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 25 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 26 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 27 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 28 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 29 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 30 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 31 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 32 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 33 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 34 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 35 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 36 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 37 */ array(3, 4, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 101, 105, 106, 107, 108, 110, 111, 112, ),
        /* 38 */ array(4, 5, 15, 16, 18, 43, 93, 95, 96, 97, 105, 106, 107, 108, 110, 111, 112, ),
        /* 39 */ array(4, 5, 15, 16, 18, 43, 93, 95, 96, 97, 105, 106, 107, 108, 110, 111, 112, ),
        /* 40 */ array(4, 5, 15, 16, 18, 43, 93, 95, 96, 97, 105, 106, 107, 108, 110, 111, 112, ),
        /* 41 */ array(4, 5, 15, 16, 18, 43, 93, 95, 96, 97, 105, 106, 107, 108, 110, 111, 112, ),
        /* 42 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 43 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 44 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 45 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 46 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 47 */ array(4, 5, 18, 25, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 48 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 49 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 50 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 51 */ array(4, 5, 18, 39, 40, 43, 49, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 52 */ array(4, 5, 18, 43, 90, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 53 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 54 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 55 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 56 */ array(4, 5, 18, 38, 39, 40, 42, 43, 49, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 57 */ array(4, 5, 18, 39, 40, 43, 49, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 58 */ array(4, 5, 18, 39, 40, 43, 49, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 59 */ array(4, 5, 18, 39, 40, 43, 49, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 60 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 61 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 43, 50, 95, 97, 98, 99, 106, 110, 111, ),
        /* 62 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 63 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 64 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 65 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 66 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 67 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 68 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 69 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 70 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 71 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 72 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 73 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 74 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 75 */ array(4, 5, 18, 43, 95, 97, 106, 107, 108, 110, 111, 112, ),
        /* 76 */ array(69, 70, 71, 72, 73, 76, ),
        /* 77 */ array(42, 73, ),
        /* 78 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 68, 82, 98, 99, ),
        /* 79 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 79, 80, 98, 99, ),
        /* 80 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 106, ),
        /* 81 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 35, 98, 99, ),
        /* 82 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, 99, ),
        /* 83 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 104, ),
        /* 84 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, 99, ),
        /* 85 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 104, ),
        /* 86 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 87 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 88 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 89 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 90 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 91 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 92 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 93 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 94 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 95 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 96 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 97 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 98 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 99 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 100 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 101 */ array(2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 102 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 103 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 104 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 105 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 106 */ array(43, 95, 97, 106, 110, 111, ),
        /* 107 */ array(18, 19, 20, 98, 99, ),
        /* 108 */ array(25, 42, 55, 85, ),
        /* 109 */ array(25, ),
        /* 110 */ array(18, 43, 95, 97, 106, 110, 111, ),
        /* 111 */ array(25, 43, 95, 97, 106, 110, 111, ),
        /* 112 */ array(43, 95, 97, 106, 110, 111, ),
        /* 113 */ array(43, 95, 97, 106, 110, 111, ),
        /* 114 */ array(43, 95, 97, 106, 110, 111, ),
        /* 115 */ array(38, 44, 45, 46, 51, ),
        /* 116 */ array(40, 41, 49, 52, ),
        /* 117 */ array(25, 55, ),
        /* 118 */ array(25, ),
        /* 119 */ array(25, ),
        /* 120 */ array(40, 43, 55, 67, 81, 82, 87, 88, 95, 97, 106, 113, ),
        /* 121 */ array(43, 50, 95, 97, 106, 110, 111, ),
        /* 122 */ array(6, 43, 95, 97, 106, 110, 111, ),
        /* 123 */ array(43, 50, 95, 97, 106, 110, 111, ),
        /* 124 */ array(43, 95, 97, 106, 110, 111, ),
        /* 125 */ array(43, 95, 97, 106, 110, 111, ),
        /* 126 */ array(43, 95, 97, 106, 110, 111, ),
        /* 127 */ array(43, 95, 97, 106, 110, 111, ),
        /* 128 */ array(43, 95, 97, 106, 110, 111, ),
        /* 129 */ array(43, 95, 97, 106, 110, 111, ),
        /* 130 */ array(43, 95, 97, 106, 110, 111, ),
        /* 131 */ array(7, 8, 14, 98, 99, ),
        /* 132 */ array(3, 39, 43, 95, 97, ),
        /* 133 */ array(39, 40, 41, 52, ),
        /* 134 */ array(31, 40, 41, 50, ),
        /* 135 */ array(31, 32, 33, ),
        /* 136 */ array(37, 49, 92, ),
        /* 137 */ array(3, 96, ),
        /* 138 */ array(53, 54, ),
        /* 139 */ array(32, 33, ),
        /* 140 */ array(48, 68, ),
        /* 141 */ array(79, 80, ),
        /* 142 */ array(32, 33, ),
        /* 143 */ array(67, 68, ),
        /* 144 */ array(53, 54, ),
        /* 145 */ array(48, 75, ),
        /* 146 */ array(53, 54, ),
        /* 147 */ array(25, 94, ),
        /* 148 */ array(25, ),
        /* 149 */ array(96, ),
        /* 150 */ array(103, ),
        /* 151 */ array(25, ),
        /* 152 */ array(94, ),
        /* 153 */ array(25, ),
        /* 154 */ array(25, ),
        /* 155 */ array(48, ),
        /* 156 */ array(55, ),
        /* 157 */ array(25, ),
        /* 158 */ array(81, ),
        /* 159 */ array(76, ),
        /* 160 */ array(25, ),
        /* 161 */ array(77, ),
        /* 162 */ array(81, ),
        /* 163 */ array(25, ),
        /* 164 */ array(52, ),
        /* 165 */ array(81, ),
        /* 166 */ array(74, ),
        /* 167 */ array(76, ),
        /* 168 */ array(68, ),
        /* 169 */ array(77, ),
        /* 170 */ array(83, ),
        /* 171 */ array(74, ),
        /* 172 */ array(77, ),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(35, 102, 103, ),
        /* 178 */ array(70, 71, 72, ),
        /* 179 */ array(26, 68, ),
        /* 180 */ array(26, 68, ),
        /* 181 */ array(40, 41, ),
        /* 182 */ array(26, 68, ),
        /* 183 */ array(26, 68, ),
        /* 184 */ array(26, 68, ),
        /* 185 */ array(68, ),
        /* 186 */ array(48, ),
        /* 187 */ array(26, ),
        /* 188 */ array(25, ),
        /* 189 */ array(93, ),
        /* 190 */ array(96, ),
        /* 191 */ array(40, ),
        /* 192 */ array(31, ),
        /* 193 */ array(40, ),
        /* 194 */ array(26, ),
        /* 195 */ array(41, ),
        /* 196 */ array(93, ),
        /* 197 */ array(50, ),
        /* 198 */ array(87, ),
        /* 199 */ array(67, ),
        /* 200 */ array(68, ),
        /* 201 */ array(68, ),
        /* 202 */ array(37, ),
        /* 203 */ array(68, ),
        /* 204 */ array(40, ),
        /* 205 */ array(91, ),
        /* 206 */ array(40, ),
        /* 207 */ array(6, ),
        /* 208 */ array(43, ),
        /* 209 */ array(25, ),
        /* 210 */ array(24, ),
        /* 211 */ array(100, ),
        /* 212 */ array(26, ),
        /* 213 */ array(40, ),
        /* 214 */ array(28, ),
        /* 215 */ array(109, ),
        /* 216 */ array(109, ),
        /* 217 */ array(78, ),
        /* 218 */ array(68, ),
        /* 219 */ array(78, ),
        /* 220 */ array(84, ),
        /* 221 */ array(93, ),
        /* 222 */ array(68, ),
        /* 223 */ array(69, ),
        /* 224 */ array(37, ),
        /* 225 */ array(43, ),
        /* 226 */ array(68, ),
        /* 227 */ array(26, ),
        /* 228 */ array(26, ),
        /* 229 */ array(26, ),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
);
    static public $yy_default = array(
 /*     0 */   406,  611,  611,  406,  406,  611,  611,  611,  611,  611,
 /*    10 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    20 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    30 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    40 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    50 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    60 */   611,  590,  611,  611,  611,  611,  611,  611,  611,  611,
 /*    70 */   611,  611,  611,  611,  611,  611,  471,  463,  480,  477,
 /*    80 */   611,  611,  587,  611,  611,  611,  586,  466,  470,  587,
 /*    90 */   546,  483,  545,  501,  611,  611,  422,  479,  561,  562,
 /*   100 */   478,  536,  544,  537,  535,  540,  503,  543,  611,  611,
 /*   110 */   611,  611,  611,  611,  611,  611,  438,  611,  603,  611,
 /*   120 */   611,  611,  611,  454,  611,  611,  611,  611,  611,  611,
 /*   130 */   611,  611,  522,  438,  435,  414,  433,  555,  441,  414,
 /*   140 */   497,  519,  414,  447,  441,  469,  441,  526,  611,  611,
 /*   150 */   611,  611,  526,  611,  611,  497,  611,  521,  481,  471,
 /*   160 */   611,  473,  481,  611,  438,  481,  465,  471,  456,  473,
 /*   170 */   484,  465,  473,  505,  456,  444,  529,  611,  461,  611,
 /*   180 */   611,  611,  611,  611,  611,  496,  611,  611,  494,  611,
 /*   190 */   611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
 /*   200 */   446,  489,  611,  498,  611,  611,  611,  611,  611,  611,
 /*   210 */   390,  556,  611,  611,  611,  571,  605,  611,  472,  611,
 /*   220 */   482,  611,  582,  611,  611,  611,  467,  611,  611,  573,
 /*   230 */   420,  486,  485,  421,  510,  429,  594,  509,  541,  434,
 /*   240 */   508,  442,  507,  506,  437,  504,  605,  502,  427,  431,
 /*   250 */   610,  417,  609,  608,  607,  606,  487,  597,  436,  596,
 /*   260 */   418,  595,  598,  411,  419,  397,  403,  402,  490,  401,
 /*   270 */   400,  399,  398,  396,  405,  491,  395,  394,  492,  393,
 /*   280 */   391,  495,  493,  404,  407,  416,  604,  415,  412,  542,
 /*   290 */   499,  410,  409,  500,  583,  413,  603,  584,  602,  488,
 /*   300 */   601,  600,  599,  408,  575,  577,  428,  440,  589,  538,
 /*   310 */   423,  475,  424,  439,  476,  474,  443,  511,  555,  514,
 /*   320 */   553,  515,  552,  548,  517,  445,  588,  547,  460,  578,
 /*   330 */   593,  458,  457,  459,  464,  453,  462,  592,  452,  451,
 /*   340 */   450,  448,  449,  455,  581,  591,  518,  585,  551,  550,
 /*   350 */   564,  563,  524,  527,  560,  559,  425,  549,  565,  539,
 /*   360 */   426,  558,  557,  468,  430,  432,  554,  523,  534,  520,
 /*   370 */   572,  516,  580,  573,  579,  512,  576,  574,  513,  570,
 /*   380 */   533,  528,  569,  530,  568,  531,  567,  532,  566,  392,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 202;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 390;
    const YYNRULE = 221;
    const YYERRORSYMBOL = 114;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_OR',          'T_AND',         'T_NOT',       
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_LIKE',      
  'T_GLOB',        'T_NE',          'T_GT',          'T_GE',        
  'T_LT',          'T_LE',          'T_IN',          'T_PLUS',      
  'T_MINUS',       'T_CONCAT',      'T_TIMES',       'T_DIV',       
  'T_MOD',         'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',
  'T_SEMICOLON',   'T_PAR_OPEN',    'T_PAR_CLOSE',   'T_BEGIN',     
  'T_SAVEPOINT',   'T_RELEASE',     'T_ROLLBACK',    'T_TO',        
  'T_TRANSACTION',  'T_WORK',        'T_COMMIT',      'T_END',       
  'T_ALTER',       'T_TABLE',       'T_DROP',        'T_PRIMARY',   
  'T_KEY',         'T_INDEX',       'T_SET',         'T_DEFAULT',   
  'T_MODIFY',      'T_ADD',         'T_RENAME',      'T_CREATE',    
  'T_ON',          'T_UNIQUE',      'T_AS',          'T_CHANGE',    
  'T_COLUMN',      'T_FIRST',       'T_AFTER',       'T_SELECT',    
  'T_ALL',         'T_DISTINCT',    'DISTINCTROW',   'HIGH_PRIORITY',
  'STRAIGHT_JOIN',  'SQL_SMALL_RESULT',  'SQL_BIG_RESULT',  'SQL_CACHE',   
  'SQL_CALC_FOUND_ROWS',  'SQL_BUFFER_RESULT',  'SQL_NO_CACHE',  'T_FROM',      
  'T_COMMA',       'T_JOIN',        'T_INNER',       'T_LEFT',      
  'T_RT_IGHT',     'T_NATURAL',     'T_OUTER',       'T_USING',     
  'T_WHERE',       'T_ORDER',       'T_BY',          'T_DESC',      
  'T_ASC',         'T_LIMIT',       'T_OFFSET',      'T_GROUP',     
  'T_HAVING',      'T_VALUES',      'T_DELETE',      'T_UPDATE',    
  'T_INSERT',      'REPLACE',       'T_INTO',        'T_DUPLICATE', 
  'T_VIEW',        'T_NUMBER',      'T_UNSIGNED',    'T_COLLATE',   
  'T_NULL',        'T_AUTO_INCREMENT',  'T_IS',          'T_BETWEEN',   
  'T_BINARY',      'T_CASE',        'T_ELSE',        'T_WHEN',      
  'T_THEN',        'T_INTERVAL',    'ALPHA',         'T_STRING1',   
  'T_STRING2',     'T_DOT',         'INTERVAL',      'COLUMN',      
  'T_DOLLAR',      'PRIMARY',       'error',         'query',       
  'stmts',         'stmt',          'begin',         'commit',      
  'rollback',      'drop',          'select',        'insert',      
  'update',        'delete',        'alter_table',   'create_table',
  'create_index',  'create_view',   'transaction_keyword',  'alpha',       
  'commit_keyword',  'inner_select',  'table_name',    'alter_operation',
  'colname',       'alter_change',  'expr',          'create_column',
  'after',         'optional_column',  'to',            'index_type',  
  'index_list',    'select_opts',   'expr_list_as',  'from',        
  'joins',         'where',         'group_by',      'order_by',    
  'limit',         'select_mod',    'table_list',    'table_with_alias',
  'join',          'join_type',     'join_condition',  'join_prefix', 
  'join_postfix',  'columns',       'order_by_fields',  'order_by_field',
  'expr_list_par_optional',  'insert_stmt',   'expr_list_par_many',  'on_dup',      
  'set_expr',      'insert_table',  'set_expr_values',  'assign',      
  'term_colname',  'create_fields',  'table_opts',    'table_opt',   
  'table_key',     'term',          'indexes',       'index_col_name',
  'length',        'order',         'data_type',     'column_mods', 
  'unsigned',      'column_mod',    'term_select',   'null',        
  'negable',       'in',            'expr_list_par',  'case',        
  'negable_expr',  'case_options',  'function_call',  'expr_list_par_or_null',
  'expr_list',     'expr_as',       'alpha_or_all',  'variable',    
  'variable_name',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts T_SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= T_PAR_OPEN stmt T_PAR_CLOSE",
 /*   4 */ "stmt ::= begin",
 /*   5 */ "stmt ::= commit",
 /*   6 */ "stmt ::= rollback",
 /*   7 */ "stmt ::= drop",
 /*   8 */ "stmt ::= select",
 /*   9 */ "stmt ::= insert",
 /*  10 */ "stmt ::= update",
 /*  11 */ "stmt ::= delete",
 /*  12 */ "stmt ::= alter_table",
 /*  13 */ "stmt ::= create_table",
 /*  14 */ "stmt ::= create_index",
 /*  15 */ "stmt ::= create_view",
 /*  16 */ "stmt ::=",
 /*  17 */ "begin ::= T_BEGIN transaction_keyword",
 /*  18 */ "begin ::= T_SAVEPOINT alpha",
 /*  19 */ "commit ::= commit_keyword transaction_keyword",
 /*  20 */ "commit ::= T_RELEASE T_SAVEPOINT alpha",
 /*  21 */ "rollback ::= T_ROLLBACK transaction_keyword",
 /*  22 */ "rollback ::= T_ROLLBACK T_TO alpha",
 /*  23 */ "transaction_keyword ::= T_TRANSACTION|T_WORK",
 /*  24 */ "transaction_keyword ::=",
 /*  25 */ "commit_keyword ::= T_COMMIT",
 /*  26 */ "commit_keyword ::= T_END",
 /*  27 */ "inner_select ::= T_PAR_OPEN inner_select T_PAR_CLOSE",
 /*  28 */ "inner_select ::= T_PAR_OPEN select T_PAR_CLOSE",
 /*  29 */ "alter_table ::= T_ALTER T_TABLE table_name alter_operation",
 /*  30 */ "alter_operation ::= T_DROP T_PRIMARY T_KEY",
 /*  31 */ "alter_operation ::= T_DROP T_KEY|T_INDEX colname",
 /*  32 */ "alter_operation ::= alter_change T_SET T_DEFAULT expr",
 /*  33 */ "alter_operation ::= alter_change T_DROP T_DEFAULT",
 /*  34 */ "alter_operation ::= alter_change create_column after",
 /*  35 */ "alter_operation ::= T_MODIFY create_column after",
 /*  36 */ "alter_operation ::= T_ADD optional_column create_column after",
 /*  37 */ "alter_operation ::= T_DROP optional_column colname",
 /*  38 */ "alter_operation ::= T_RENAME to colname",
 /*  39 */ "alter_operation ::= T_RENAME T_KEY|T_INDEX colname T_TO colname",
 /*  40 */ "alter_operation ::= T_ADD index_type T_KEY|T_INDEX colname index_list",
 /*  41 */ "create_index ::= T_CREATE index_type T_INDEX colname T_ON colname index_list",
 /*  42 */ "index_type ::= T_UNIQUE",
 /*  43 */ "index_type ::=",
 /*  44 */ "to ::= T_TO|T_AS",
 /*  45 */ "to ::=",
 /*  46 */ "alter_change ::= T_CHANGE optional_column colname",
 /*  47 */ "optional_column ::= T_COLUMN",
 /*  48 */ "optional_column ::=",
 /*  49 */ "after ::= T_FIRST",
 /*  50 */ "after ::= T_AFTER colname",
 /*  51 */ "after ::=",
 /*  52 */ "select ::= T_SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  53 */ "select_opts ::= select_opts select_mod",
 /*  54 */ "select_opts ::=",
 /*  55 */ "select_mod ::= T_ALL|T_DISTINCT|DISTINCTROW|HIGH_PRIORITY|STRAIGHT_JOIN|SQL_SMALL_RESULT|SQL_BIG_RESULT|SQL_CACHE|SQL_CALC_FOUND_ROWS|SQL_BUFFER_RESULT|SQL_NO_CACHE",
 /*  56 */ "from ::= T_FROM table_list",
 /*  57 */ "from ::=",
 /*  58 */ "table_list ::= table_list T_COMMA table_with_alias",
 /*  59 */ "table_list ::= table_with_alias",
 /*  60 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  61 */ "table_with_alias ::= inner_select alpha",
 /*  62 */ "table_with_alias ::= table_name T_AS alpha",
 /*  63 */ "table_with_alias ::= table_name alpha",
 /*  64 */ "table_with_alias ::= table_name",
 /*  65 */ "joins ::= joins join",
 /*  66 */ "joins ::=",
 /*  67 */ "join ::= join_type T_JOIN table_with_alias join_condition",
 /*  68 */ "join_type ::= join_prefix T_INNER",
 /*  69 */ "join_type ::= join_prefix T_LEFT join_postfix",
 /*  70 */ "join_type ::= join_prefix T_RT_IGHT join_postfix",
 /*  71 */ "join_type ::= join_prefix",
 /*  72 */ "join_prefix ::= T_NATURAL",
 /*  73 */ "join_prefix ::=",
 /*  74 */ "join_postfix ::= T_OUTER",
 /*  75 */ "join_postfix ::=",
 /*  76 */ "join_condition ::= T_ON expr",
 /*  77 */ "join_condition ::= T_USING columns",
 /*  78 */ "join_condition ::= T_USING T_PAR_OPEN columns T_PAR_CLOSE",
 /*  79 */ "join_condition ::=",
 /*  80 */ "where ::= T_WHERE expr",
 /*  81 */ "where ::=",
 /*  82 */ "order_by ::= T_ORDER T_BY order_by_fields",
 /*  83 */ "order_by ::=",
 /*  84 */ "order_by_fields ::= order_by_fields T_COMMA order_by_field",
 /*  85 */ "order_by_fields ::= order_by_field",
 /*  86 */ "order_by_field ::= expr T_DESC|T_ASC",
 /*  87 */ "order_by_field ::= expr",
 /*  88 */ "limit ::= T_LIMIT expr T_OFFSET expr",
 /*  89 */ "limit ::= T_LIMIT expr T_COMMA expr",
 /*  90 */ "limit ::= T_LIMIT expr",
 /*  91 */ "limit ::=",
 /*  92 */ "group_by ::= T_GROUP T_BY expr_list_par_optional",
 /*  93 */ "group_by ::= T_GROUP T_BY expr_list_par_optional T_HAVING expr",
 /*  94 */ "group_by ::=",
 /*  95 */ "insert ::= insert_stmt select",
 /*  96 */ "insert ::= insert_stmt inner_select",
 /*  97 */ "insert ::= insert_stmt T_VALUES expr_list_par_many on_dup",
 /*  98 */ "insert ::= insert_stmt set_expr on_dup",
 /*  99 */ "drop ::= T_DROP T_TABLE table_list",
 /* 100 */ "delete ::= T_DELETE T_FROM table_with_alias where order_by limit",
 /* 101 */ "update ::= T_UPDATE table_list joins set_expr where order_by limit",
 /* 102 */ "insert_stmt ::= T_INSERT|REPLACE T_INTO insert_table",
 /* 103 */ "insert_stmt ::= T_INSERT|REPLACE insert_table",
 /* 104 */ "insert_table ::= table_name",
 /* 105 */ "insert_table ::= table_name T_PAR_OPEN columns T_PAR_CLOSE",
 /* 106 */ "on_dup ::= T_ON T_DUPLICATE T_KEY T_UPDATE set_expr_values",
 /* 107 */ "on_dup ::=",
 /* 108 */ "set_expr ::= T_SET set_expr_values",
 /* 109 */ "set_expr_values ::= set_expr_values T_COMMA assign",
 /* 110 */ "set_expr_values ::= assign",
 /* 111 */ "assign ::= term_colname T_EQ expr",
 /* 112 */ "create_view ::= T_CREATE T_VIEW colname T_AS select",
 /* 113 */ "create_table ::= T_CREATE T_TABLE colname T_PAR_OPEN create_fields T_PAR_CLOSE table_opts",
 /* 114 */ "table_opts ::= table_opts table_opt",
 /* 115 */ "table_opts ::=",
 /* 116 */ "table_opt ::= table_key T_EQ term",
 /* 117 */ "table_key ::= table_key alpha",
 /* 118 */ "table_key ::= alpha",
 /* 119 */ "create_fields ::= create_fields T_COMMA create_column",
 /* 120 */ "create_fields ::= create_column",
 /* 121 */ "create_column ::= T_PRIMARY T_KEY index_list",
 /* 122 */ "create_column ::= T_UNIQUE T_KEY colname index_list",
 /* 123 */ "create_column ::= T_KEY colname index_list",
 /* 124 */ "index_list ::= T_PAR_OPEN indexes T_PAR_CLOSE",
 /* 125 */ "indexes ::= indexes T_COMMA index_col_name",
 /* 126 */ "indexes ::= index_col_name",
 /* 127 */ "index_col_name ::= term_colname length order",
 /* 128 */ "order ::= T_DESC|T_ASC",
 /* 129 */ "order ::=",
 /* 130 */ "length ::= T_PAR_OPEN T_NUMBER T_PAR_CLOSE",
 /* 131 */ "length ::=",
 /* 132 */ "create_column ::= colname data_type column_mods",
 /* 133 */ "data_type ::= alpha unsigned",
 /* 134 */ "data_type ::= alpha T_PAR_OPEN T_NUMBER T_PAR_CLOSE unsigned",
 /* 135 */ "data_type ::= alpha T_PAR_OPEN T_NUMBER T_PAR_CLOSE unsigned",
 /* 136 */ "unsigned ::=",
 /* 137 */ "unsigned ::= T_UNSIGNED",
 /* 138 */ "column_mods ::= column_mods column_mod",
 /* 139 */ "column_mods ::=",
 /* 140 */ "column_mod ::= T_DEFAULT term",
 /* 141 */ "column_mod ::= T_COLLATE term",
 /* 142 */ "column_mod ::= T_PRIMARY T_KEY",
 /* 143 */ "column_mod ::= T_NOT T_NULL",
 /* 144 */ "column_mod ::= T_AUTO_INCREMENT",
 /* 145 */ "expr ::= expr T_AND expr",
 /* 146 */ "expr ::= expr T_OR expr",
 /* 147 */ "expr ::= T_NOT expr",
 /* 148 */ "expr ::= T_PAR_OPEN expr T_PAR_CLOSE",
 /* 149 */ "expr ::= term_select",
 /* 150 */ "expr ::= expr T_EQ|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /* 151 */ "expr ::= expr T_IS T_NOT null",
 /* 152 */ "expr ::= expr T_IS null",
 /* 153 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /* 154 */ "expr ::= expr T_NOT T_BETWEEN expr T_AND expr",
 /* 155 */ "expr ::= expr T_BETWEEN expr T_AND expr",
 /* 156 */ "expr ::= expr negable expr",
 /* 157 */ "expr ::= expr in term_select",
 /* 158 */ "expr ::= expr in expr_list_par",
 /* 159 */ "expr ::= case",
 /* 160 */ "expr ::= term",
 /* 161 */ "in ::= T_IN",
 /* 162 */ "in ::= T_NOT T_IN",
 /* 163 */ "negable ::= T_NOT negable_expr",
 /* 164 */ "negable ::= negable_expr",
 /* 165 */ "negable_expr ::= T_IS",
 /* 166 */ "negable_expr ::= T_LIKE",
 /* 167 */ "negable_expr ::= T_LIKE T_BINARY",
 /* 168 */ "negable_expr ::= T_GLOB",
 /* 169 */ "case ::= T_CASE case_options T_END",
 /* 170 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /* 171 */ "case_options ::= case_options T_WHEN expr T_THEN expr",
 /* 172 */ "case_options ::= T_WHEN expr T_THEN expr",
 /* 173 */ "term ::= T_INTERVAL expr ALPHA",
 /* 174 */ "term ::= T_PLUS term",
 /* 175 */ "term ::= T_MINUS T_NUMBER",
 /* 176 */ "term ::= T_NUMBER",
 /* 177 */ "term ::= null",
 /* 178 */ "term ::= function_call",
 /* 179 */ "term ::= T_STRING1",
 /* 180 */ "term ::= T_STRING2",
 /* 181 */ "term ::= alpha",
 /* 182 */ "term ::= term_colname",
 /* 183 */ "term_select ::= inner_select",
 /* 184 */ "term_colname ::= colname",
 /* 185 */ "null ::= T_NULL",
 /* 186 */ "function_call ::= ALPHA expr_list_par_or_null",
 /* 187 */ "columns ::= columns T_COMMA alpha",
 /* 188 */ "columns ::= alpha",
 /* 189 */ "expr_list_par_or_null ::= expr_list_par",
 /* 190 */ "expr_list_par_or_null ::= T_PAR_OPEN T_PAR_CLOSE",
 /* 191 */ "expr_list_par_optional ::= expr_list_par",
 /* 192 */ "expr_list_par_optional ::= expr_list",
 /* 193 */ "expr_list_par_many ::= expr_list_par_many T_COMMA expr_list_par",
 /* 194 */ "expr_list_par_many ::= expr_list_par",
 /* 195 */ "expr_list_par ::= T_PAR_OPEN expr_list T_PAR_CLOSE",
 /* 196 */ "expr_list ::= expr_list T_COMMA expr",
 /* 197 */ "expr_list ::= expr",
 /* 198 */ "expr_list_as ::= expr_list_as T_COMMA expr_as",
 /* 199 */ "expr_list_as ::= expr_as",
 /* 200 */ "expr_as ::= expr",
 /* 201 */ "expr_as ::= expr T_AS alpha",
 /* 202 */ "expr_as ::= expr alpha",
 /* 203 */ "table_name ::= colname",
 /* 204 */ "colname ::= alpha T_DOT alpha_or_all",
 /* 205 */ "colname ::= alpha_or_all",
 /* 206 */ "colname ::= T_STRING1",
 /* 207 */ "colname ::= T_STRING2",
 /* 208 */ "colname ::= variable",
 /* 209 */ "alpha ::= T_DEFAULT",
 /* 210 */ "alpha ::= T_COLLATE",
 /* 211 */ "alpha ::= INTERVAL",
 /* 212 */ "alpha ::= T_AUTO_INCREMENT",
 /* 213 */ "alpha ::= ALPHA",
 /* 214 */ "alpha ::= COLUMN",
 /* 215 */ "alpha_or_all ::= alpha",
 /* 216 */ "alpha_or_all ::= T_TIMES",
 /* 217 */ "variable ::= T_QUESTION",
 /* 218 */ "variable ::= T_DOLLAR|T_COLON variable_name",
 /* 219 */ "variable_name ::= ALPHA",
 /* 220 */ "variable_name ::= T_LIMIT|T_INSERT|T_UPDATE|T_FROM|T_SELECT|T_COLLATE|T_AUTO_INCREMENT|T_DEFAULT|PRIMARY|T_OFFSET|T_KEY",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 3 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 0 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 0 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 5 ),
  array( 'lhs' => 135, 'rhs' => 5 ),
  array( 'lhs' => 128, 'rhs' => 7 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 143, 'rhs' => 0 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 0 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 0 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 140, 'rhs' => 0 ),
  array( 'lhs' => 122, 'rhs' => 9 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 0 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 0 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 0 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 160, 'rhs' => 0 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 2 ),
  array( 'lhs' => 158, 'rhs' => 4 ),
  array( 'lhs' => 158, 'rhs' => 0 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 149, 'rhs' => 0 ),
  array( 'lhs' => 151, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 0 ),
  array( 'lhs' => 162, 'rhs' => 3 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 4 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 0 ),
  array( 'lhs' => 150, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 5 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 123, 'rhs' => 2 ),
  array( 'lhs' => 123, 'rhs' => 2 ),
  array( 'lhs' => 123, 'rhs' => 4 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 6 ),
  array( 'lhs' => 124, 'rhs' => 7 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 4 ),
  array( 'lhs' => 167, 'rhs' => 5 ),
  array( 'lhs' => 167, 'rhs' => 0 ),
  array( 'lhs' => 168, 'rhs' => 2 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 7 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 0 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 4 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 0 ),
  array( 'lhs' => 180, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 0 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 5 ),
  array( 'lhs' => 182, 'rhs' => 5 ),
  array( 'lhs' => 184, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 0 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 2 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 6 ),
  array( 'lhs' => 138, 'rhs' => 5 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 2 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 5 ),
  array( 'lhs' => 193, 'rhs' => 5 ),
  array( 'lhs' => 193, 'rhs' => 4 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 2 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 194, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 3 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 3 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 3 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 2 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        58 => 1,
        84 => 1,
        119 => 1,
        193 => 1,
        198 => 1,
        2 => 2,
        3 => 3,
        124 => 3,
        130 => 3,
        195 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        11 => 4,
        12 => 4,
        13 => 4,
        14 => 4,
        15 => 4,
        46 => 4,
        50 => 4,
        56 => 4,
        80 => 4,
        106 => 4,
        108 => 4,
        137 => 4,
        149 => 4,
        159 => 4,
        160 => 4,
        164 => 4,
        177 => 4,
        178 => 4,
        182 => 4,
        189 => 4,
        191 => 4,
        192 => 4,
        203 => 4,
        205 => 4,
        206 => 4,
        207 => 4,
        208 => 4,
        209 => 4,
        210 => 4,
        211 => 4,
        212 => 4,
        213 => 4,
        215 => 4,
        219 => 4,
        220 => 4,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        27 => 27,
        28 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        73 => 43,
        75 => 43,
        136 => 43,
        49 => 49,
        52 => 52,
        53 => 53,
        65 => 53,
        117 => 53,
        138 => 53,
        54 => 54,
        115 => 54,
        55 => 55,
        128 => 55,
        59 => 59,
        85 => 59,
        118 => 59,
        194 => 59,
        199 => 59,
        200 => 59,
        60 => 60,
        62 => 60,
        88 => 60,
        93 => 60,
        201 => 60,
        204 => 60,
        61 => 61,
        63 => 61,
        202 => 61,
        64 => 64,
        90 => 64,
        66 => 66,
        139 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        81 => 79,
        83 => 79,
        91 => 79,
        107 => 79,
        129 => 79,
        131 => 79,
        82 => 82,
        86 => 86,
        87 => 87,
        89 => 89,
        92 => 92,
        95 => 95,
        96 => 95,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        109 => 109,
        125 => 109,
        187 => 109,
        196 => 109,
        110 => 110,
        126 => 110,
        188 => 110,
        197 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        127 => 127,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 134,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        150 => 150,
        156 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        157 => 153,
        154 => 154,
        155 => 155,
        158 => 158,
        161 => 161,
        162 => 162,
        163 => 163,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 167,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        179 => 179,
        180 => 180,
        181 => 181,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        190 => 190,
        214 => 214,
        216 => 216,
        217 => 217,
        218 => 218,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2413 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2416 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 2419 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 2422 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2425 "src/SQLParser/Parser.php"
#line 49 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = null;     }
#line 2428 "src/SQLParser/Parser.php"
#line 51 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = new SQL\BeginTransaction;     }
#line 2431 "src/SQLParser/Parser.php"
#line 52 "src/SQLParser/Parser.y"
    function yy_r18(){ $this->_retvalue = new SQL\BeginTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2434 "src/SQLParser/Parser.php"
#line 53 "src/SQLParser/Parser.y"
    function yy_r19(){ $this->_retvalue = new SQL\CommitTransaction;     }
#line 2437 "src/SQLParser/Parser.php"
#line 54 "src/SQLParser/Parser.y"
    function yy_r20(){ $this->_retvalue = new SQL\CommitTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2440 "src/SQLParser/Parser.php"
#line 55 "src/SQLParser/Parser.y"
    function yy_r21(){ $this->_retvalue = new SQL\RollbackTransaction;     }
#line 2443 "src/SQLParser/Parser.php"
#line 56 "src/SQLParser/Parser.y"
    function yy_r22(){ $this->_retvalue = new SQL\RollbackTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2446 "src/SQLParser/Parser.php"
#line 65 "src/SQLParser/Parser.y"
    function yy_r27(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 2449 "src/SQLParser/Parser.php"
#line 68 "src/SQLParser/Parser.y"
    function yy_r29(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor->setTableName($this->yystack[$this->yyidx + -1]->minor);     }
#line 2452 "src/SQLParser/Parser.php"
#line 70 "src/SQLParser/Parser.y"
    function yy_r30(){ $this->_retvalue = new SQL\AlterTable\DropPrimaryKey;     }
#line 2455 "src/SQLParser/Parser.php"
#line 71 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = new SQL\AlterTable\DropIndex($this->yystack[$this->yyidx + 0]->minor);     }
#line 2458 "src/SQLParser/Parser.php"
#line 72 "src/SQLParser/Parser.y"
    function yy_r32(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2461 "src/SQLParser/Parser.php"
#line 73 "src/SQLParser/Parser.y"
    function yy_r33(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -2]->minor, NULL);     }
#line 2464 "src/SQLParser/Parser.php"
#line 74 "src/SQLParser/Parser.y"
    function yy_r34(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2467 "src/SQLParser/Parser.php"
#line 75 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -1]->minor->getName(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2470 "src/SQLParser/Parser.php"
#line 76 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = new SQL\AlterTable\AddColumn($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2473 "src/SQLParser/Parser.php"
#line 77 "src/SQLParser/Parser.y"
    function yy_r37(){ $this->_retvalue = new SQL\AlterTable\DropColumn($this->yystack[$this->yyidx + 0]->minor);     }
#line 2476 "src/SQLParser/Parser.php"
#line 78 "src/SQLParser/Parser.y"
    function yy_r38(){ $this->_retvalue = new SQL\AlterTable\RenameTable($this->yystack[$this->yyidx + 0]->minor);     }
#line 2479 "src/SQLParser/Parser.php"
#line 79 "src/SQLParser/Parser.y"
    function yy_r39(){ $this->_retvalue = new SQL\AlterTable\RenameIndex($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2482 "src/SQLParser/Parser.php"
#line 80 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2485 "src/SQLParser/Parser.php"
#line 82 "src/SQLParser/Parser.y"
    function yy_r41(){
    $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue->setTableName($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2491 "src/SQLParser/Parser.php"
#line 87 "src/SQLParser/Parser.y"
    function yy_r42(){ $this->_retvalue = 'UNIQUE';     }
#line 2494 "src/SQLParser/Parser.php"
#line 88 "src/SQLParser/Parser.y"
    function yy_r43(){ $this->_retvalue = '';     }
#line 2497 "src/SQLParser/Parser.php"
#line 98 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = TRUE;     }
#line 2500 "src/SQLParser/Parser.php"
#line 104 "src/SQLParser/Parser.y"
    function yy_r52(){
    $this->_retvalue = new SQL\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  {
        foreach ($this->yystack[$this->yyidx + -5]->minor as $table) {
            $this->_retvalue->from($table[0], $table[1]);
        }
    }
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2516 "src/SQLParser/Parser.php"
#line 119 "src/SQLParser/Parser.y"
    function yy_r53(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2519 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r54(){ $this->_retvalue = array();     }
#line 2522 "src/SQLParser/Parser.php"
#line 121 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = strtoupper($this->yystack[$this->yyidx + 0]->minor);     }
#line 2525 "src/SQLParser/Parser.php"
#line 127 "src/SQLParser/Parser.y"
    function yy_r59(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 2528 "src/SQLParser/Parser.php"
#line 129 "src/SQLParser/Parser.y"
    function yy_r60(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2531 "src/SQLParser/Parser.php"
#line 130 "src/SQLParser/Parser.y"
    function yy_r61(){ $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2534 "src/SQLParser/Parser.php"
#line 133 "src/SQLParser/Parser.y"
    function yy_r64(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];     }
#line 2537 "src/SQLParser/Parser.php"
#line 136 "src/SQLParser/Parser.y"
    function yy_r66(){ $this->_retvalue = [];     }
#line 2540 "src/SQLParser/Parser.php"
#line 138 "src/SQLParser/Parser.y"
    function yy_r67(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]);
    if (is_array($this->yystack[$this->yyidx + 0]->minor) && $this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 2548 "src/SQLParser/Parser.php"
#line 145 "src/SQLParser/Parser.y"
    function yy_r68(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2551 "src/SQLParser/Parser.php"
#line 146 "src/SQLParser/Parser.y"
    function yy_r69(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2554 "src/SQLParser/Parser.php"
#line 147 "src/SQLParser/Parser.y"
    function yy_r70(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2557 "src/SQLParser/Parser.php"
#line 148 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2560 "src/SQLParser/Parser.php"
#line 150 "src/SQLParser/Parser.y"
    function yy_r72(){ $this->_retvalue = 'NATURAL';     }
#line 2563 "src/SQLParser/Parser.php"
#line 152 "src/SQLParser/Parser.y"
    function yy_r74(){ $this->_retvalue = 'OUTER';     }
#line 2566 "src/SQLParser/Parser.php"
#line 155 "src/SQLParser/Parser.y"
    function yy_r76(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2569 "src/SQLParser/Parser.php"
#line 156 "src/SQLParser/Parser.y"
    function yy_r77(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2572 "src/SQLParser/Parser.php"
#line 157 "src/SQLParser/Parser.y"
    function yy_r78(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 2575 "src/SQLParser/Parser.php"
#line 158 "src/SQLParser/Parser.y"
    function yy_r79(){ $this->_retvalue = NULL;     }
#line 2578 "src/SQLParser/Parser.php"
#line 163 "src/SQLParser/Parser.y"
    function yy_r82(){
    $this->_retvalue = new Stmt\ExprList;
    $this->_retvalue->setExprs($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2584 "src/SQLParser/Parser.php"
#line 172 "src/SQLParser/Parser.y"
    function yy_r86(){
    $this->_retvalue = new Stmt\Expr(strtoupper($this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2589 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r87(){ $this->_retvalue = new Stmt\Expr("ASC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 2592 "src/SQLParser/Parser.php"
#line 178 "src/SQLParser/Parser.y"
    function yy_r89(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -2]->minor];     }
#line 2595 "src/SQLParser/Parser.php"
#line 182 "src/SQLParser/Parser.y"
    function yy_r92(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 2598 "src/SQLParser/Parser.php"
#line 186 "src/SQLParser/Parser.y"
    function yy_r95(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2601 "src/SQLParser/Parser.php"
#line 188 "src/SQLParser/Parser.y"
    function yy_r97(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor; $this->yystack[$this->yyidx + -3]->minor->values($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2607 "src/SQLParser/Parser.php"
#line 192 "src/SQLParser/Parser.y"
    function yy_r98(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    $keys   = new Stmt\ExprList;
    $values = [];
    foreach ($this->yystack[$this->yyidx + -1]->minor->getExprs() as $field) {
        $member = $field->getMembers();
        $keys->addTerm($member[0]);
        $values[] = $member[1];
    }
    $this->yystack[$this->yyidx + -2]->minor->values([$values])->fields($keys);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2621 "src/SQLParser/Parser.php"
#line 205 "src/SQLParser/Parser.y"
    function yy_r99(){
    $this->_retvalue = new SQL\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2626 "src/SQLParser/Parser.php"
#line 209 "src/SQLParser/Parser.y"
    function yy_r100(){
    $this->_retvalue = new SQL\Delete($this->yystack[$this->yyidx + -3]->minor[0], $this->yystack[$this->yyidx + -3]->minor[1]);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2634 "src/SQLParser/Parser.php"
#line 216 "src/SQLParser/Parser.y"
    function yy_r101(){
    $this->_retvalue = new SQL\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2643 "src/SQLParser/Parser.php"
#line 224 "src/SQLParser/Parser.y"
    function yy_r102(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2650 "src/SQLParser/Parser.php"
#line 229 "src/SQLParser/Parser.y"
    function yy_r103(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2657 "src/SQLParser/Parser.php"
#line 235 "src/SQLParser/Parser.y"
    function yy_r104(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];    }
#line 2660 "src/SQLParser/Parser.php"
#line 236 "src/SQLParser/Parser.y"
    function yy_r105(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 2663 "src/SQLParser/Parser.php"
#line 243 "src/SQLParser/Parser.y"
    function yy_r109(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 2666 "src/SQLParser/Parser.php"
#line 244 "src/SQLParser/Parser.y"
    function yy_r110(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 2669 "src/SQLParser/Parser.php"
#line 245 "src/SQLParser/Parser.y"
    function yy_r111(){
    $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2674 "src/SQLParser/Parser.php"
#line 249 "src/SQLParser/Parser.y"
    function yy_r112(){
    $this->_retvalue = new SQL\View($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2679 "src/SQLParser/Parser.php"
#line 253 "src/SQLParser/Parser.y"
    function yy_r113(){
    $this->_retvalue = new SQL\Table($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2684 "src/SQLParser/Parser.php"
#line 257 "src/SQLParser/Parser.y"
    function yy_r114(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2687 "src/SQLParser/Parser.php"
#line 260 "src/SQLParser/Parser.y"
    function yy_r116(){
    $this->_retvalue[implode(" ", $this->yystack[$this->yyidx + -2]->minor)] = $this->yystack[$this->yyidx + 0]->minor->getMember(0);
    }
#line 2692 "src/SQLParser/Parser.php"
#line 268 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2695 "src/SQLParser/Parser.php"
#line 270 "src/SQLParser/Parser.y"
    function yy_r121(){
    $this->_retvalue = ['primary', $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2700 "src/SQLParser/Parser.php"
#line 273 "src/SQLParser/Parser.y"
    function yy_r122(){
    $this->_retvalue = ['unique', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2705 "src/SQLParser/Parser.php"
#line 276 "src/SQLParser/Parser.y"
    function yy_r123(){
    $this->_retvalue = ['key', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2710 "src/SQLParser/Parser.php"
#line 284 "src/SQLParser/Parser.y"
    function yy_r127(){
    $this->_retvalue = new Stmt\Expr('INDEX', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2715 "src/SQLParser/Parser.php"
#line 293 "src/SQLParser/Parser.y"
    function yy_r132(){
    $this->_retvalue = new Stmt\Column($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1], $this->yystack[$this->yyidx + -1]->minor[2]);
    foreach ($this->yystack[$this->yyidx + 0]->minor as $setting) {
        if (is_array($setting)) {
            $this->_retvalue->{$setting[0]}($setting[1]);
        } else {
            $this->_retvalue->$setting();
        }
    }
    }
#line 2727 "src/SQLParser/Parser.php"
#line 304 "src/SQLParser/Parser.y"
    function yy_r133(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, NULL, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2732 "src/SQLParser/Parser.php"
#line 308 "src/SQLParser/Parser.y"
    function yy_r134(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2737 "src/SQLParser/Parser.php"
#line 322 "src/SQLParser/Parser.y"
    function yy_r140(){ $this->_retvalue = ['defaultValue', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2740 "src/SQLParser/Parser.php"
#line 323 "src/SQLParser/Parser.y"
    function yy_r141(){ $this->_retvalue = ['collate', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2743 "src/SQLParser/Parser.php"
#line 324 "src/SQLParser/Parser.y"
    function yy_r142(){ $this->_retvalue = 'primaryKey';     }
#line 2746 "src/SQLParser/Parser.php"
#line 325 "src/SQLParser/Parser.y"
    function yy_r143(){    $this->_retvalue = 'notNull';     }
#line 2749 "src/SQLParser/Parser.php"
#line 326 "src/SQLParser/Parser.y"
    function yy_r144(){ $this->_retvalue = 'autoincrement';     }
#line 2752 "src/SQLParser/Parser.php"
#line 329 "src/SQLParser/Parser.y"
    function yy_r145(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2755 "src/SQLParser/Parser.php"
#line 330 "src/SQLParser/Parser.y"
    function yy_r146(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2758 "src/SQLParser/Parser.php"
#line 331 "src/SQLParser/Parser.y"
    function yy_r147(){
    if ($this->yystack[$this->yyidx + 0]->minor->getType() === 'IS NULL') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getMembers();
        $this->_retvalue = new Stmt\Expr('IS NOT NULL', $parts[0]);
        return;
    }
    $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2768 "src/SQLParser/Parser.php"
#line 339 "src/SQLParser/Parser.y"
    function yy_r148(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2771 "src/SQLParser/Parser.php"
#line 341 "src/SQLParser/Parser.y"
    function yy_r150(){
    $members = $this->yystack[$this->yyidx + -2]->minor->getMembers();
    if  ($this->yystack[$this->yyidx + -2]->minor->getType() === 'VALUE' && count($members) === 2&& $members[1] == 2) {
        $this->yystack[$this->yyidx + -2]->minor = new Stmt\Expr('COLUMN', $members[0]);
    }
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2780 "src/SQLParser/Parser.php"
#line 348 "src/SQLParser/Parser.y"
    function yy_r151(){ $this->_retvalue = new Stmt\Expr("IS NOT NULL", $this->yystack[$this->yyidx + -3]->minor);     }
#line 2783 "src/SQLParser/Parser.php"
#line 349 "src/SQLParser/Parser.y"
    function yy_r152(){ $this->_retvalue = new Stmt\Expr("IS NULL", $this->yystack[$this->yyidx + -2]->minor);     }
#line 2786 "src/SQLParser/Parser.php"
#line 350 "src/SQLParser/Parser.y"
    function yy_r153(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2789 "src/SQLParser/Parser.php"
#line 351 "src/SQLParser/Parser.y"
    function yy_r154(){
    $this->_retvalue = new Stmt\Expr('not between', $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2794 "src/SQLParser/Parser.php"
#line 354 "src/SQLParser/Parser.y"
    function yy_r155(){
    $this->_retvalue = new Stmt\Expr('between', $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2799 "src/SQLParser/Parser.php"
#line 365 "src/SQLParser/Parser.y"
    function yy_r158(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor));     }
#line 2802 "src/SQLParser/Parser.php"
#line 369 "src/SQLParser/Parser.y"
    function yy_r161(){ $this->_retvalue = 'IN';     }
#line 2805 "src/SQLParser/Parser.php"
#line 370 "src/SQLParser/Parser.y"
    function yy_r162(){ $this->_retvalue = 'NOT IN';     }
#line 2808 "src/SQLParser/Parser.php"
#line 372 "src/SQLParser/Parser.y"
    function yy_r163(){ $this->_retvalue = 'NOT ' . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2811 "src/SQLParser/Parser.php"
#line 375 "src/SQLParser/Parser.y"
    function yy_r165(){ $this->_retvalue = 'IS';     }
#line 2814 "src/SQLParser/Parser.php"
#line 376 "src/SQLParser/Parser.y"
    function yy_r166(){ $this->_retvalue = 'LIKE';     }
#line 2817 "src/SQLParser/Parser.php"
#line 377 "src/SQLParser/Parser.y"
    function yy_r167(){ $this->_retvalue = 'GLOB';     }
#line 2820 "src/SQLParser/Parser.php"
#line 381 "src/SQLParser/Parser.y"
    function yy_r169(){
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2826 "src/SQLParser/Parser.php"
#line 385 "src/SQLParser/Parser.y"
    function yy_r170(){
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 2832 "src/SQLParser/Parser.php"
#line 390 "src/SQLParser/Parser.y"
    function yy_r171(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2835 "src/SQLParser/Parser.php"
#line 391 "src/SQLParser/Parser.y"
    function yy_r172(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2838 "src/SQLParser/Parser.php"
#line 393 "src/SQLParser/Parser.y"
    function yy_r173(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2841 "src/SQLParser/Parser.php"
#line 394 "src/SQLParser/Parser.y"
    function yy_r174(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2844 "src/SQLParser/Parser.php"
#line 395 "src/SQLParser/Parser.y"
    function yy_r175(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 2847 "src/SQLParser/Parser.php"
#line 396 "src/SQLParser/Parser.y"
    function yy_r176(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2850 "src/SQLParser/Parser.php"
#line 399 "src/SQLParser/Parser.y"
    function yy_r179(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 1);     }
#line 2853 "src/SQLParser/Parser.php"
#line 400 "src/SQLParser/Parser.y"
    function yy_r180(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 2);     }
#line 2856 "src/SQLParser/Parser.php"
#line 401 "src/SQLParser/Parser.y"
    function yy_r181(){ $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2859 "src/SQLParser/Parser.php"
#line 403 "src/SQLParser/Parser.y"
    function yy_r183(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2862 "src/SQLParser/Parser.php"
#line 404 "src/SQLParser/Parser.y"
    function yy_r184(){
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Stmt\VariablePlaceholder) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else if (is_array($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    } else {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2873 "src/SQLParser/Parser.php"
#line 414 "src/SQLParser/Parser.y"
    function yy_r185(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2876 "src/SQLParser/Parser.php"
#line 416 "src/SQLParser/Parser.y"
    function yy_r186(){
    if (strtolower($this->yystack[$this->yyidx + -1]->minor) === 'isnull') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getExprs();
        if (!empty($parts[0]) && $parts[0]->getType() === 'COLUMN') {
            // This is a "isnull" function call, we must convert
            // `isnull(col)` to `col IS NULL` (which is the correct
            // SQL-standard way of representing that statement)
            $this->_retvalue = new Stmt\Expr('IS NULL', $parts[0]);
            return;
        }
    }
    $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2891 "src/SQLParser/Parser.php"
#line 434 "src/SQLParser/Parser.y"
    function yy_r190(){ $this->_retvalue = new Stmt\ExprList();     }
#line 2894 "src/SQLParser/Parser.php"
#line 467 "src/SQLParser/Parser.y"
    function yy_r214(){ $this->_retvalue = trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t");     }
#line 2897 "src/SQLParser/Parser.php"
#line 470 "src/SQLParser/Parser.y"
    function yy_r216(){ $this->_retvalue = new Stmt\Expr("ALL");     }
#line 2900 "src/SQLParser/Parser.php"
#line 472 "src/SQLParser/Parser.y"
    function yy_r217(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2903 "src/SQLParser/Parser.php"
#line 473 "src/SQLParser/Parser.y"
    function yy_r218(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2906 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 3026 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
