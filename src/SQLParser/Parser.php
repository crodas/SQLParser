<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 102 "src/SQLParser/Parser.php"

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_OR                           =  1;
    const T_AND                          =  2;
    const T_NOT                          =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_LIKE                         =  7;
    const T_GLOB                         =  8;
    const T_NE                           =  9;
    const T_GT                           = 10;
    const T_GE                           = 11;
    const T_LT                           = 12;
    const T_LE                           = 13;
    const T_IN                           = 14;
    const T_PLUS                         = 15;
    const T_MINUS                        = 16;
    const T_CONCAT                       = 17;
    const T_TIMES                        = 18;
    const T_DIV                          = 19;
    const T_MOD                          = 20;
    const T_PIPE                         = 21;
    const T_BITWISE                      = 22;
    const T_FILTER_PIPE                  = 23;
    const T_SEMICOLON                    = 24;
    const T_PAR_OPEN                     = 25;
    const T_PAR_CLOSE                    = 26;
    const T_BEGIN                        = 27;
    const T_SAVEPOINT                    = 28;
    const T_RELEASE                      = 29;
    const T_ROLLBACK                     = 30;
    const T_TO                           = 31;
    const T_TRANSACTION                  = 32;
    const T_WORK                         = 33;
    const T_COMMIT                       = 34;
    const T_END                          = 35;
    const T_ALTER                        = 36;
    const T_TABLE                        = 37;
    const T_DROP                         = 38;
    const T_PRIMARY                      = 39;
    const T_KEY                          = 40;
    const T_INDEX                        = 41;
    const T_SET                          = 42;
    const T_DEFAULT                      = 43;
    const T_MODIFY                       = 44;
    const T_ADD                          = 45;
    const T_RENAME                       = 46;
    const T_CREATE                       = 47;
    const T_ON                           = 48;
    const T_UNIQUE                       = 49;
    const T_AS                           = 50;
    const T_CHANGE                       = 51;
    const T_COLUMN                       = 52;
    const T_FIRST                        = 53;
    const T_AFTER                        = 54;
    const T_SELECT                       = 55;
    const T_ALL                          = 56;
    const T_DISTINCT                     = 57;
    const T_DISTINCTROW                  = 58;
    const T_HIGH_PRIORITY                = 59;
    const T_STRAIGHT_JOIN                = 60;
    const T_SQL_SMALL_RESULT             = 61;
    const T_SQL_BIG_RESULT               = 62;
    const T_SQL_CACHE                    = 63;
    const T_SQL_CALC_FOUND_ROWS          = 64;
    const T_SQL_BUFFER_RESULT            = 65;
    const T_SQL_NO_CACHE                 = 66;
    const T_FROM                         = 67;
    const T_COMMA                        = 68;
    const T_JOIN                         = 69;
    const T_INNER                        = 70;
    const T_LEFT                         = 71;
    const T_RIGHT                        = 72;
    const T_NATURAL                      = 73;
    const T_OUTER                        = 74;
    const T_USING                        = 75;
    const T_WHERE                        = 76;
    const T_ORDER                        = 77;
    const T_BY                           = 78;
    const T_DESC                         = 79;
    const T_ASC                          = 80;
    const T_LIMIT                        = 81;
    const T_OFFSET                       = 82;
    const T_GROUP                        = 83;
    const T_HAVING                       = 84;
    const T_VALUES                       = 85;
    const T_DELETE                       = 86;
    const T_UPDATE                       = 87;
    const T_INSERT                       = 88;
    const REPLACE                        = 89;
    const T_INTO                         = 90;
    const T_DUPLICATE                    = 91;
    const T_VIEW                         = 92;
    const T_NUMBER                       = 93;
    const T_UNSIGNED                     = 94;
    const T_COLLATE                      = 95;
    const T_NULL                         = 96;
    const T_AUTO_INCREMENT               = 97;
    const T_IS                           = 98;
    const T_BETWEEN                      = 99;
    const T_CAST                         = 100;
    const T_INTEGER                      = 101;
    const T_BINARY                       = 102;
    const T_CASE                         = 103;
    const T_ELSE                         = 104;
    const T_WHEN                         = 105;
    const T_THEN                         = 106;
    const T_INTERVAL                     = 107;
    const T_ALPHA                        = 108;
    const T_STRING1                      = 109;
    const T_STRING2                      = 110;
    const T_DOT                          = 111;
    const T_DOLLAR                       = 112;
    const YY_NO_ACTION = 624;
    const YY_ACCEPT_ACTION = 623;
    const YY_ERROR_ACTION = 622;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 2199;
static public $yy_action = array(
 /*     0 */    19,  265,  122,  471,  471,  471,  471,  347,  441,  441,
 /*    10 */    32,  255,   41,  217,  293,  245,   57,  374,  233,   49,
 /*    20 */   258,  117,    9,  341,   36,   37,  133,   67,   67,   34,
 /*    30 */   232,  312,   34,   34,   34,   34,   34,  313,   24,   24,
 /*    40 */   310,   24,   24,   24,  232,  312,  343,  162,  161,  301,
 /*    50 */   347,  325,  119,  316,  316,  316,  316,  316,  316,  316,
 /*    60 */   316,  316,  316,  316,  135,  228,  310,  355,  329,   49,
 /*    70 */    59,  118,  136,  127,  380,  301,  234,  173,  229,  376,
 /*    80 */   334,  239,  179,  381,   74,   97,  212,  246,  266,  254,
 /*    90 */   391,   16,  309,  251,  306,  290,  290,  227,   63,   63,
 /*   100 */   169,   19,  265,  122,   13,  120,  378,  385,  254,  122,
 /*   110 */    23,  222,  121,   41,  217,   29,  245,  339,  309,  384,
 /*   120 */   306,  145,   31,    9,  357,  243,  125,  218,   70,   70,
 /*   130 */   308,  304,  167,  369,  390,  320,   30,  349,  368,  367,
 /*   140 */   258,  310,  112,  387,  233,  224,  233,  246,  266,  381,
 /*   150 */   301,  114,   47,  179,  235,   36,   37,  133,  205,  132,
 /*   160 */    34,  232,  312,   34,   34,   34,   34,   34,  313,   24,
 /*   170 */    24,  375,   24,   24,   24,   75,  193,   19,  265,  122,
 /*   180 */    24,   24,   24,  204,  292,  200,  244,  374,  187,   41,
 /*   190 */   217,  391,  245,  309,  251,  306,  150,  267,  227,    9,
 /*   200 */   331,  169,  130,  290,  290,   13,  120,  378,  385,  319,
 /*   210 */   122,  310,   68,  246,  266,  246,  266,  310,  126,   50,
 /*   220 */   301,  175,  287,  314,   66,  251,  301,  364,  348,  216,
 /*   230 */    72,  180,  151,  345,  345,  379,  379,  623,  214,  397,
 /*   240 */   283,  282,  279,  270,  278,  277,  276,  275,  273,  272,
 /*   250 */   271,  289,  145,   31,  141,  340,  348,  216,  116,  180,
 /*   260 */   145,   31,  178,  309,  132,  306,  148,  391,  158,  309,
 /*   270 */   251,  306,   43,   11,  227,  308,  304,  169,  191,  334,
 /*   280 */   258,   13,  120,  378,  385,  188,  122,  110,   36,   37,
 /*   290 */   133,  147,   52,   34,  232,  312,   34,   34,   34,   34,
 /*   300 */    34,  313,   24,   24,   60,   24,   24,   24,  233,   19,
 /*   310 */   265,  122,  330,  114,  192,  305,  236,  176,   40,  310,
 /*   320 */   242,   41,  217,  340,  245,  233,  131,   58,  301,  183,
 /*   330 */   381,    9,  328,   36,   37,  133,  326,  340,   34,  232,
 /*   340 */   312,   34,   34,   34,   34,   34,  313,   24,   24,  310,
 /*   350 */    24,   24,   24,  186,   54,   14,  132,  233,  301,  123,
 /*   360 */   124,  264,  341,  119,  198,  292,  200,  185,  179,   27,
 /*   370 */    39,  309,  358,  306,  219,  165,  207,  246,  266,  134,
 /*   380 */   195,  352,  157,  308,  304,  145,   31,  233,   77,  241,
 /*   390 */   265,  122,  257,  179,  246,  266,  108,  140,    1,  391,
 /*   400 */     7,  309,  251,  306,  245,   56,  227,   15,  129,  169,
 /*   410 */    19,  265,  122,   13,  120,  378,  385,   22,  122,  233,
 /*   420 */    33,   25,   41,  217,  203,  245,  246,  266,   23,  310,
 /*   430 */   145,   31,    3,   10,   36,   37,  133,  250,  301,   34,
 /*   440 */   232,  312,   34,   34,   34,   34,   34,  313,   24,   24,
 /*   450 */   310,   24,   24,   24,  256,  233,  246,  266,  113,  301,
 /*   460 */   199,   36,   37,  133,   61,  323,   34,  232,  312,   34,
 /*   470 */    34,   34,   34,   34,  313,   24,   24,    2,   24,   24,
 /*   480 */    24,  309,  285,  306,   28,  111,  350,  359,  246,  266,
 /*   490 */   356,  372,  362,  308,  304,  249,  259,  364,  122,  152,
 /*   500 */   391,  174,  309,  251,  306,   65,  210,  227,   45,  211,
 /*   510 */   169,   48,  269,  233,   13,  120,  378,  385,  381,  122,
 /*   520 */   170,  233,   28,  111,  246,  266,  114,  382,  356,  143,
 /*   530 */   233,  145,   31,  197,   46,  114,   64,  363,  139,   18,
 /*   540 */   231,  283,  282,  279,  270,  278,  277,  276,  275,  273,
 /*   550 */   272,  271,  289,  298,  200,  141,   17,   21,  145,   31,
 /*   560 */    36,   37,  133,    5,   71,   34,  232,  312,   34,   34,
 /*   570 */    34,   34,   34,  313,   24,   24,  392,   24,   24,   24,
 /*   580 */   247,  181,  246,  266,  300,  365,  280,   26,  110,  177,
 /*   590 */   246,  266,  311,  360,  366,  291,   36,   37,  133,  246,
 /*   600 */   266,   34,  232,  312,   34,   34,   34,   34,   34,  313,
 /*   610 */    24,   24,   12,   24,   24,   24,   36,   37,  133,  370,
 /*   620 */   303,   34,  232,  312,   34,   34,   34,   34,   34,  313,
 /*   630 */    24,   24,  193,   24,   24,   24,   36,   37,  133,  307,
 /*   640 */   327,   34,  232,  312,   34,   34,   34,   34,   34,  313,
 /*   650 */    24,   24,   51,   24,   24,   24,  261,  145,   31,  543,
 /*   660 */   543,  133,   32,  213,   34,  232,  312,   34,   34,   34,
 /*   670 */    34,   34,  313,   24,   24,  215,   24,   24,   24,  377,
 /*   680 */   333,    4,    8,  338,  371,  263,  238,  342,  302,  297,
 /*   690 */   393,  299,  233,  145,   31,  190,  296,  341,  337,  336,
 /*   700 */   322,   20,  156,   73,  321,   69,  281,  344,  346,  252,
 /*   710 */   335,  361,  251,  145,   31,  155,  389,  386,  373,  159,
 /*   720 */   160,  220,  172,  388,   78,  428,  428,  274,  428,  428,
 /*   730 */   288,  428,  428,  145,   31,   36,   35,  133,  428,  428,
 /*   740 */    34,  232,  312,   34,   34,   34,   34,   34,  313,   24,
 /*   750 */    24,  428,   24,   24,   24,  428,  145,   31,   36,   38,
 /*   760 */   133,  246,  266,   34,  232,  312,   34,   34,   34,   34,
 /*   770 */    34,  313,   24,   24,  428,   24,   24,   24,   37,  133,
 /*   780 */   428,  428,   34,  232,  312,   34,   34,   34,   34,   34,
 /*   790 */   313,   24,   24,  428,   24,   24,   24,  428,  133,  428,
 /*   800 */   428,   34,  232,  312,   34,   34,   34,   34,   34,  313,
 /*   810 */    24,   24,  428,   24,   24,   24,   34,  232,  312,   34,
 /*   820 */    34,   34,   34,   34,  313,   24,   24,  428,   24,   24,
 /*   830 */    24,  428,  145,   31,  428,  428,  428,  428,  428,  428,
 /*   840 */   428,  428,  428,  428,  428,  229,  428,  334,  428,  428,
 /*   850 */   381,  428,   62,  428,  428,  145,   31,  428,  115,    6,
 /*   860 */   146,  144,  128,  221,  137,  428,  428,  315,  268,  294,
 /*   870 */   230,  428,  206,  428,  145,   31,  310,  428,  233,  428,
 /*   880 */   428,  138,  428,  381,  428,  301,  384,  428,  428,  179,
 /*   890 */   428,  357,  233,  145,   31,  428,  428,  253,  265,  122,
 /*   900 */   369,  390,  428,  428,  428,  368,  367,  428,  145,   31,
 /*   910 */   387,  428,  245,  317,  246,  266,  428,  428,  428,  171,
 /*   920 */   209,   44,   53,   53,  428,  182,  383,  428,  309,  428,
 /*   930 */   306,  428,  196,  201,   76,  428,  223,  310,  265,  122,
 /*   940 */   308,  304,  428,  194,  228,  428,  301,  246,  266,   41,
 /*   950 */   217,  428,  245,  229,  428,  226,  428,  428,  381,  428,
 /*   960 */    82,  246,  266,  428,  286,  283,  282,  279,  270,  278,
 /*   970 */   277,  276,  275,  273,  272,  271,  289,  310,  428,  141,
 /*   980 */   428,  428,  428,  428,  428,  428,  301,  428,  428,  309,
 /*   990 */   428,  306,  428,  233,  384,  123,  124,  428,  341,  357,
 /*  1000 */   428,  308,  304,  249,  259,  428,  122,  428,  369,  390,
 /*  1010 */   428,  428,  110,  368,  367,  428,  164,  352,  387,  428,
 /*  1020 */   184,  428,  246,  266,  428,  428,  428,  391,  233,  309,
 /*  1030 */   251,  306,  428,  324,  265,  122,  228,  428,  428,  428,
 /*  1040 */   428,   13,  120,  378,  385,  229,  122,  226,  245,  428,
 /*  1050 */   381,  233,   97,  123,  124,  245,  341,  428,  428,  428,
 /*  1060 */   262,  262,  246,  266,  262,  428,  428,  428,  428,  201,
 /*  1070 */    76,  428,  428,  310,  208,  352,  262,  428,  428,  194,
 /*  1080 */   310,  428,  301,  428,  428,  428,  384,  428,  262,  301,
 /*  1090 */   428,  357,  428,  428,  428,  428,  428,  246,  266,  428,
 /*  1100 */   369,  390,  262,  262,  428,  368,  367,  428,  262,  262,
 /*  1110 */   387,  428,  184,  428,  246,  266,  262,  229,  262,  334,
 /*  1120 */   246,  266,  381,  428,   80,  309,  428,  306,  428,  248,
 /*  1130 */   428,  428,  309,  428,  306,  428,  428,  308,  304,  249,
 /*  1140 */   259,  428,  122,  428,  308,  304,  428,  428,  225,  353,
 /*  1150 */   428,  428,  428,  428,  229,  428,  334,  428,  384,  381,
 /*  1160 */   428,   62,  428,  357,  428,  233,  428,  123,  124,  428,
 /*  1170 */   341,  428,  369,  390,  428,  229,  428,  368,  367,  428,
 /*  1180 */   381,  428,  387,  428,  428,  428,  246,  266,  428,  149,
 /*  1190 */   428,  428,  428,  428,  233,  384,  123,  124,  428,  341,
 /*  1200 */   357,  229,  428,  334,  428,  428,  381,  428,   80,  369,
 /*  1210 */   390,  428,  428,  428,  368,  367,  384,  428,  351,  387,
 /*  1220 */   428,  396,  332,  246,  266,  428,  428,  228,  428,  428,
 /*  1230 */   428,  390,  428,  318,  246,  266,  229,  428,  226,  428,
 /*  1240 */   387,  381,  384,   86,  246,  266,  428,  357,  229,  428,
 /*  1250 */   334,  428,  428,  381,  428,   97,  369,  390,  310,  428,
 /*  1260 */   428,  368,  367,  246,  266,  428,  387,  301,  428,  428,
 /*  1270 */   246,  266,  428,  229,  428,  334,  428,  384,  381,  233,
 /*  1280 */   109,  428,  357,  428,  381,  428,  428,  428,  428,  384,
 /*  1290 */   233,  369,  390,  428,  357,  114,  368,  367,  142,  428,
 /*  1300 */   428,  387,  428,  369,  390,  246,  266,  428,  368,  367,
 /*  1310 */   309,  428,  306,  387,  384,  184,  428,  246,  266,  357,
 /*  1320 */   171,  428,  308,  304,  428,  428,  428,  354,  369,  390,
 /*  1330 */   428,  428,  229,  368,  367,  428,  428,  381,  387,  229,
 /*  1340 */   428,  334,  246,  266,  381,  428,   95,  428,  246,  266,
 /*  1350 */   229,  428,  334,  233,  428,  381,  428,   96,  163,  246,
 /*  1360 */   266,  428,  428,  428,  428,  233,  428,  123,  124,  428,
 /*  1370 */   341,  428,  229,  384,  334,  428,  428,  381,  394,   81,
 /*  1380 */   384,  428,  428,  428,  428,  357,  428,  428,  390,  154,
 /*  1390 */   428,  384,   42,  428,  369,  390,  357,  387,  428,  368,
 /*  1400 */   367,  246,  266,  428,  387,  369,  390,  428,  246,  266,
 /*  1410 */   368,  367,  428,  384,  428,  387,  428,  428,  357,  246,
 /*  1420 */   266,  428,  246,  266,  428,  428,  428,  369,  390,  310,
 /*  1430 */   428,  428,  368,  367,  246,  266,  428,  387,  301,  428,
 /*  1440 */   428,  246,  266,  428,  229,  428,  334,  428,  428,  381,
 /*  1450 */   428,   90,  428,  428,  428,  428,  428,  428,  233,  428,
 /*  1460 */   229,  190,  334,  341,  428,  381,  428,  105,  428,  428,
 /*  1470 */   233,  428,  428,  428,  428,  189,  428,  229,  428,  334,
 /*  1480 */   428,  309,  381,  306,  100,  384,  428,  428,  428,  428,
 /*  1490 */   357,  428,  428,  308,  304,  428,  284,  428,  233,  369,
 /*  1500 */   390,  384,  428,  168,  368,  367,  357,  428,  428,  387,
 /*  1510 */   428,  428,  428,  246,  266,  369,  390,  428,  384,  233,
 /*  1520 */   368,  367,  428,  357,  166,  387,  428,  246,  266,  246,
 /*  1530 */   266,  233,  369,  390,  428,  428,  260,  368,  367,  246,
 /*  1540 */   266,  428,  387,  428,  428,  428,  246,  266,  428,  229,
 /*  1550 */   428,  334,  428,  233,  381,  428,   84,  428,  202,  233,
 /*  1560 */   428,  428,  428,  428,  153,  428,  428,  246,  266,  233,
 /*  1570 */   428,  428,  428,  233,  237,  229,  428,  334,  295,  428,
 /*  1580 */   381,  428,  106,  428,  428,  265,  122,  428,  246,  266,
 /*  1590 */   384,  229,  428,  334,  428,  357,  381,  428,   98,  245,
 /*  1600 */   246,  266,  428,  428,  369,  390,  119,  428,  428,  368,
 /*  1610 */   367,  428,  428,  428,  387,  428,  384,  428,  246,  266,
 /*  1620 */   428,  357,  246,  266,  310,  428,  428,  428,  246,  266,
 /*  1630 */   369,  390,  384,  301,  428,  368,  367,  357,  246,  266,
 /*  1640 */   387,  428,  246,  266,  246,  266,  369,  390,  428,  428,
 /*  1650 */   428,  368,  367,  428,  428,  428,  387,  428,  428,  428,
 /*  1660 */   246,  266,  428,  229,  428,  334,  428,  428,  381,  428,
 /*  1670 */    94,  428,  428,  428,  428,  428,  309,  428,  306,  428,
 /*  1680 */   229,  428,  334,  428,  428,  381,  428,  101,  308,  304,
 /*  1690 */   249,  259,  428,  122,  428,  428,  428,  428,  428,  428,
 /*  1700 */   428,  428,  428,  428,  384,  428,  229,  428,  334,  357,
 /*  1710 */   428,  381,  428,  102,  428,  428,  428,  428,  369,  390,
 /*  1720 */   428,  384,  428,  368,  367,  428,  357,  428,  387,  428,
 /*  1730 */   428,  428,  246,  266,  428,  369,  390,  229,  428,  334,
 /*  1740 */   368,  367,  381,  428,  104,  387,  428,  384,  428,  246,
 /*  1750 */   266,  428,  357,  428,  428,  428,  428,  428,  428,  428,
 /*  1760 */   428,  369,  390,  229,  428,  334,  368,  367,  381,  428,
 /*  1770 */    89,  387,  428,  428,  428,  246,  266,  428,  384,  428,
 /*  1780 */   428,  428,  428,  357,  428,  428,  428,  428,  428,  428,
 /*  1790 */   428,  428,  369,  390,  229,  428,  334,  368,  367,  381,
 /*  1800 */   428,   85,  387,  428,  384,  428,  246,  266,  428,  357,
 /*  1810 */   428,  428,  428,  428,  428,  428,  428,  428,  369,  390,
 /*  1820 */   229,  428,  334,  368,  367,  381,  428,  103,  387,  428,
 /*  1830 */   428,  428,  246,  266,  428,  384,  428,  229,  428,  334,
 /*  1840 */   357,  428,  381,  428,   88,  428,  428,  428,  428,  369,
 /*  1850 */   390,  428,  428,  428,  368,  367,  428,  428,  428,  387,
 /*  1860 */   428,  384,  428,  246,  266,  428,  357,  229,  428,  334,
 /*  1870 */   428,  428,  381,  428,   99,  369,  390,  428,  384,  428,
 /*  1880 */   368,  367,  428,  357,  428,  387,  428,  428,  428,  246,
 /*  1890 */   266,  428,  369,  390,  229,  428,  334,  368,  367,  381,
 /*  1900 */   428,   79,  387,  428,  428,  428,  246,  266,  384,  428,
 /*  1910 */   428,  428,  428,  357,  428,  428,  428,  428,  428,  428,
 /*  1920 */   428,  428,  369,  390,  229,  428,  334,  368,  367,  381,
 /*  1930 */   428,   93,  387,  428,  428,  384,  246,  266,  428,  428,
 /*  1940 */   357,  428,  428,  428,  428,  428,  428,  428,  428,  369,
 /*  1950 */   390,  428,  428,  428,  368,  367,  428,  428,  428,  387,
 /*  1960 */   428,  428,  428,  246,  266,  384,  229,  428,  334,  428,
 /*  1970 */   357,  381,  428,   87,  428,  428,  428,  428,  428,  369,
 /*  1980 */   390,  428,  428,  428,  368,  367,  428,  428,  428,  387,
 /*  1990 */   428,  428,  428,  246,  266,  428,  428,  229,  428,  334,
 /*  2000 */   428,  428,  381,  428,   83,  428,  428,  384,  428,  229,
 /*  2010 */   428,  334,  357,  428,  381,  428,  107,  428,  428,  428,
 /*  2020 */   428,  369,  390,  428,  428,  428,  368,  367,  428,  428,
 /*  2030 */   428,  387,  428,  428,  428,  246,  266,  428,  384,  229,
 /*  2040 */   428,  334,  428,  357,  381,  428,   92,  428,  428,  428,
 /*  2050 */   384,  428,  369,  390,  428,  357,  428,  368,  367,  428,
 /*  2060 */   428,  428,  387,  428,  369,  390,  246,  266,  428,  368,
 /*  2070 */   367,  229,  265,  122,  387,  428,  381,  428,  246,  266,
 /*  2080 */   384,  428,  428,  428,  428,  357,  245,  428,  428,  428,
 /*  2090 */   428,  428,  428,  428,  369,  390,  428,  229,  428,  368,
 /*  2100 */   367,  428,  381,  428,  387,  428,  428,  428,  246,  266,
 /*  2110 */   428,  310,  384,  428,  428,  428,  428,  395,  428,  428,
 /*  2120 */   301,  428,  428,  428,  428,  428,  428,  390,  229,  428,
 /*  2130 */   334,  428,  428,  381,  428,   91,  387,  428,  384,  428,
 /*  2140 */   246,  266,  428,  240,  428,  428,  428,  428,  428,  428,
 /*  2150 */   428,  428,  428,  390,  428,  428,  428,  428,   55,  428,
 /*  2160 */   428,  428,  387,  309,  428,  306,  246,  266,  428,  384,
 /*  2170 */   428,  428,  428,  428,  357,  308,  304,  249,  259,  428,
 /*  2180 */   122,  428,  428,  369,  390,  428,  428,  428,  368,  367,
 /*  2190 */   428,  428,  428,  387,  428,  428,  428,  246,  266,
    );
    static public $yy_lookahead = array(
 /*     0 */     3,    4,    5,   69,   70,   71,   72,   73,   40,   41,
 /*    10 */    76,  151,   15,   16,  134,   18,  136,   49,  130,   42,
 /*    20 */    52,  133,   25,  135,    1,    2,    3,   40,   41,    6,
 /*    30 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*    40 */    43,   18,   19,   20,    7,    8,   70,   71,   72,   52,
 /*    50 */    73,   14,   25,   56,   57,   58,   59,   60,   61,   62,
 /*    60 */    63,   64,   65,   66,   38,  121,   43,  189,   26,   42,
 /*    70 */    44,   45,   46,   50,  196,   52,  132,   51,  130,   40,
 /*    80 */   132,  130,   55,  135,   40,  137,   91,  199,  200,   31,
 /*    90 */    93,   81,   95,   96,   97,   32,   33,  100,   40,   41,
 /*   100 */   103,    3,    4,    5,  107,  108,  109,  110,   50,  112,
 /*   110 */    68,  163,   85,   15,   16,   48,   18,   26,   95,  171,
 /*   120 */    97,   98,   99,   25,  176,  174,  175,   39,   40,   41,
 /*   130 */   107,  108,    3,  185,  186,   98,   99,  189,  190,  191,
 /*   140 */    52,   43,   75,  195,  130,  197,  130,  199,  200,  135,
 /*   150 */    52,  135,   68,   55,  138,    1,    2,    3,   25,   68,
 /*   160 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   170 */    16,   96,   18,   19,   20,   37,   48,    3,    4,    5,
 /*   180 */    18,   19,   20,  169,  170,  171,  121,   49,  172,   15,
 /*   190 */    16,   93,   18,   95,   96,   97,   68,  132,  100,   25,
 /*   200 */    26,  103,   31,   32,   33,  107,  108,  109,  110,   43,
 /*   210 */   112,   43,  140,  199,  200,  199,  200,   43,   50,   87,
 /*   220 */    52,  148,   26,   53,   54,   96,   52,   94,  155,  156,
 /*   230 */    92,  158,  167,   79,   80,   79,   80,  114,  115,  116,
 /*   240 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*   250 */   127,  128,   98,   99,  131,  130,  155,  156,   25,  158,
 /*   260 */    98,   99,   26,   95,   68,   97,  130,   93,  167,   95,
 /*   270 */    96,   97,   67,   68,  100,  107,  108,  103,    3,  132,
 /*   280 */    52,  107,  108,  109,  110,  160,  112,  164,    1,    2,
 /*   290 */     3,  165,   25,    6,    7,    8,    9,   10,   11,   12,
 /*   300 */    13,   14,   15,   16,   68,   18,   19,   20,  130,    3,
 /*   310 */     4,    5,   26,  135,   39,  189,  138,  181,   43,   43,
 /*   320 */   130,   15,   16,  130,   18,  130,   50,  140,   52,  142,
 /*   330 */   135,   25,  185,    1,    2,    3,  189,  130,    6,    7,
 /*   340 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   43,
 /*   350 */    18,   19,   20,  160,   68,   68,   68,  130,   52,  132,
 /*   360 */   133,  121,  135,   25,  169,  170,  171,  160,   55,   82,
 /*   370 */    95,   95,   97,   97,   83,  149,   25,  199,  200,  182,
 /*   380 */   153,  154,   50,  107,  108,   98,   99,  130,  147,  199,
 /*   390 */     4,    5,  135,   55,  199,  200,  173,  179,  144,   93,
 /*   400 */    24,   95,   96,   97,   18,   68,  100,    6,   28,  103,
 /*   410 */     3,    4,    5,  107,  108,  109,  110,   25,  112,  130,
 /*   420 */    84,   43,   15,   16,  135,   18,  199,  200,   68,   43,
 /*   430 */    98,   99,   25,   68,    1,    2,    3,   26,   52,    6,
 /*   440 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   450 */    43,   18,   19,   20,   26,  130,  199,  200,  111,   52,
 /*   460 */   135,    1,    2,    3,   37,  130,    6,    7,    8,    9,
 /*   470 */    10,   11,   12,   13,   14,   15,   16,   78,   18,   19,
 /*   480 */    20,   95,   26,   97,  187,  188,   26,   35,  199,  200,
 /*   490 */   193,  102,   26,  107,  108,  109,  110,   94,  112,   40,
 /*   500 */    93,   50,   95,   96,   97,   31,   93,  100,   37,   93,
 /*   510 */   103,   67,   40,  130,  107,  108,  109,  110,  135,  112,
 /*   520 */    26,  130,  187,  188,  199,  200,  135,   26,  193,  138,
 /*   530 */   130,   98,   99,   40,   69,  135,   41,  183,  138,  106,
 /*   540 */   116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*   550 */   126,  127,  128,  170,  171,  131,  104,  105,   98,   99,
 /*   560 */     1,    2,    3,   78,   48,    6,    7,    8,    9,   10,
 /*   570 */    11,   12,   13,   14,   15,   16,   93,   18,   19,   20,
 /*   580 */   157,  194,  199,  200,  129,  139,  129,  105,  164,  146,
 /*   590 */   199,  200,  186,  183,   35,  166,    1,    2,    3,  199,
 /*   600 */   200,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   610 */    15,   16,   25,   18,   19,   20,    1,    2,    3,  139,
 /*   620 */   189,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   630 */    15,   16,   48,   18,   19,   20,    1,    2,    3,  166,
 /*   640 */   143,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   650 */    15,   16,   25,   18,   19,   20,  143,   98,   99,    1,
 /*   660 */     2,    3,   76,  142,    6,    7,    8,    9,   10,   11,
 /*   670 */    12,   13,   14,   15,   16,   77,   18,   19,   20,  180,
 /*   680 */   130,   25,   25,  130,  130,  201,  130,  130,  130,  129,
 /*   690 */   184,  130,  130,   98,   99,  133,  130,  135,  130,  130,
 /*   700 */   193,  106,  150,  140,  139,  141,  151,   74,  159,  186,
 /*   710 */   159,  101,   96,   98,   99,  148,  143,  143,  143,  148,
 /*   720 */   150,  192,  150,  108,  147,  202,  202,  151,  202,  202,
 /*   730 */   168,  202,  202,   98,   99,    1,    2,    3,  202,  202,
 /*   740 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   750 */    16,  202,   18,   19,   20,  202,   98,   99,    1,    2,
 /*   760 */     3,  199,  200,    6,    7,    8,    9,   10,   11,   12,
 /*   770 */    13,   14,   15,   16,  202,   18,   19,   20,    2,    3,
 /*   780 */   202,  202,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   790 */    14,   15,   16,  202,   18,   19,   20,  202,    3,  202,
 /*   800 */   202,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   810 */    15,   16,  202,   18,   19,   20,    6,    7,    8,    9,
 /*   820 */    10,   11,   12,   13,   14,   15,   16,  202,   18,   19,
 /*   830 */    20,  202,   98,   99,  202,  202,  202,  202,  202,  202,
 /*   840 */   202,  202,  202,  202,  202,  130,  202,  132,  202,  202,
 /*   850 */   135,  202,  137,  202,  202,   98,   99,  202,   25,   25,
 /*   860 */   145,   27,   28,   29,   30,  202,  202,  152,   34,   35,
 /*   870 */    36,  202,   38,  202,   98,   99,   43,  202,  130,  202,
 /*   880 */   202,   47,  202,  135,  202,   52,  171,  202,  202,   55,
 /*   890 */   202,  176,  130,   98,   99,  202,  202,  135,    4,    5,
 /*   900 */   185,  186,  202,  202,  202,  190,  191,  202,   98,   99,
 /*   910 */   195,  202,   18,  198,  199,  200,  202,  202,  202,  171,
 /*   920 */    86,   87,   88,   89,  202,  177,  178,  202,   95,  202,
 /*   930 */    97,  202,   38,   39,   40,  202,   42,   43,    4,    5,
 /*   940 */   107,  108,  202,   49,  121,  202,   52,  199,  200,   15,
 /*   950 */    16,  202,   18,  130,  202,  132,  202,  202,  135,  202,
 /*   960 */   137,  199,  200,  202,  116,  117,  118,  119,  120,  121,
 /*   970 */   122,  123,  124,  125,  126,  127,  128,   43,  202,  131,
 /*   980 */   202,  202,  202,  202,  202,  202,   52,  202,  202,   95,
 /*   990 */   202,   97,  202,  130,  171,  132,  133,  202,  135,  176,
 /*  1000 */   202,  107,  108,  109,  110,  202,  112,  202,  185,  186,
 /*  1010 */   202,  202,  164,  190,  191,  202,  153,  154,  195,  202,
 /*  1020 */   197,  202,  199,  200,  202,  202,  202,   93,  130,   95,
 /*  1030 */    96,   97,  202,  135,    4,    5,  121,  202,  202,  202,
 /*  1040 */   202,  107,  108,  109,  110,  130,  112,  132,   18,  202,
 /*  1050 */   135,  130,  137,  132,  133,   18,  135,  202,  202,  202,
 /*  1060 */    39,   40,  199,  200,   43,  202,  202,  202,  202,   39,
 /*  1070 */    40,  202,  202,   43,  153,  154,   55,  202,  202,   49,
 /*  1080 */    43,  202,   52,  202,  202,  202,  171,  202,   67,   52,
 /*  1090 */   202,  176,  202,  202,  202,  202,  202,  199,  200,  202,
 /*  1100 */   185,  186,   81,   82,  202,  190,  191,  202,   87,   88,
 /*  1110 */   195,  202,  197,  202,  199,  200,   95,  130,   97,  132,
 /*  1120 */   199,  200,  135,  202,  137,   95,  202,   97,  202,  108,
 /*  1130 */   202,  202,   95,  202,   97,  202,  202,  107,  108,  109,
 /*  1140 */   110,  202,  112,  202,  107,  108,  202,  202,  161,  162,
 /*  1150 */   202,  202,  202,  202,  130,  202,  132,  202,  171,  135,
 /*  1160 */   202,  137,  202,  176,  202,  130,  202,  132,  133,  202,
 /*  1170 */   135,  202,  185,  186,  202,  130,  202,  190,  191,  202,
 /*  1180 */   135,  202,  195,  202,  202,  202,  199,  200,  202,  154,
 /*  1190 */   202,  202,  202,  202,  130,  171,  132,  133,  202,  135,
 /*  1200 */   176,  130,  202,  132,  202,  202,  135,  202,  137,  185,
 /*  1210 */   186,  202,  202,  202,  190,  191,  171,  202,  154,  195,
 /*  1220 */   202,  176,  198,  199,  200,  202,  202,  121,  202,  202,
 /*  1230 */   202,  186,  202,  162,  199,  200,  130,  202,  132,  202,
 /*  1240 */   195,  135,  171,  137,  199,  200,  202,  176,  130,  202,
 /*  1250 */   132,  202,  202,  135,  202,  137,  185,  186,   43,  202,
 /*  1260 */   202,  190,  191,  199,  200,  202,  195,   52,  202,  202,
 /*  1270 */   199,  200,  202,  130,  202,  132,  202,  171,  135,  130,
 /*  1280 */   137,  202,  176,  202,  135,  202,  202,  202,  202,  171,
 /*  1290 */   130,  185,  186,  202,  176,  135,  190,  191,  138,  202,
 /*  1300 */   202,  195,  202,  185,  186,  199,  200,  202,  190,  191,
 /*  1310 */    95,  202,   97,  195,  171,  197,  202,  199,  200,  176,
 /*  1320 */   171,  202,  107,  108,  202,  202,  202,  178,  185,  186,
 /*  1330 */   202,  202,  130,  190,  191,  202,  202,  135,  195,  130,
 /*  1340 */   202,  132,  199,  200,  135,  202,  137,  202,  199,  200,
 /*  1350 */   130,  202,  132,  130,  202,  135,  202,  137,  135,  199,
 /*  1360 */   200,  202,  202,  202,  202,  130,  202,  132,  133,  202,
 /*  1370 */   135,  202,  130,  171,  132,  202,  202,  135,  176,  137,
 /*  1380 */   171,  202,  202,  202,  202,  176,  202,  202,  186,  154,
 /*  1390 */   202,  171,    6,  202,  185,  186,  176,  195,  202,  190,
 /*  1400 */   191,  199,  200,  202,  195,  185,  186,  202,  199,  200,
 /*  1410 */   190,  191,  202,  171,  202,  195,  202,  202,  176,  199,
 /*  1420 */   200,  202,  199,  200,  202,  202,  202,  185,  186,   43,
 /*  1430 */   202,  202,  190,  191,  199,  200,  202,  195,   52,  202,
 /*  1440 */   202,  199,  200,  202,  130,  202,  132,  202,  202,  135,
 /*  1450 */   202,  137,  202,  202,  202,  202,  202,  202,  130,  202,
 /*  1460 */   130,  133,  132,  135,  202,  135,  202,  137,  202,  202,
 /*  1470 */   130,  202,  202,  202,  202,  135,  202,  130,  202,  132,
 /*  1480 */   202,   95,  135,   97,  137,  171,  202,  202,  202,  202,
 /*  1490 */   176,  202,  202,  107,  108,  202,  168,  202,  130,  185,
 /*  1500 */   186,  171,  202,  135,  190,  191,  176,  202,  202,  195,
 /*  1510 */   202,  202,  202,  199,  200,  185,  186,  202,  171,  130,
 /*  1520 */   190,  191,  202,  176,  135,  195,  202,  199,  200,  199,
 /*  1530 */   200,  130,  185,  186,  202,  202,  135,  190,  191,  199,
 /*  1540 */   200,  202,  195,  202,  202,  202,  199,  200,  202,  130,
 /*  1550 */   202,  132,  202,  130,  135,  202,  137,  202,  135,  130,
 /*  1560 */   202,  202,  202,  202,  135,  202,  202,  199,  200,  130,
 /*  1570 */   202,  202,  202,  130,  135,  130,  202,  132,  135,  202,
 /*  1580 */   135,  202,  137,  202,  202,    4,    5,  202,  199,  200,
 /*  1590 */   171,  130,  202,  132,  202,  176,  135,  202,  137,   18,
 /*  1600 */   199,  200,  202,  202,  185,  186,   25,  202,  202,  190,
 /*  1610 */   191,  202,  202,  202,  195,  202,  171,  202,  199,  200,
 /*  1620 */   202,  176,  199,  200,   43,  202,  202,  202,  199,  200,
 /*  1630 */   185,  186,  171,   52,  202,  190,  191,  176,  199,  200,
 /*  1640 */   195,  202,  199,  200,  199,  200,  185,  186,  202,  202,
 /*  1650 */   202,  190,  191,  202,  202,  202,  195,  202,  202,  202,
 /*  1660 */   199,  200,  202,  130,  202,  132,  202,  202,  135,  202,
 /*  1670 */   137,  202,  202,  202,  202,  202,   95,  202,   97,  202,
 /*  1680 */   130,  202,  132,  202,  202,  135,  202,  137,  107,  108,
 /*  1690 */   109,  110,  202,  112,  202,  202,  202,  202,  202,  202,
 /*  1700 */   202,  202,  202,  202,  171,  202,  130,  202,  132,  176,
 /*  1710 */   202,  135,  202,  137,  202,  202,  202,  202,  185,  186,
 /*  1720 */   202,  171,  202,  190,  191,  202,  176,  202,  195,  202,
 /*  1730 */   202,  202,  199,  200,  202,  185,  186,  130,  202,  132,
 /*  1740 */   190,  191,  135,  202,  137,  195,  202,  171,  202,  199,
 /*  1750 */   200,  202,  176,  202,  202,  202,  202,  202,  202,  202,
 /*  1760 */   202,  185,  186,  130,  202,  132,  190,  191,  135,  202,
 /*  1770 */   137,  195,  202,  202,  202,  199,  200,  202,  171,  202,
 /*  1780 */   202,  202,  202,  176,  202,  202,  202,  202,  202,  202,
 /*  1790 */   202,  202,  185,  186,  130,  202,  132,  190,  191,  135,
 /*  1800 */   202,  137,  195,  202,  171,  202,  199,  200,  202,  176,
 /*  1810 */   202,  202,  202,  202,  202,  202,  202,  202,  185,  186,
 /*  1820 */   130,  202,  132,  190,  191,  135,  202,  137,  195,  202,
 /*  1830 */   202,  202,  199,  200,  202,  171,  202,  130,  202,  132,
 /*  1840 */   176,  202,  135,  202,  137,  202,  202,  202,  202,  185,
 /*  1850 */   186,  202,  202,  202,  190,  191,  202,  202,  202,  195,
 /*  1860 */   202,  171,  202,  199,  200,  202,  176,  130,  202,  132,
 /*  1870 */   202,  202,  135,  202,  137,  185,  186,  202,  171,  202,
 /*  1880 */   190,  191,  202,  176,  202,  195,  202,  202,  202,  199,
 /*  1890 */   200,  202,  185,  186,  130,  202,  132,  190,  191,  135,
 /*  1900 */   202,  137,  195,  202,  202,  202,  199,  200,  171,  202,
 /*  1910 */   202,  202,  202,  176,  202,  202,  202,  202,  202,  202,
 /*  1920 */   202,  202,  185,  186,  130,  202,  132,  190,  191,  135,
 /*  1930 */   202,  137,  195,  202,  202,  171,  199,  200,  202,  202,
 /*  1940 */   176,  202,  202,  202,  202,  202,  202,  202,  202,  185,
 /*  1950 */   186,  202,  202,  202,  190,  191,  202,  202,  202,  195,
 /*  1960 */   202,  202,  202,  199,  200,  171,  130,  202,  132,  202,
 /*  1970 */   176,  135,  202,  137,  202,  202,  202,  202,  202,  185,
 /*  1980 */   186,  202,  202,  202,  190,  191,  202,  202,  202,  195,
 /*  1990 */   202,  202,  202,  199,  200,  202,  202,  130,  202,  132,
 /*  2000 */   202,  202,  135,  202,  137,  202,  202,  171,  202,  130,
 /*  2010 */   202,  132,  176,  202,  135,  202,  137,  202,  202,  202,
 /*  2020 */   202,  185,  186,  202,  202,  202,  190,  191,  202,  202,
 /*  2030 */   202,  195,  202,  202,  202,  199,  200,  202,  171,  130,
 /*  2040 */   202,  132,  202,  176,  135,  202,  137,  202,  202,  202,
 /*  2050 */   171,  202,  185,  186,  202,  176,  202,  190,  191,  202,
 /*  2060 */   202,  202,  195,  202,  185,  186,  199,  200,  202,  190,
 /*  2070 */   191,  130,    4,    5,  195,  202,  135,  202,  199,  200,
 /*  2080 */   171,  202,  202,  202,  202,  176,   18,  202,  202,  202,
 /*  2090 */   202,  202,  202,  202,  185,  186,  202,  130,  202,  190,
 /*  2100 */   191,  202,  135,  202,  195,  202,  202,  202,  199,  200,
 /*  2110 */   202,   43,  171,  202,  202,  202,  202,  176,  202,  202,
 /*  2120 */    52,  202,  202,  202,  202,  202,  202,  186,  130,  202,
 /*  2130 */   132,  202,  202,  135,  202,  137,  195,  202,  171,  202,
 /*  2140 */   199,  200,  202,  176,  202,  202,  202,  202,  202,  202,
 /*  2150 */   202,  202,  202,  186,  202,  202,  202,  202,   90,  202,
 /*  2160 */   202,  202,  195,   95,  202,   97,  199,  200,  202,  171,
 /*  2170 */   202,  202,  202,  202,  176,  107,  108,  109,  110,  202,
 /*  2180 */   112,  202,  202,  185,  186,  202,  202,  202,  190,  191,
 /*  2190 */   202,  202,  202,  195,  202,  202,  202,  199,  200,
);
    const YY_SHIFT_USE_DFLT = -67;
    const YY_SHIFT_MAX = 234;
    static public $yy_shift_ofst = array(
 /*     0 */   834,   -3,  407,   98,   98,  306,  834,  834,  174,   98,
 /*    10 */   306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
 /*    20 */   306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
 /*    30 */   306,  306,  306,  306,  306,  306,  306,  306,  306,  934,
 /*    40 */   934,  934,  934, 1581, 1581, 1581, 1581, 1581, 1581,  386,
 /*    50 */   386,  386, 1030, 2068,  386,  386,  386,  894, 1030, 1030,
 /*    60 */  1030,  386,   23,  386,  386,  386,  386,  386,  386,  386,
 /*    70 */   386,  386,  386,  386,  386,  386,  386,  -66,  -23,  287,
 /*    80 */   154,  615,  460,  559,  332,  433,  460,  595,  635,  635,
 /*    90 */   757,  635,  635,  658,  635,  635,  635,  635,  635,  734,
 /*   100 */   635,  635,  635,  776,  795,  795,  795,  810, 1215,  162,
 /*   110 */    27,  656,  833, 1037, 1215, 1215, 1215,   26,  -32,  338,
 /*   120 */   657,  587, 1021,  168,  276, 1386, 1215, 1215, 1215, 1215,
 /*   130 */  1215, 1215, 1215,   37,  275,   88,   58,  171,  138,  170,
 /*   140 */   156,   63,  170,  170,   63,  129,  205,  128,  133,   67,
 /*   150 */   587,  584,  627,  627,  586,  598,   10,  610,  586,  598,
 /*   160 */    10,  633,  633,  627,   84,  598,  627,  616,  627,  482,
 /*   170 */   403,  351,   10,  228,  313,  291,  -67,  -67,  -67,  -67,
 /*   180 */   -24,  452,  286,  -13,   42,   91,  196,  236,  288,  267,
 /*   190 */   233,   75,   39,   -5,   44,   84,  166,  132,  337,  516,
 /*   200 */   401,  459,  451,  474,  337,  413,  471,  416,   84,  444,
 /*   210 */   494,  501,  493,  495,  376,  485,  465,  483,  472,  399,
 /*   220 */   466,  380,  336,  378,  360,  365,  411,  392,  428,  347,
 /*   230 */   427,  456,  389,  347,  411,
);
    const YY_REDUCE_USE_DFLT = -141;
    const YY_REDUCE_MAX = 179;
    static public $yy_reduce_ofst = array(
 /*     0 */   123,  715,  -52,  823,  915,  987,  424,  848, 1118, 1106,
 /*    10 */  1071, 1024, 1118, 1242, 1533, 1550, 1764, 1867, 1220, 1330,
 /*    20 */  1909, 1836, 1419, 1633, 1143, 1461, 1664, 1576, 1209, 1347,
 /*    30 */  1314, 1737, 1707, 1998, 1879, 1794, 1690, 1607, 1445, 1045,
 /*    40 */  1202, 1941, 1967,  227,  863,  921, 1035, 1064, 1235,   14,
 /*    50 */   195,  748,   16,  562, 1149, 1328,  383, 1160,  400,  391,
 /*    60 */   178, -112,  335,  289,  325,  762,  898, 1223,  257, 1443,
 /*    70 */  1439, 1429, 1423, 1401, 1389, 1340, 1368,   73,  101,  297,
 /*    80 */   297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
 /*    90 */   297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
 /*   100 */   297,  297,  297,  297,  297,  297,  297,  297,  -49,  297,
 /*   110 */    65,  147,  125,  190,  136,  207,  193, -120,  187,  -56,
 /*   120 */  -122,  126,  484,  553,  554,  556,  557,  550,  558,  561,
 /*   130 */   566,  568,  569,  507,  506,  563,  564,  560,  521,  480,
 /*   140 */   499,  455,  565,  446,  457,  406,  443,  429,  410,  423,
 /*   150 */   431,  473,  497,  513,  567,  552,  576,  529,  571,  570,
 /*   160 */   555,  549,  551,  575,  577,  572,  574,  523,  573,  387,
 /*   170 */   354,  218, -140,   72,  240,  226,  197,  241,  223,  254,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 1 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 2 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 3 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 55, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 4 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 55, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 5 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 6 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 7 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 8 */ array(3, 4, 5, 15, 16, 18, 25, 26, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 9 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 55, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 10 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 11 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 12 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 13 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 14 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 15 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 16 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 17 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 18 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 19 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 20 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 21 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 22 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 23 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 24 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 25 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 26 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 27 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 28 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 29 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 30 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 31 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 32 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 33 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 34 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 35 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 36 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 37 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 38 */ array(3, 4, 5, 15, 16, 18, 25, 43, 52, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 112, ),
        /* 39 */ array(4, 5, 15, 16, 18, 43, 52, 93, 95, 96, 97, 107, 108, 109, 110, 112, ),
        /* 40 */ array(4, 5, 15, 16, 18, 43, 52, 93, 95, 96, 97, 107, 108, 109, 110, 112, ),
        /* 41 */ array(4, 5, 15, 16, 18, 43, 52, 93, 95, 96, 97, 107, 108, 109, 110, 112, ),
        /* 42 */ array(4, 5, 15, 16, 18, 43, 52, 93, 95, 96, 97, 107, 108, 109, 110, 112, ),
        /* 43 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 44 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 45 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 46 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 47 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 48 */ array(4, 5, 18, 25, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 49 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 50 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 51 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 52 */ array(4, 5, 18, 39, 40, 43, 49, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 53 */ array(4, 5, 18, 43, 52, 90, 95, 97, 107, 108, 109, 110, 112, ),
        /* 54 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 55 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 56 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 57 */ array(4, 5, 18, 38, 39, 40, 42, 43, 49, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 58 */ array(4, 5, 18, 39, 40, 43, 49, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 59 */ array(4, 5, 18, 39, 40, 43, 49, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 60 */ array(4, 5, 18, 39, 40, 43, 49, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 61 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 62 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 43, 50, 52, 95, 97, 98, 99, 107, 108, ),
        /* 63 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 64 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 65 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 66 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 67 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 68 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 69 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 70 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 71 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 72 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 73 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 74 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 75 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 76 */ array(4, 5, 18, 43, 52, 95, 97, 107, 108, 109, 110, 112, ),
        /* 77 */ array(69, 70, 71, 72, 73, 76, ),
        /* 78 */ array(42, 73, ),
        /* 79 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 68, 82, 98, 99, ),
        /* 80 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 79, 80, 98, 99, ),
        /* 81 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 108, ),
        /* 82 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, 99, ),
        /* 83 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 35, 98, 99, ),
        /* 84 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 50, 98, 99, ),
        /* 85 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 106, ),
        /* 86 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, 99, ),
        /* 87 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, 106, ),
        /* 88 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 89 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 90 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 91 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 92 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 93 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 94 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 95 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 96 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 97 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 98 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 99 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 100 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 101 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 102 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 103 */ array(2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 104 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 105 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 106 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 107 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 99, ),
        /* 108 */ array(43, 52, 95, 97, 107, 108, ),
        /* 109 */ array(18, 19, 20, 98, 99, ),
        /* 110 */ array(25, 42, 55, 85, ),
        /* 111 */ array(25, ),
        /* 112 */ array(25, 43, 52, 95, 97, 107, 108, ),
        /* 113 */ array(18, 43, 52, 95, 97, 107, 108, ),
        /* 114 */ array(43, 52, 95, 97, 107, 108, ),
        /* 115 */ array(43, 52, 95, 97, 107, 108, ),
        /* 116 */ array(43, 52, 95, 97, 107, 108, ),
        /* 117 */ array(38, 44, 45, 46, 51, ),
        /* 118 */ array(40, 41, 49, 52, ),
        /* 119 */ array(25, 55, ),
        /* 120 */ array(25, ),
        /* 121 */ array(25, ),
        /* 122 */ array(39, 40, 43, 55, 67, 81, 82, 87, 88, 95, 97, 108, ),
        /* 123 */ array(43, 50, 52, 95, 97, 107, 108, ),
        /* 124 */ array(43, 50, 52, 95, 97, 107, 108, ),
        /* 125 */ array(6, 43, 52, 95, 97, 107, 108, ),
        /* 126 */ array(43, 52, 95, 97, 107, 108, ),
        /* 127 */ array(43, 52, 95, 97, 107, 108, ),
        /* 128 */ array(43, 52, 95, 97, 107, 108, ),
        /* 129 */ array(43, 52, 95, 97, 107, 108, ),
        /* 130 */ array(43, 52, 95, 97, 107, 108, ),
        /* 131 */ array(43, 52, 95, 97, 107, 108, ),
        /* 132 */ array(43, 52, 95, 97, 107, 108, ),
        /* 133 */ array(7, 8, 14, 98, 99, ),
        /* 134 */ array(3, 39, 43, 95, 97, ),
        /* 135 */ array(39, 40, 41, 52, ),
        /* 136 */ array(31, 40, 41, 50, ),
        /* 137 */ array(31, 32, 33, ),
        /* 138 */ array(37, 49, 92, ),
        /* 139 */ array(53, 54, ),
        /* 140 */ array(79, 80, ),
        /* 141 */ array(32, 33, ),
        /* 142 */ array(53, 54, ),
        /* 143 */ array(53, 54, ),
        /* 144 */ array(32, 33, ),
        /* 145 */ array(3, 96, ),
        /* 146 */ array(67, 68, ),
        /* 147 */ array(48, 68, ),
        /* 148 */ array(25, 94, ),
        /* 149 */ array(48, 75, ),
        /* 150 */ array(25, ),
        /* 151 */ array(48, ),
        /* 152 */ array(25, ),
        /* 153 */ array(25, ),
        /* 154 */ array(76, ),
        /* 155 */ array(77, ),
        /* 156 */ array(81, ),
        /* 157 */ array(101, ),
        /* 158 */ array(76, ),
        /* 159 */ array(77, ),
        /* 160 */ array(81, ),
        /* 161 */ array(74, ),
        /* 162 */ array(74, ),
        /* 163 */ array(25, ),
        /* 164 */ array(68, ),
        /* 165 */ array(77, ),
        /* 166 */ array(25, ),
        /* 167 */ array(96, ),
        /* 168 */ array(25, ),
        /* 169 */ array(105, ),
        /* 170 */ array(94, ),
        /* 171 */ array(25, ),
        /* 172 */ array(81, ),
        /* 173 */ array(52, ),
        /* 174 */ array(55, ),
        /* 175 */ array(83, ),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(70, 71, 72, ),
        /* 181 */ array(35, 104, 105, ),
        /* 182 */ array(26, 68, ),
        /* 183 */ array(40, 41, ),
        /* 184 */ array(26, 68, ),
        /* 185 */ array(26, 68, ),
        /* 186 */ array(26, 68, ),
        /* 187 */ array(26, 68, ),
        /* 188 */ array(68, ),
        /* 189 */ array(25, ),
        /* 190 */ array(25, ),
        /* 191 */ array(96, ),
        /* 192 */ array(40, ),
        /* 193 */ array(91, ),
        /* 194 */ array(40, ),
        /* 195 */ array(68, ),
        /* 196 */ array(43, ),
        /* 197 */ array(87, ),
        /* 198 */ array(68, ),
        /* 199 */ array(48, ),
        /* 200 */ array(6, ),
        /* 201 */ array(40, ),
        /* 202 */ array(50, ),
        /* 203 */ array(31, ),
        /* 204 */ array(68, ),
        /* 205 */ array(93, ),
        /* 206 */ array(37, ),
        /* 207 */ array(93, ),
        /* 208 */ array(68, ),
        /* 209 */ array(67, ),
        /* 210 */ array(26, ),
        /* 211 */ array(26, ),
        /* 212 */ array(40, ),
        /* 213 */ array(41, ),
        /* 214 */ array(24, ),
        /* 215 */ array(78, ),
        /* 216 */ array(69, ),
        /* 217 */ array(93, ),
        /* 218 */ array(40, ),
        /* 219 */ array(78, ),
        /* 220 */ array(26, ),
        /* 221 */ array(28, ),
        /* 222 */ array(84, ),
        /* 223 */ array(43, ),
        /* 224 */ array(68, ),
        /* 225 */ array(68, ),
        /* 226 */ array(26, ),
        /* 227 */ array(25, ),
        /* 228 */ array(26, ),
        /* 229 */ array(111, ),
        /* 230 */ array(37, ),
        /* 231 */ array(26, ),
        /* 232 */ array(102, ),
        /* 233 */ array(111, ),
        /* 234 */ array(26, ),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
        /* 382 */ array(),
        /* 383 */ array(),
        /* 384 */ array(),
        /* 385 */ array(),
        /* 386 */ array(),
        /* 387 */ array(),
        /* 388 */ array(),
        /* 389 */ array(),
        /* 390 */ array(),
        /* 391 */ array(),
        /* 392 */ array(),
        /* 393 */ array(),
        /* 394 */ array(),
        /* 395 */ array(),
        /* 396 */ array(),
        /* 397 */ array(),
);
    static public $yy_default = array(
 /*     0 */   414,  622,  622,  622,  622,  622,  414,  414,  622,  622,
 /*    10 */   622,  622,  622,  612,  622,  622,  622,  622,  622,  622,
 /*    20 */   622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
 /*    30 */   622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
 /*    40 */   622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
 /*    50 */   622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
 /*    60 */   622,  622,  601,  622,  622,  622,  622,  622,  622,  622,
 /*    70 */   622,  622,  622,  622,  622,  622,  622,  479,  471,  488,
 /*    80 */   485,  622,  598,  622,  622,  622,  622,  622,  478,  597,
 /*    90 */   622,  491,  572,  553,  487,  554,  573,  598,  430,  622,
 /*   100 */   474,  509,  486,  544,  543,  545,  552,  548,  511,  551,
 /*   110 */   622,  622,  622,  622,  622,  622,  622,  622,  446,  622,
 /*   120 */   614,  622,  622,  622,  462,  622,  622,  622,  622,  622,
 /*   130 */   622,  622,  622,  622,  530,  446,  443,  422,  441,  449,
 /*   140 */   527,  422,  449,  449,  422,  566,  455,  505,  534,  477,
 /*   150 */   622,  505,  622,  622,  479,  481,  489,  622,  479,  481,
 /*   160 */   489,  473,  473,  622,  464,  481,  622,  622,  622,  622,
 /*   170 */   534,  529,  489,  446,  622,  492,  537,  464,  513,  452,
 /*   180 */   469,  622,  622,  622,  622,  622,  622,  622,  475,  622,
 /*   190 */   502,  622,  622,  622,  622,  454,  622,  622,  504,  622,
 /*   200 */   622,  622,  622,  622,  506,  622,  622,  622,  497,  622,
 /*   210 */   622,  622,  622,  622,  398,  622,  622,  622,  622,  622,
 /*   220 */   622,  622,  490,  622,  593,  480,  584,  622,  622,  582,
 /*   230 */   622,  622,  567,  616,  622,  518,  517,  429,  515,  516,
 /*   240 */   514,  605,  616,  512,  493,  617,  606,  465,  620,  607,
 /*   250 */   425,  586,  549,  437,  442,  450,  426,  444,  445,  608,
 /*   260 */   435,  439,  621,  619,  510,  618,  609,  494,  423,  428,
 /*   270 */   405,  412,  411,  410,  498,  409,  408,  407,  406,  404,
 /*   280 */   415,  499,  403,  402,  500,  401,  399,  503,  501,  413,
 /*   290 */   421,  495,  508,  427,  424,  436,  420,  419,  507,  418,
 /*   300 */   417,  615,  416,  594,  614,  595,  613,  496,  612,  611,
 /*   310 */   610,  550,  569,  562,  447,  451,  453,  600,  482,  431,
 /*   320 */   566,  432,  564,  603,  448,  563,  556,  519,  555,  596,
 /*   330 */   522,  591,  599,  602,  584,  467,  588,  460,  459,  476,
 /*   340 */   589,  604,  458,  466,  472,  484,  468,  470,  463,  592,
 /*   350 */   546,  456,  457,  483,  523,  590,  565,  559,  542,  570,
 /*   360 */   531,  561,  560,  532,  535,  433,  571,  558,  557,  547,
 /*   370 */   434,  461,  568,  438,  440,  541,  540,  525,  580,  526,
 /*   380 */   587,  585,  528,  524,  583,  581,  520,  579,  574,  521,
 /*   390 */   578,  577,  576,  536,  538,  575,  539,  400,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 203;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 398;
    const YYNRULE = 224;
    const YYERRORSYMBOL = 113;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_OR',          'T_AND',         'T_NOT',       
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_LIKE',      
  'T_GLOB',        'T_NE',          'T_GT',          'T_GE',        
  'T_LT',          'T_LE',          'T_IN',          'T_PLUS',      
  'T_MINUS',       'T_CONCAT',      'T_TIMES',       'T_DIV',       
  'T_MOD',         'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',
  'T_SEMICOLON',   'T_PAR_OPEN',    'T_PAR_CLOSE',   'T_BEGIN',     
  'T_SAVEPOINT',   'T_RELEASE',     'T_ROLLBACK',    'T_TO',        
  'T_TRANSACTION',  'T_WORK',        'T_COMMIT',      'T_END',       
  'T_ALTER',       'T_TABLE',       'T_DROP',        'T_PRIMARY',   
  'T_KEY',         'T_INDEX',       'T_SET',         'T_DEFAULT',   
  'T_MODIFY',      'T_ADD',         'T_RENAME',      'T_CREATE',    
  'T_ON',          'T_UNIQUE',      'T_AS',          'T_CHANGE',    
  'T_COLUMN',      'T_FIRST',       'T_AFTER',       'T_SELECT',    
  'T_ALL',         'T_DISTINCT',    'T_DISTINCTROW',  'T_HIGH_PRIORITY',
  'T_STRAIGHT_JOIN',  'T_SQL_SMALL_RESULT',  'T_SQL_BIG_RESULT',  'T_SQL_CACHE', 
  'T_SQL_CALC_FOUND_ROWS',  'T_SQL_BUFFER_RESULT',  'T_SQL_NO_CACHE',  'T_FROM',      
  'T_COMMA',       'T_JOIN',        'T_INNER',       'T_LEFT',      
  'T_RIGHT',       'T_NATURAL',     'T_OUTER',       'T_USING',     
  'T_WHERE',       'T_ORDER',       'T_BY',          'T_DESC',      
  'T_ASC',         'T_LIMIT',       'T_OFFSET',      'T_GROUP',     
  'T_HAVING',      'T_VALUES',      'T_DELETE',      'T_UPDATE',    
  'T_INSERT',      'REPLACE',       'T_INTO',        'T_DUPLICATE', 
  'T_VIEW',        'T_NUMBER',      'T_UNSIGNED',    'T_COLLATE',   
  'T_NULL',        'T_AUTO_INCREMENT',  'T_IS',          'T_BETWEEN',   
  'T_CAST',        'T_INTEGER',     'T_BINARY',      'T_CASE',      
  'T_ELSE',        'T_WHEN',        'T_THEN',        'T_INTERVAL',  
  'T_ALPHA',       'T_STRING1',     'T_STRING2',     'T_DOT',       
  'T_DOLLAR',      'error',         'query',         'stmts',       
  'stmt',          'begin',         'commit',        'rollback',    
  'drop',          'select',        'insert',        'update',      
  'delete',        'alter_table',   'create_table',  'create_index',
  'create_view',   'transaction_keyword',  'alpha',         'commit_keyword',
  'inner_select',  'table_name',    'alter_operation',  'colname',     
  'alter_change',  'expr',          'create_column',  'after',       
  'optional_column',  'to',            'index_type',    'index_list',  
  'select_opts',   'expr_list_as',  'from',          'joins',       
  'where',         'group_by',      'order_by',      'limit',       
  'select_mod',    'table_list',    'table_with_alias',  'join',        
  'join_type',     'join_condition',  'join_prefix',   'join_postfix',
  'columns',       'order_by_fields',  'order_by_field',  'expr_list_par_optional',
  'insert_stmt',   'expr_list_par_many',  'on_dup',        'set_expr',    
  'insert_table',  'set_expr_values',  'assign',        'term_colname',
  'create_fields',  'table_opts',    'table_opt',     'table_key',   
  'term',          'indexes',       'index_col_name',  'length',      
  'order',         'data_type',     'column_mods',   'unsigned',    
  'column_mod',    'term_select',   'null',          'negable',     
  'in',            'expr_list_par',  'cast',          'case',        
  'type',          'negable_expr',  'case_options',  'function_call',
  'expr_list_par_or_null',  'expr_list',     'expr_as',       'alpha_or_all',
  'variable',      'variable_name',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts T_SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= T_PAR_OPEN stmt T_PAR_CLOSE",
 /*   4 */ "stmt ::= begin",
 /*   5 */ "stmt ::= commit",
 /*   6 */ "stmt ::= rollback",
 /*   7 */ "stmt ::= drop",
 /*   8 */ "stmt ::= select",
 /*   9 */ "stmt ::= insert",
 /*  10 */ "stmt ::= update",
 /*  11 */ "stmt ::= delete",
 /*  12 */ "stmt ::= alter_table",
 /*  13 */ "stmt ::= create_table",
 /*  14 */ "stmt ::= create_index",
 /*  15 */ "stmt ::= create_view",
 /*  16 */ "stmt ::=",
 /*  17 */ "begin ::= T_BEGIN transaction_keyword",
 /*  18 */ "begin ::= T_SAVEPOINT alpha",
 /*  19 */ "commit ::= commit_keyword transaction_keyword",
 /*  20 */ "commit ::= T_RELEASE T_SAVEPOINT alpha",
 /*  21 */ "rollback ::= T_ROLLBACK transaction_keyword",
 /*  22 */ "rollback ::= T_ROLLBACK T_TO alpha",
 /*  23 */ "transaction_keyword ::= T_TRANSACTION|T_WORK",
 /*  24 */ "transaction_keyword ::=",
 /*  25 */ "commit_keyword ::= T_COMMIT",
 /*  26 */ "commit_keyword ::= T_END",
 /*  27 */ "inner_select ::= T_PAR_OPEN inner_select T_PAR_CLOSE",
 /*  28 */ "inner_select ::= T_PAR_OPEN select T_PAR_CLOSE",
 /*  29 */ "alter_table ::= T_ALTER T_TABLE table_name alter_operation",
 /*  30 */ "alter_operation ::= T_DROP T_PRIMARY T_KEY",
 /*  31 */ "alter_operation ::= T_DROP T_KEY|T_INDEX colname",
 /*  32 */ "alter_operation ::= alter_change T_SET T_DEFAULT expr",
 /*  33 */ "alter_operation ::= alter_change T_DROP T_DEFAULT",
 /*  34 */ "alter_operation ::= alter_change create_column after",
 /*  35 */ "alter_operation ::= T_MODIFY create_column after",
 /*  36 */ "alter_operation ::= T_ADD optional_column create_column after",
 /*  37 */ "alter_operation ::= T_DROP optional_column colname",
 /*  38 */ "alter_operation ::= T_RENAME to colname",
 /*  39 */ "alter_operation ::= T_RENAME T_KEY|T_INDEX colname T_TO colname",
 /*  40 */ "alter_operation ::= T_ADD index_type T_KEY|T_INDEX colname index_list",
 /*  41 */ "create_index ::= T_CREATE index_type T_INDEX colname T_ON colname index_list",
 /*  42 */ "index_type ::= T_UNIQUE",
 /*  43 */ "index_type ::=",
 /*  44 */ "to ::= T_TO|T_AS",
 /*  45 */ "to ::=",
 /*  46 */ "alter_change ::= T_CHANGE optional_column colname",
 /*  47 */ "optional_column ::= T_COLUMN",
 /*  48 */ "optional_column ::=",
 /*  49 */ "after ::= T_FIRST",
 /*  50 */ "after ::= T_AFTER colname",
 /*  51 */ "after ::=",
 /*  52 */ "select ::= T_SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  53 */ "select_opts ::= select_opts select_mod",
 /*  54 */ "select_opts ::=",
 /*  55 */ "select_mod ::= T_ALL|T_DISTINCT|T_DISTINCTROW|T_HIGH_PRIORITY|T_STRAIGHT_JOIN|T_SQL_SMALL_RESULT|T_SQL_BIG_RESULT|T_SQL_CACHE|T_SQL_CALC_FOUND_ROWS|T_SQL_BUFFER_RESULT|T_SQL_NO_CACHE",
 /*  56 */ "from ::= T_FROM table_list",
 /*  57 */ "from ::=",
 /*  58 */ "table_list ::= table_list T_COMMA table_with_alias",
 /*  59 */ "table_list ::= table_with_alias",
 /*  60 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  61 */ "table_with_alias ::= inner_select alpha",
 /*  62 */ "table_with_alias ::= table_name T_AS alpha",
 /*  63 */ "table_with_alias ::= table_name alpha",
 /*  64 */ "table_with_alias ::= table_name",
 /*  65 */ "joins ::= joins join",
 /*  66 */ "joins ::=",
 /*  67 */ "join ::= join_type T_JOIN table_with_alias join_condition",
 /*  68 */ "join_type ::= join_prefix T_INNER",
 /*  69 */ "join_type ::= join_prefix T_LEFT join_postfix",
 /*  70 */ "join_type ::= join_prefix T_RIGHT join_postfix",
 /*  71 */ "join_type ::= join_prefix",
 /*  72 */ "join_prefix ::= T_NATURAL",
 /*  73 */ "join_prefix ::=",
 /*  74 */ "join_postfix ::= T_OUTER",
 /*  75 */ "join_postfix ::=",
 /*  76 */ "join_condition ::= T_ON expr",
 /*  77 */ "join_condition ::= T_USING columns",
 /*  78 */ "join_condition ::= T_USING T_PAR_OPEN columns T_PAR_CLOSE",
 /*  79 */ "join_condition ::=",
 /*  80 */ "where ::= T_WHERE expr",
 /*  81 */ "where ::=",
 /*  82 */ "order_by ::= T_ORDER T_BY order_by_fields",
 /*  83 */ "order_by ::=",
 /*  84 */ "order_by_fields ::= order_by_fields T_COMMA order_by_field",
 /*  85 */ "order_by_fields ::= order_by_field",
 /*  86 */ "order_by_field ::= expr T_DESC|T_ASC",
 /*  87 */ "order_by_field ::= expr",
 /*  88 */ "limit ::= T_LIMIT expr T_OFFSET expr",
 /*  89 */ "limit ::= T_LIMIT expr T_COMMA expr",
 /*  90 */ "limit ::= T_LIMIT expr",
 /*  91 */ "limit ::=",
 /*  92 */ "group_by ::= T_GROUP T_BY expr_list_par_optional",
 /*  93 */ "group_by ::= T_GROUP T_BY expr_list_par_optional T_HAVING expr",
 /*  94 */ "group_by ::=",
 /*  95 */ "insert ::= insert_stmt select",
 /*  96 */ "insert ::= insert_stmt inner_select",
 /*  97 */ "insert ::= insert_stmt T_VALUES expr_list_par_many on_dup",
 /*  98 */ "insert ::= insert_stmt set_expr on_dup",
 /*  99 */ "drop ::= T_DROP T_TABLE table_list",
 /* 100 */ "delete ::= T_DELETE T_FROM table_with_alias where order_by limit",
 /* 101 */ "update ::= T_UPDATE table_list joins set_expr where order_by limit",
 /* 102 */ "insert_stmt ::= T_INSERT|REPLACE T_INTO insert_table",
 /* 103 */ "insert_stmt ::= T_INSERT|REPLACE insert_table",
 /* 104 */ "insert_table ::= table_name",
 /* 105 */ "insert_table ::= table_name T_PAR_OPEN columns T_PAR_CLOSE",
 /* 106 */ "on_dup ::= T_ON T_DUPLICATE T_KEY T_UPDATE set_expr_values",
 /* 107 */ "on_dup ::=",
 /* 108 */ "set_expr ::= T_SET set_expr_values",
 /* 109 */ "set_expr_values ::= set_expr_values T_COMMA assign",
 /* 110 */ "set_expr_values ::= assign",
 /* 111 */ "assign ::= term_colname T_EQ expr",
 /* 112 */ "create_view ::= T_CREATE T_VIEW colname T_AS select",
 /* 113 */ "create_table ::= T_CREATE T_TABLE colname T_PAR_OPEN create_fields T_PAR_CLOSE table_opts",
 /* 114 */ "table_opts ::= table_opts table_opt",
 /* 115 */ "table_opts ::=",
 /* 116 */ "table_opt ::= table_key T_EQ term",
 /* 117 */ "table_key ::= table_key alpha",
 /* 118 */ "table_key ::= alpha",
 /* 119 */ "create_fields ::= create_fields T_COMMA create_column",
 /* 120 */ "create_fields ::= create_column",
 /* 121 */ "create_column ::= T_PRIMARY T_KEY index_list",
 /* 122 */ "create_column ::= T_UNIQUE T_KEY colname index_list",
 /* 123 */ "create_column ::= T_KEY colname index_list",
 /* 124 */ "index_list ::= T_PAR_OPEN indexes T_PAR_CLOSE",
 /* 125 */ "indexes ::= indexes T_COMMA index_col_name",
 /* 126 */ "indexes ::= index_col_name",
 /* 127 */ "index_col_name ::= term_colname length order",
 /* 128 */ "order ::= T_DESC|T_ASC",
 /* 129 */ "order ::=",
 /* 130 */ "length ::= T_PAR_OPEN T_NUMBER T_PAR_CLOSE",
 /* 131 */ "length ::=",
 /* 132 */ "create_column ::= colname data_type column_mods",
 /* 133 */ "data_type ::= alpha unsigned",
 /* 134 */ "data_type ::= alpha T_PAR_OPEN T_NUMBER T_PAR_CLOSE unsigned",
 /* 135 */ "data_type ::= alpha T_PAR_OPEN T_NUMBER T_PAR_CLOSE unsigned",
 /* 136 */ "unsigned ::=",
 /* 137 */ "unsigned ::= T_UNSIGNED",
 /* 138 */ "column_mods ::= column_mods column_mod",
 /* 139 */ "column_mods ::=",
 /* 140 */ "column_mod ::= T_DEFAULT term",
 /* 141 */ "column_mod ::= T_COLLATE term",
 /* 142 */ "column_mod ::= T_PRIMARY T_KEY",
 /* 143 */ "column_mod ::= T_NOT T_NULL",
 /* 144 */ "column_mod ::= T_AUTO_INCREMENT",
 /* 145 */ "expr ::= expr T_AND expr",
 /* 146 */ "expr ::= expr T_OR expr",
 /* 147 */ "expr ::= T_NOT expr",
 /* 148 */ "expr ::= T_PAR_OPEN expr T_PAR_CLOSE",
 /* 149 */ "expr ::= term_select",
 /* 150 */ "expr ::= expr T_EQ|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /* 151 */ "expr ::= expr T_IS T_NOT null",
 /* 152 */ "expr ::= expr T_IS null",
 /* 153 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /* 154 */ "expr ::= expr T_NOT T_BETWEEN expr T_AND expr",
 /* 155 */ "expr ::= expr T_BETWEEN expr T_AND expr",
 /* 156 */ "expr ::= expr negable expr",
 /* 157 */ "expr ::= expr in term_select",
 /* 158 */ "expr ::= expr in expr_list_par",
 /* 159 */ "expr ::= cast",
 /* 160 */ "expr ::= case",
 /* 161 */ "expr ::= term",
 /* 162 */ "cast ::= T_CAST T_PAR_OPEN expr T_AS type T_PAR_CLOSE",
 /* 163 */ "type ::= T_INTEGER",
 /* 164 */ "in ::= T_IN",
 /* 165 */ "in ::= T_NOT T_IN",
 /* 166 */ "negable ::= T_NOT negable_expr",
 /* 167 */ "negable ::= negable_expr",
 /* 168 */ "negable_expr ::= T_IS",
 /* 169 */ "negable_expr ::= T_LIKE",
 /* 170 */ "negable_expr ::= T_LIKE T_BINARY",
 /* 171 */ "negable_expr ::= T_GLOB",
 /* 172 */ "case ::= T_CASE case_options T_END",
 /* 173 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /* 174 */ "case_options ::= case_options T_WHEN expr T_THEN expr",
 /* 175 */ "case_options ::= T_WHEN expr T_THEN expr",
 /* 176 */ "term ::= T_INTERVAL expr T_ALPHA",
 /* 177 */ "term ::= T_PLUS term",
 /* 178 */ "term ::= T_MINUS T_NUMBER",
 /* 179 */ "term ::= T_NUMBER",
 /* 180 */ "term ::= null",
 /* 181 */ "term ::= function_call",
 /* 182 */ "term ::= T_STRING1",
 /* 183 */ "term ::= T_STRING2",
 /* 184 */ "term ::= alpha",
 /* 185 */ "term ::= term_colname",
 /* 186 */ "term_select ::= inner_select",
 /* 187 */ "term_colname ::= colname",
 /* 188 */ "null ::= T_NULL",
 /* 189 */ "function_call ::= T_ALPHA expr_list_par_or_null",
 /* 190 */ "columns ::= columns T_COMMA alpha",
 /* 191 */ "columns ::= alpha",
 /* 192 */ "expr_list_par_or_null ::= expr_list_par",
 /* 193 */ "expr_list_par_or_null ::= T_PAR_OPEN T_PAR_CLOSE",
 /* 194 */ "expr_list_par_optional ::= expr_list_par",
 /* 195 */ "expr_list_par_optional ::= expr_list",
 /* 196 */ "expr_list_par_many ::= expr_list_par_many T_COMMA expr_list_par",
 /* 197 */ "expr_list_par_many ::= expr_list_par",
 /* 198 */ "expr_list_par ::= T_PAR_OPEN expr_list T_PAR_CLOSE",
 /* 199 */ "expr_list ::= expr_list T_COMMA expr",
 /* 200 */ "expr_list ::= expr",
 /* 201 */ "expr_list_as ::= expr_list_as T_COMMA expr_as",
 /* 202 */ "expr_list_as ::= expr_as",
 /* 203 */ "expr_as ::= expr",
 /* 204 */ "expr_as ::= expr T_AS alpha",
 /* 205 */ "expr_as ::= expr alpha",
 /* 206 */ "table_name ::= colname",
 /* 207 */ "colname ::= alpha T_DOT alpha_or_all",
 /* 208 */ "colname ::= alpha_or_all",
 /* 209 */ "colname ::= T_STRING1",
 /* 210 */ "colname ::= T_STRING2",
 /* 211 */ "colname ::= variable",
 /* 212 */ "alpha ::= T_DEFAULT",
 /* 213 */ "alpha ::= T_COLLATE",
 /* 214 */ "alpha ::= T_INTERVAL",
 /* 215 */ "alpha ::= T_AUTO_INCREMENT",
 /* 216 */ "alpha ::= T_ALPHA",
 /* 217 */ "alpha ::= T_COLUMN",
 /* 218 */ "alpha_or_all ::= alpha",
 /* 219 */ "alpha_or_all ::= T_TIMES",
 /* 220 */ "variable ::= T_QUESTION",
 /* 221 */ "variable ::= T_DOLLAR|T_COLON variable_name",
 /* 222 */ "variable_name ::= T_ALPHA",
 /* 223 */ "variable_name ::= T_LIMIT|T_INSERT|T_UPDATE|T_FROM|T_SELECT|T_COLLATE|T_AUTO_INCREMENT|T_DEFAULT|T_PRIMARY|T_OFFSET|T_KEY",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 3 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 3 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 0 ),
  array( 'lhs' => 117, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 0 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 132, 'rhs' => 3 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 4 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 5 ),
  array( 'lhs' => 134, 'rhs' => 5 ),
  array( 'lhs' => 127, 'rhs' => 7 ),
  array( 'lhs' => 142, 'rhs' => 1 ),
  array( 'lhs' => 142, 'rhs' => 0 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 0 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 0 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 0 ),
  array( 'lhs' => 121, 'rhs' => 9 ),
  array( 'lhs' => 144, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 0 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 0 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 0 ),
  array( 'lhs' => 155, 'rhs' => 4 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 0 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 0 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 2 ),
  array( 'lhs' => 157, 'rhs' => 4 ),
  array( 'lhs' => 157, 'rhs' => 0 ),
  array( 'lhs' => 148, 'rhs' => 2 ),
  array( 'lhs' => 148, 'rhs' => 0 ),
  array( 'lhs' => 150, 'rhs' => 3 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 161, 'rhs' => 3 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 151, 'rhs' => 4 ),
  array( 'lhs' => 151, 'rhs' => 4 ),
  array( 'lhs' => 151, 'rhs' => 2 ),
  array( 'lhs' => 151, 'rhs' => 0 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 5 ),
  array( 'lhs' => 149, 'rhs' => 0 ),
  array( 'lhs' => 122, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 4 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 120, 'rhs' => 3 ),
  array( 'lhs' => 124, 'rhs' => 6 ),
  array( 'lhs' => 123, 'rhs' => 7 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 4 ),
  array( 'lhs' => 166, 'rhs' => 5 ),
  array( 'lhs' => 166, 'rhs' => 0 ),
  array( 'lhs' => 167, 'rhs' => 2 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 169, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 7 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 173, 'rhs' => 0 ),
  array( 'lhs' => 174, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 143, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 177, 'rhs' => 1 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 1 ),
  array( 'lhs' => 180, 'rhs' => 0 ),
  array( 'lhs' => 179, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 0 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 5 ),
  array( 'lhs' => 181, 'rhs' => 5 ),
  array( 'lhs' => 183, 'rhs' => 0 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 182, 'rhs' => 2 ),
  array( 'lhs' => 182, 'rhs' => 0 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 2 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 6 ),
  array( 'lhs' => 137, 'rhs' => 5 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 6 ),
  array( 'lhs' => 192, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 191, 'rhs' => 3 ),
  array( 'lhs' => 191, 'rhs' => 5 ),
  array( 'lhs' => 194, 'rhs' => 5 ),
  array( 'lhs' => 194, 'rhs' => 4 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 2 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 3 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 3 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 3 ),
  array( 'lhs' => 198, 'rhs' => 2 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 199, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 1 ),
  array( 'lhs' => 200, 'rhs' => 2 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
  array( 'lhs' => 201, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        58 => 1,
        84 => 1,
        119 => 1,
        196 => 1,
        201 => 1,
        2 => 2,
        3 => 3,
        124 => 3,
        130 => 3,
        198 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        11 => 4,
        12 => 4,
        13 => 4,
        14 => 4,
        15 => 4,
        46 => 4,
        50 => 4,
        56 => 4,
        80 => 4,
        106 => 4,
        108 => 4,
        137 => 4,
        149 => 4,
        159 => 4,
        160 => 4,
        161 => 4,
        163 => 4,
        167 => 4,
        180 => 4,
        181 => 4,
        185 => 4,
        192 => 4,
        194 => 4,
        195 => 4,
        206 => 4,
        208 => 4,
        209 => 4,
        210 => 4,
        211 => 4,
        212 => 4,
        213 => 4,
        214 => 4,
        215 => 4,
        216 => 4,
        218 => 4,
        222 => 4,
        223 => 4,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        27 => 27,
        28 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        73 => 43,
        75 => 43,
        136 => 43,
        49 => 49,
        52 => 52,
        53 => 53,
        65 => 53,
        117 => 53,
        138 => 53,
        54 => 54,
        115 => 54,
        55 => 55,
        128 => 55,
        59 => 59,
        85 => 59,
        118 => 59,
        197 => 59,
        202 => 59,
        203 => 59,
        60 => 60,
        62 => 60,
        88 => 60,
        93 => 60,
        204 => 60,
        207 => 60,
        61 => 61,
        63 => 61,
        205 => 61,
        64 => 64,
        90 => 64,
        66 => 66,
        139 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        81 => 79,
        83 => 79,
        91 => 79,
        107 => 79,
        129 => 79,
        131 => 79,
        82 => 82,
        86 => 86,
        87 => 87,
        89 => 89,
        92 => 92,
        95 => 95,
        96 => 95,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        109 => 109,
        125 => 109,
        190 => 109,
        199 => 109,
        110 => 110,
        126 => 110,
        191 => 110,
        200 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        127 => 127,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 134,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        150 => 150,
        156 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        157 => 153,
        154 => 154,
        155 => 155,
        158 => 158,
        162 => 162,
        164 => 164,
        165 => 165,
        166 => 166,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 170,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        177 => 177,
        178 => 178,
        179 => 179,
        182 => 182,
        183 => 183,
        184 => 184,
        186 => 186,
        187 => 187,
        188 => 188,
        189 => 189,
        193 => 193,
        217 => 217,
        219 => 219,
        220 => 220,
        221 => 221,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2433 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2436 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 2439 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 2442 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2445 "src/SQLParser/Parser.php"
#line 49 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = null;     }
#line 2448 "src/SQLParser/Parser.php"
#line 51 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = new SQL\BeginTransaction;     }
#line 2451 "src/SQLParser/Parser.php"
#line 52 "src/SQLParser/Parser.y"
    function yy_r18(){ $this->_retvalue = new SQL\BeginTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2454 "src/SQLParser/Parser.php"
#line 53 "src/SQLParser/Parser.y"
    function yy_r19(){ $this->_retvalue = new SQL\CommitTransaction;     }
#line 2457 "src/SQLParser/Parser.php"
#line 54 "src/SQLParser/Parser.y"
    function yy_r20(){ $this->_retvalue = new SQL\CommitTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2460 "src/SQLParser/Parser.php"
#line 55 "src/SQLParser/Parser.y"
    function yy_r21(){ $this->_retvalue = new SQL\RollbackTransaction;     }
#line 2463 "src/SQLParser/Parser.php"
#line 56 "src/SQLParser/Parser.y"
    function yy_r22(){ $this->_retvalue = new SQL\RollbackTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2466 "src/SQLParser/Parser.php"
#line 65 "src/SQLParser/Parser.y"
    function yy_r27(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 2469 "src/SQLParser/Parser.php"
#line 68 "src/SQLParser/Parser.y"
    function yy_r29(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor->setTableName($this->yystack[$this->yyidx + -1]->minor);     }
#line 2472 "src/SQLParser/Parser.php"
#line 70 "src/SQLParser/Parser.y"
    function yy_r30(){ $this->_retvalue = new SQL\AlterTable\DropPrimaryKey;     }
#line 2475 "src/SQLParser/Parser.php"
#line 71 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = new SQL\AlterTable\DropIndex($this->yystack[$this->yyidx + 0]->minor);     }
#line 2478 "src/SQLParser/Parser.php"
#line 72 "src/SQLParser/Parser.y"
    function yy_r32(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2481 "src/SQLParser/Parser.php"
#line 73 "src/SQLParser/Parser.y"
    function yy_r33(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -2]->minor, NULL);     }
#line 2484 "src/SQLParser/Parser.php"
#line 74 "src/SQLParser/Parser.y"
    function yy_r34(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2487 "src/SQLParser/Parser.php"
#line 75 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -1]->minor->getName(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2490 "src/SQLParser/Parser.php"
#line 76 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = new SQL\AlterTable\AddColumn($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2493 "src/SQLParser/Parser.php"
#line 77 "src/SQLParser/Parser.y"
    function yy_r37(){ $this->_retvalue = new SQL\AlterTable\DropColumn($this->yystack[$this->yyidx + 0]->minor);     }
#line 2496 "src/SQLParser/Parser.php"
#line 78 "src/SQLParser/Parser.y"
    function yy_r38(){ $this->_retvalue = new SQL\AlterTable\RenameTable($this->yystack[$this->yyidx + 0]->minor);     }
#line 2499 "src/SQLParser/Parser.php"
#line 79 "src/SQLParser/Parser.y"
    function yy_r39(){ $this->_retvalue = new SQL\AlterTable\RenameIndex($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2502 "src/SQLParser/Parser.php"
#line 80 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2505 "src/SQLParser/Parser.php"
#line 82 "src/SQLParser/Parser.y"
    function yy_r41(){
    $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue->setTableName($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2511 "src/SQLParser/Parser.php"
#line 87 "src/SQLParser/Parser.y"
    function yy_r42(){ $this->_retvalue = 'UNIQUE';     }
#line 2514 "src/SQLParser/Parser.php"
#line 88 "src/SQLParser/Parser.y"
    function yy_r43(){ $this->_retvalue = '';     }
#line 2517 "src/SQLParser/Parser.php"
#line 98 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = TRUE;     }
#line 2520 "src/SQLParser/Parser.php"
#line 104 "src/SQLParser/Parser.y"
    function yy_r52(){
    $this->_retvalue = new SQL\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  {
        foreach ($this->yystack[$this->yyidx + -5]->minor as $table) {
            $this->_retvalue->from($table[0], $table[1]);
        }
    }
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2536 "src/SQLParser/Parser.php"
#line 119 "src/SQLParser/Parser.y"
    function yy_r53(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2539 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r54(){ $this->_retvalue = array();     }
#line 2542 "src/SQLParser/Parser.php"
#line 121 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = strtoupper($this->yystack[$this->yyidx + 0]->minor);     }
#line 2545 "src/SQLParser/Parser.php"
#line 127 "src/SQLParser/Parser.y"
    function yy_r59(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 2548 "src/SQLParser/Parser.php"
#line 129 "src/SQLParser/Parser.y"
    function yy_r60(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2551 "src/SQLParser/Parser.php"
#line 130 "src/SQLParser/Parser.y"
    function yy_r61(){ $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2554 "src/SQLParser/Parser.php"
#line 133 "src/SQLParser/Parser.y"
    function yy_r64(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];     }
#line 2557 "src/SQLParser/Parser.php"
#line 136 "src/SQLParser/Parser.y"
    function yy_r66(){ $this->_retvalue = [];     }
#line 2560 "src/SQLParser/Parser.php"
#line 138 "src/SQLParser/Parser.y"
    function yy_r67(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 2568 "src/SQLParser/Parser.php"
#line 145 "src/SQLParser/Parser.y"
    function yy_r68(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2571 "src/SQLParser/Parser.php"
#line 146 "src/SQLParser/Parser.y"
    function yy_r69(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2574 "src/SQLParser/Parser.php"
#line 147 "src/SQLParser/Parser.y"
    function yy_r70(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2577 "src/SQLParser/Parser.php"
#line 148 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2580 "src/SQLParser/Parser.php"
#line 150 "src/SQLParser/Parser.y"
    function yy_r72(){ $this->_retvalue = 'NATURAL';     }
#line 2583 "src/SQLParser/Parser.php"
#line 152 "src/SQLParser/Parser.y"
    function yy_r74(){ $this->_retvalue = 'OUTER';     }
#line 2586 "src/SQLParser/Parser.php"
#line 155 "src/SQLParser/Parser.y"
    function yy_r76(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2589 "src/SQLParser/Parser.php"
#line 156 "src/SQLParser/Parser.y"
    function yy_r77(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2592 "src/SQLParser/Parser.php"
#line 157 "src/SQLParser/Parser.y"
    function yy_r78(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 2595 "src/SQLParser/Parser.php"
#line 158 "src/SQLParser/Parser.y"
    function yy_r79(){ $this->_retvalue = NULL;     }
#line 2598 "src/SQLParser/Parser.php"
#line 163 "src/SQLParser/Parser.y"
    function yy_r82(){
    $this->_retvalue = new Stmt\ExprList;
    $this->_retvalue->setExprs($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2604 "src/SQLParser/Parser.php"
#line 172 "src/SQLParser/Parser.y"
    function yy_r86(){
    $this->_retvalue = new Stmt\Expr(strtoupper($this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2609 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r87(){ $this->_retvalue = new Stmt\Expr("ASC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 2612 "src/SQLParser/Parser.php"
#line 178 "src/SQLParser/Parser.y"
    function yy_r89(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -2]->minor];     }
#line 2615 "src/SQLParser/Parser.php"
#line 182 "src/SQLParser/Parser.y"
    function yy_r92(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 2618 "src/SQLParser/Parser.php"
#line 186 "src/SQLParser/Parser.y"
    function yy_r95(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2621 "src/SQLParser/Parser.php"
#line 188 "src/SQLParser/Parser.y"
    function yy_r97(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor; $this->yystack[$this->yyidx + -3]->minor->values($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2627 "src/SQLParser/Parser.php"
#line 192 "src/SQLParser/Parser.y"
    function yy_r98(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    $keys   = new Stmt\ExprList;
    $values = [];
    foreach ($this->yystack[$this->yyidx + -1]->minor->getExprs() as $field) {
        $member = $field->getMembers();
        $keys->addTerm($member[0]);
        $values[] = $member[1];
    }
    $this->yystack[$this->yyidx + -2]->minor->values([$values])->fields($keys);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2641 "src/SQLParser/Parser.php"
#line 205 "src/SQLParser/Parser.y"
    function yy_r99(){
    $this->_retvalue = new SQL\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2646 "src/SQLParser/Parser.php"
#line 209 "src/SQLParser/Parser.y"
    function yy_r100(){
    $this->_retvalue = new SQL\Delete($this->yystack[$this->yyidx + -3]->minor[0], $this->yystack[$this->yyidx + -3]->minor[1]);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2654 "src/SQLParser/Parser.php"
#line 216 "src/SQLParser/Parser.y"
    function yy_r101(){
    $this->_retvalue = new SQL\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2663 "src/SQLParser/Parser.php"
#line 224 "src/SQLParser/Parser.y"
    function yy_r102(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2670 "src/SQLParser/Parser.php"
#line 229 "src/SQLParser/Parser.y"
    function yy_r103(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2677 "src/SQLParser/Parser.php"
#line 235 "src/SQLParser/Parser.y"
    function yy_r104(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];    }
#line 2680 "src/SQLParser/Parser.php"
#line 236 "src/SQLParser/Parser.y"
    function yy_r105(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 2683 "src/SQLParser/Parser.php"
#line 243 "src/SQLParser/Parser.y"
    function yy_r109(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 2686 "src/SQLParser/Parser.php"
#line 244 "src/SQLParser/Parser.y"
    function yy_r110(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 2689 "src/SQLParser/Parser.php"
#line 245 "src/SQLParser/Parser.y"
    function yy_r111(){
    $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2694 "src/SQLParser/Parser.php"
#line 249 "src/SQLParser/Parser.y"
    function yy_r112(){
    $this->_retvalue = new SQL\View($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2699 "src/SQLParser/Parser.php"
#line 253 "src/SQLParser/Parser.y"
    function yy_r113(){
    $this->_retvalue = new SQL\Table($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2704 "src/SQLParser/Parser.php"
#line 257 "src/SQLParser/Parser.y"
    function yy_r114(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2707 "src/SQLParser/Parser.php"
#line 260 "src/SQLParser/Parser.y"
    function yy_r116(){
    $this->_retvalue[implode(" ", $this->yystack[$this->yyidx + -2]->minor)] = $this->yystack[$this->yyidx + 0]->minor->getMember(0);
    }
#line 2712 "src/SQLParser/Parser.php"
#line 268 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2715 "src/SQLParser/Parser.php"
#line 270 "src/SQLParser/Parser.y"
    function yy_r121(){
    $this->_retvalue = ['primary', $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2720 "src/SQLParser/Parser.php"
#line 273 "src/SQLParser/Parser.y"
    function yy_r122(){
    $this->_retvalue = ['unique', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2725 "src/SQLParser/Parser.php"
#line 276 "src/SQLParser/Parser.y"
    function yy_r123(){
    $this->_retvalue = ['key', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2730 "src/SQLParser/Parser.php"
#line 284 "src/SQLParser/Parser.y"
    function yy_r127(){
    $this->_retvalue = new Stmt\Expr('INDEX', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2735 "src/SQLParser/Parser.php"
#line 293 "src/SQLParser/Parser.y"
    function yy_r132(){
    $this->_retvalue = new Stmt\Column($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1], $this->yystack[$this->yyidx + -1]->minor[2]);
    foreach ($this->yystack[$this->yyidx + 0]->minor as $setting) {
        if (is_array($setting)) {
            $this->_retvalue->{$setting[0]}($setting[1]);
        } else {
            $this->_retvalue->$setting();
        }
    }
    }
#line 2747 "src/SQLParser/Parser.php"
#line 304 "src/SQLParser/Parser.y"
    function yy_r133(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, NULL, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2752 "src/SQLParser/Parser.php"
#line 308 "src/SQLParser/Parser.y"
    function yy_r134(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2757 "src/SQLParser/Parser.php"
#line 322 "src/SQLParser/Parser.y"
    function yy_r140(){ $this->_retvalue = ['defaultValue', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2760 "src/SQLParser/Parser.php"
#line 323 "src/SQLParser/Parser.y"
    function yy_r141(){ $this->_retvalue = ['collate', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2763 "src/SQLParser/Parser.php"
#line 324 "src/SQLParser/Parser.y"
    function yy_r142(){ $this->_retvalue = 'primaryKey';     }
#line 2766 "src/SQLParser/Parser.php"
#line 325 "src/SQLParser/Parser.y"
    function yy_r143(){    $this->_retvalue = 'notNull';     }
#line 2769 "src/SQLParser/Parser.php"
#line 326 "src/SQLParser/Parser.y"
    function yy_r144(){ $this->_retvalue = 'autoincrement';     }
#line 2772 "src/SQLParser/Parser.php"
#line 329 "src/SQLParser/Parser.y"
    function yy_r145(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2775 "src/SQLParser/Parser.php"
#line 330 "src/SQLParser/Parser.y"
    function yy_r146(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2778 "src/SQLParser/Parser.php"
#line 331 "src/SQLParser/Parser.y"
    function yy_r147(){
    if ($this->yystack[$this->yyidx + 0]->minor->getType() === 'IS NULL') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getMembers();
        $this->_retvalue = new Stmt\Expr('IS NOT NULL', $parts[0]);
        return;
    }
    $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2788 "src/SQLParser/Parser.php"
#line 339 "src/SQLParser/Parser.y"
    function yy_r148(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2791 "src/SQLParser/Parser.php"
#line 341 "src/SQLParser/Parser.y"
    function yy_r150(){
    $members = $this->yystack[$this->yyidx + -2]->minor->getMembers();
    if  ($this->yystack[$this->yyidx + -2]->minor->getType() === 'VALUE' && count($members) === 2&& $members[1] == 2) {
        $this->yystack[$this->yyidx + -2]->minor = new Stmt\Expr('COLUMN', $members[0]);
    }
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2800 "src/SQLParser/Parser.php"
#line 348 "src/SQLParser/Parser.y"
    function yy_r151(){ $this->_retvalue = new Stmt\Expr("IS NOT NULL", $this->yystack[$this->yyidx + -3]->minor);     }
#line 2803 "src/SQLParser/Parser.php"
#line 349 "src/SQLParser/Parser.y"
    function yy_r152(){ $this->_retvalue = new Stmt\Expr("IS NULL", $this->yystack[$this->yyidx + -2]->minor);     }
#line 2806 "src/SQLParser/Parser.php"
#line 350 "src/SQLParser/Parser.y"
    function yy_r153(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2809 "src/SQLParser/Parser.php"
#line 351 "src/SQLParser/Parser.y"
    function yy_r154(){
    $this->_retvalue = new Stmt\Expr('not between', $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2814 "src/SQLParser/Parser.php"
#line 354 "src/SQLParser/Parser.y"
    function yy_r155(){
    $this->_retvalue = new Stmt\Expr('between', $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2819 "src/SQLParser/Parser.php"
#line 365 "src/SQLParser/Parser.y"
    function yy_r158(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor));     }
#line 2822 "src/SQLParser/Parser.php"
#line 370 "src/SQLParser/Parser.y"
    function yy_r162(){ $this->_retvalue = new Stmt\Expr('cast', $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2825 "src/SQLParser/Parser.php"
#line 373 "src/SQLParser/Parser.y"
    function yy_r164(){ $this->_retvalue = 'IN';     }
#line 2828 "src/SQLParser/Parser.php"
#line 374 "src/SQLParser/Parser.y"
    function yy_r165(){ $this->_retvalue = 'NOT IN';     }
#line 2831 "src/SQLParser/Parser.php"
#line 376 "src/SQLParser/Parser.y"
    function yy_r166(){ $this->_retvalue = 'NOT ' . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2834 "src/SQLParser/Parser.php"
#line 379 "src/SQLParser/Parser.y"
    function yy_r168(){ $this->_retvalue = 'IS';     }
#line 2837 "src/SQLParser/Parser.php"
#line 380 "src/SQLParser/Parser.y"
    function yy_r169(){ $this->_retvalue = 'LIKE';     }
#line 2840 "src/SQLParser/Parser.php"
#line 381 "src/SQLParser/Parser.y"
    function yy_r170(){ $this->_retvalue = 'GLOB';     }
#line 2843 "src/SQLParser/Parser.php"
#line 385 "src/SQLParser/Parser.y"
    function yy_r172(){
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2849 "src/SQLParser/Parser.php"
#line 389 "src/SQLParser/Parser.y"
    function yy_r173(){
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 2855 "src/SQLParser/Parser.php"
#line 394 "src/SQLParser/Parser.y"
    function yy_r174(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2858 "src/SQLParser/Parser.php"
#line 395 "src/SQLParser/Parser.y"
    function yy_r175(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2861 "src/SQLParser/Parser.php"
#line 397 "src/SQLParser/Parser.y"
    function yy_r176(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2864 "src/SQLParser/Parser.php"
#line 398 "src/SQLParser/Parser.y"
    function yy_r177(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2867 "src/SQLParser/Parser.php"
#line 399 "src/SQLParser/Parser.y"
    function yy_r178(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 2870 "src/SQLParser/Parser.php"
#line 400 "src/SQLParser/Parser.y"
    function yy_r179(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2873 "src/SQLParser/Parser.php"
#line 403 "src/SQLParser/Parser.y"
    function yy_r182(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 1);     }
#line 2876 "src/SQLParser/Parser.php"
#line 404 "src/SQLParser/Parser.y"
    function yy_r183(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 2);     }
#line 2879 "src/SQLParser/Parser.php"
#line 405 "src/SQLParser/Parser.y"
    function yy_r184(){ $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2882 "src/SQLParser/Parser.php"
#line 407 "src/SQLParser/Parser.y"
    function yy_r186(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2885 "src/SQLParser/Parser.php"
#line 408 "src/SQLParser/Parser.y"
    function yy_r187(){
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Stmt\VariablePlaceholder) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else if (is_array($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    } else {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2896 "src/SQLParser/Parser.php"
#line 418 "src/SQLParser/Parser.y"
    function yy_r188(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2899 "src/SQLParser/Parser.php"
#line 420 "src/SQLParser/Parser.y"
    function yy_r189(){
    if (strtolower($this->yystack[$this->yyidx + -1]->minor) === 'isnull') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getExprs();
        if (!empty($parts[0]) && $parts[0]->getType() === 'COLUMN') {
            // This is a "isnull" function call, we must convert
            // `isnull(col)` to `col IS NULL` (which is the correct
            // SQL-standard way of representing that statement)
            $this->_retvalue = new Stmt\Expr('IS NULL', $parts[0]);
            return;
        }
    }
    $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2914 "src/SQLParser/Parser.php"
#line 438 "src/SQLParser/Parser.y"
    function yy_r193(){ $this->_retvalue = new Stmt\ExprList();     }
#line 2917 "src/SQLParser/Parser.php"
#line 471 "src/SQLParser/Parser.y"
    function yy_r217(){ $this->_retvalue = trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t");     }
#line 2920 "src/SQLParser/Parser.php"
#line 474 "src/SQLParser/Parser.y"
    function yy_r219(){ $this->_retvalue = new Stmt\Expr("ALL");     }
#line 2923 "src/SQLParser/Parser.php"
#line 476 "src/SQLParser/Parser.y"
    function yy_r220(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2926 "src/SQLParser/Parser.php"
#line 477 "src/SQLParser/Parser.y"
    function yy_r221(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2929 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 3049 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
