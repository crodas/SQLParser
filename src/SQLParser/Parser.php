<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 102 "src/SQLParser/Parser.php"

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_NOT                          =  1;
    const T_AND                          =  2;
    const T_OR                           =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_LIKE                         =  7;
    const T_NE                           =  8;
    const T_GT                           =  9;
    const T_GE                           = 10;
    const T_LT                           = 11;
    const T_LE                           = 12;
    const T_IN                           = 13;
    const T_PLUS                         = 14;
    const T_MINUS                        = 15;
    const T_CONCAT                       = 16;
    const T_TIMES                        = 17;
    const T_DIV                          = 18;
    const T_MOD                          = 19;
    const T_PIPE                         = 20;
    const T_BITWISE                      = 21;
    const T_FILTER_PIPE                  = 22;
    const SEMICOLON                      = 23;
    const PAR_OPEN                       = 24;
    const PAR_CLOSE                      = 25;
    const BEGIN                          = 26;
    const SAVEPOINT                      = 27;
    const RELEASE                        = 28;
    const ROLLBACK                       = 29;
    const TO                             = 30;
    const TRANSACTION                    = 31;
    const COMMIT                         = 32;
    const T_END                          = 33;
    const SELECT                         = 34;
    const ALL                            = 35;
    const DISTINCT                       = 36;
    const DISTINCTROW                    = 37;
    const HIGH_PRIORITY                  = 38;
    const STRAIGHT_JOIN                  = 39;
    const SQL_SMALL_RESULT               = 40;
    const SQL_BIG_RESULT                 = 41;
    const SQL_CACHE                      = 42;
    const SQL_CALC_FOUND_ROWS            = 43;
    const SQL_BUFFER_RESULT              = 44;
    const SQL_NO_CACHE                   = 45;
    const FROM                           = 46;
    const COMMA                          = 47;
    const T_AS                           = 48;
    const JOIN                           = 49;
    const INNER                          = 50;
    const LEFT                           = 51;
    const RIGHT                          = 52;
    const NATURAL                        = 53;
    const OUTER                          = 54;
    const ON                             = 55;
    const USING                          = 56;
    const WHERE                          = 57;
    const ORDER                          = 58;
    const BY                             = 59;
    const DESC                           = 60;
    const ASC                            = 61;
    const LIMIT                          = 62;
    const OFFSET                         = 63;
    const GROUP                          = 64;
    const HAVING                         = 65;
    const VALUES                         = 66;
    const DROP                           = 67;
    const TABLE                          = 68;
    const DELETE                         = 69;
    const UPDATE                         = 70;
    const INSERT                         = 71;
    const REPLACE                        = 72;
    const INTO                           = 73;
    const DUPLICATE                      = 74;
    const KEY                            = 75;
    const SET                            = 76;
    const CREATE                         = 77;
    const VIEW                           = 78;
    const PRIMARY                        = 79;
    const UNIQUE                         = 80;
    const NUMBER                         = 81;
    const T_UNSIGNED                     = 82;
    const T_DEFAULT                      = 83;
    const COLLATE                        = 84;
    const T_NULL                         = 85;
    const AUTO_INCREMENT                 = 86;
    const T_IS                           = 87;
    const T_CASE                         = 88;
    const T_ELSE                         = 89;
    const WHEN                           = 90;
    const THEN                           = 91;
    const INTERVAL                       = 92;
    const ALPHA                          = 93;
    const T_STRING                       = 94;
    const T_DOT                          = 95;
    const COLUMN                         = 96;
    const QUESTION                       = 97;
    const T_DOLLAR                       = 98;
    const YY_NO_ACTION = 501;
    const YY_ACCEPT_ACTION = 500;
    const YY_ERROR_ACTION = 499;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1840;
static public $yy_action = array(
 /*     0 */    18,  220,  284,  287,  183,  299,   50,   23,   23,   23,
 /*    10 */   128,  288,  311,   34,  174,  308,  226,    7,  147,  119,
 /*    20 */   100,  155,  106,    9,  102,  265,  276,  136,  268,  127,
 /*    30 */   133,   98,   99,  294,  263,  263,  263,  263,  263,  263,
 /*    40 */   263,  263,  263,  263,  263,   18,  125,   63,  243,  183,
 /*    50 */   270,  245,  272,   53,  298,  182,    1,  138,   34,  174,
 /*    60 */   168,  226,  163,   38,   46,   46,  284,  287,    9,  299,
 /*    70 */   141,  140,   40,   13,   94,  288,  311,  105,  136,  308,
 /*    80 */   234,  143,  284,  287,  307,  299,  223,  121,  157,    8,
 /*    90 */    89,   21,   66,  215,  203,  308,  280,  183,  177,   33,
 /*   100 */    16,  104,   90,   19,   19,   19,   19,   19,   19,   19,
 /*   110 */   285,   23,   23,  258,   23,   23,   23,  153,  235,  235,
 /*   120 */   256,  269,  278,  259,  189,  234,  130,  284,  287,  307,
 /*   130 */   299,  197,  121,  228,   95,  201,   21,   66,  215,   18,
 /*   140 */   308,  280,  183,  183,  295,   96,   12,  252,  267,  114,
 /*   150 */    31,   22,   34,  174,  137,  226,   93,   94,   29,   59,
 /*   160 */   159,  146,    9,  230,  284,  287,   25,  299,  279,  284,
 /*   170 */   287,   55,  299,  288,  311,  222,   58,  308,  288,  311,
 /*   180 */   284,  287,  308,  299,  105,  157,   63,  240,   64,  288,
 /*   190 */   311,  186,  227,  308,  274,  177,   33,   16,  136,    6,
 /*   200 */    19,   19,   19,   19,   19,   19,   19,  285,   23,   23,
 /*   210 */   307,   23,   23,   23,  115,  167,  313,  169,  250,  234,
 /*   220 */   277,  284,  287,  307,  299,  195,  121,  205,   91,   11,
 /*   230 */    21,   66,  215,  110,  308,  280,  183,   18,   97,  298,
 /*   240 */   182,  183,  138,   44,  252,  267,  157,   24,   49,  248,
 /*   250 */    34,  174,  122,  226,  236,  236,  177,   33,   16,  309,
 /*   260 */     9,   19,   19,   19,   19,   19,   19,   19,  285,   23,
 /*   270 */    23,  282,   23,   23,   23,  281,  176,  302,  169,  250,
 /*   280 */   157,  105,  178,  177,   33,   16,  301,  312,   19,   19,
 /*   290 */    19,   19,   19,   19,   19,  285,   23,   23,  109,   23,
 /*   300 */    23,   23,   20,  225,  294,  252,  267,  238,  300,  250,
 /*   310 */   170,  313,  169,  250,  216,  108,  222,  234,   27,  284,
 /*   320 */   287,  307,  299,   55,  121,  226,  242,  270,   21,   66,
 /*   330 */   215,  217,  308,  280,  183,  252,  267,  157,  270,  252,
 /*   340 */   267,  306,  105,  134,  177,   33,   16,  246,  145,   19,
 /*   350 */    19,   19,   19,   19,   19,   19,  285,   23,   23,  180,
 /*   360 */    23,   23,   23,  307,  179,  231,   41,   47,   17,  105,
 /*   370 */   161,  177,   33,   16,  173,  165,   19,   19,   19,   19,
 /*   380 */    19,   19,   19,  285,   23,   23,   25,   23,   23,   23,
 /*   390 */    60,  284,  287,  297,  299,  157,  252,  267,  212,    5,
 /*   400 */   288,  311,   39,  209,  308,  177,   33,   16,  111,  166,
 /*   410 */    19,   19,   19,   19,   19,   19,   19,  285,   23,   23,
 /*   420 */   232,   23,   23,   23,  292,   42,   62,  123,  269,   52,
 /*   430 */   105,  191,  177,   33,   16,  101,  208,   19,   19,   19,
 /*   440 */    19,   19,   19,   19,  285,   23,   23,   94,   23,   23,
 /*   450 */    23,   45,  266,   14,  252,  267,  148,  105,  149,  177,
 /*   460 */    33,   16,   92,   32,   19,   19,   19,   19,   19,   19,
 /*   470 */    19,  285,   23,   23,   18,   23,   23,   23,  183,    2,
 /*   480 */   152,  213,  158,   43,  131,  241,   51,   34,  174,  286,
 /*   490 */   226,  105,  275,   55,  229,   15,  136,    4,    3,  177,
 /*   500 */    33,   16,   10,  187,   19,   19,   19,   19,   19,   19,
 /*   510 */    19,  285,   23,   23,  305,   23,   23,   23,  105,  147,
 /*   520 */    30,  273,   28,  500,  184,  224,  244,  239,  247,  190,
 /*   530 */   192,  185,  210,  206,  196,  204,  198,  183,  124,  132,
 /*   540 */   365,  365,  365,  365,  277,  105,   34,  174,   26,  226,
 /*   550 */   129,  126,  310,  304,  234,  271,  284,  287,  307,  299,
 /*   560 */   264,  121,  260,   54,  290,   21,   66,  215,  254,  308,
 /*   570 */   280,  183,  151,  244,  239,  247,  190,  192,  185,  210,
 /*   580 */   206,  196,  204,  198,  251,  105,  132,  160,  172,   16,
 /*   590 */   303,  139,   19,   19,   19,   19,   19,   19,   19,  285,
 /*   600 */    23,   23,  120,   23,   23,   23,  188,  176,  117,  220,
 /*   610 */    54,   64,   26,  234,  116,  284,  287,  307,  299,  112,
 /*   620 */   249,  136,  314,  221,   21,   66,  215,   80,  308,  280,
 /*   630 */   183,  175,  283,  315,  135,  211,  183,  361,  237,  300,
 /*   640 */   250,  361,  176,  361,  361,  200,  361,  361,  226,  361,
 /*   650 */   176,  361,  220,   65,  107,   64,  291,  242,  361,  289,
 /*   660 */   296,  262,  217,   44,  171,  361,  252,  267,  361,  361,
 /*   670 */    56,  361,  361,  105,  300,  250,  361,  361,  361,  179,
 /*   680 */   193,  361,  300,  250,  361,  361,  361,  176,  200,  162,
 /*   690 */   361,  361,  242,  361,  361,  361,  361,  217,  361,  291,
 /*   700 */   242,  252,  267,  296,  154,  217,  361,   74,  261,  252,
 /*   710 */   267,  361,  361,  361,  284,  287,  361,  299,  361,  300,
 /*   720 */   250,  361,  361,  288,  311,  200,  361,  308,  280,  183,
 /*   730 */   361,  361,  361,  361,  361,  361,  291,  242,  361,  361,
 /*   740 */   296,  361,  217,  176,  142,  220,  252,  267,  361,   19,
 /*   750 */    19,   19,   19,   19,   19,   19,  285,   23,   23,  361,
 /*   760 */    23,   23,   23,   57,  361,  361,  361,  361,  361,  361,
 /*   770 */   361,  361,  361,  361,  361,  300,  250,  361,  361,  361,
 /*   780 */   361,  200,  156,  361,  144,  233,   36,   35,  361,  214,
 /*   790 */   361,  176,  291,  242,  361,  361,  296,  361,  217,  176,
 /*   800 */   361,  220,  252,  267,  361,  361,  219,  244,  239,  247,
 /*   810 */   190,  192,  185,  210,  206,  196,  204,  198,  361,   67,
 /*   820 */   132,  181,  293,  300,  250,  361,  361,  361,  179,  218,
 /*   830 */   105,  300,  250,  361,  361,  361,  176,  200,  162,  361,
 /*   840 */   361,  242,  361,  361,   54,  361,  217,  361,  291,  242,
 /*   850 */   252,  267,  296,  361,  217,  361,   80,  361,  252,  267,
 /*   860 */   361,  361,  361,  361,  361,  361,  361,  361,  300,  250,
 /*   870 */   176,  361,  220,  361,  200,  361,  361,  176,  361,  361,
 /*   880 */   361,  361,  361,  361,  361,  291,  242,  361,  361,  296,
 /*   890 */    57,  217,  361,  142,  361,  252,  267,  361,  361,  361,
 /*   900 */   361,  361,  300,  250,  361,  361,  179,  361,  200,  300,
 /*   910 */   250,  361,  207,  361,  176,  194,  162,  361,  361,  291,
 /*   920 */   242,  361,  176,  296,  220,  217,  157,  242,   89,  252,
 /*   930 */   267,  361,  217,  361,   72,  361,  252,  267,  118,  253,
 /*   940 */    90,  361,   80,  361,  361,  361,  300,  250,  361,  361,
 /*   950 */   361,  361,  200,  361,  300,  250,  361,  361,  361,  269,
 /*   960 */   200,  361,  361,  291,  242,  361,  361,  296,  176,  217,
 /*   970 */   220,  291,  242,  252,  267,  296,  361,  217,  361,  142,
 /*   980 */   361,  252,  267,  361,  361,  252,  267,  361,   56,  361,
 /*   990 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1000 */   300,  250,  176,  361,  220,  361,  200,  361,  361,  361,
 /*  1010 */   361,  361,  361,  361,  361,  361,  361,  291,  242,  361,
 /*  1020 */   361,  296,   67,  217,  361,  199,  257,  252,  267,  361,
 /*  1030 */   361,  361,  361,  361,  300,  250,  176,  361,  220,  361,
 /*  1040 */   200,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1050 */   157,  291,  242,  361,  361,  296,  103,  217,  361,  361,
 /*  1060 */   361,  252,  267,  361,  166,  361,  361,  361,  300,  250,
 /*  1070 */   176,  361,  220,  361,  200,  361,  361,  361,  361,  202,
 /*  1080 */   361,  361,  361,  269,  361,  291,  242,  361,  361,  296,
 /*  1090 */    85,  217,  361,  361,  361,  252,  267,  361,  361,  361,
 /*  1100 */   361,  361,  300,  250,  176,  361,  220,  361,  200,  252,
 /*  1110 */   267,  361,  361,  361,  361,  361,  361,  361,  361,  291,
 /*  1120 */   242,  361,  361,  296,   71,  217,  361,  361,  361,  252,
 /*  1130 */   267,  361,  361,  361,  361,  361,  300,  250,  176,  361,
 /*  1140 */   220,  361,  200,  361,  361,  361,  361,  361,  361,  361,
 /*  1150 */   361,  361,  361,  291,  242,  361,  361,  296,   70,  217,
 /*  1160 */   361,  361,  361,  252,  267,  361,  361,  361,  361,  361,
 /*  1170 */   300,  250,  176,  361,  220,  361,  200,  361,  361,  361,
 /*  1180 */   361,  361,  361,  361,  361,  361,  361,  291,  242,  361,
 /*  1190 */   361,  296,   88,  217,  361,  361,  361,  252,  267,  361,
 /*  1200 */   361,  361,  361,  361,  300,  250,  176,  361,  220,  361,
 /*  1210 */   200,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1220 */   361,  291,  242,  361,  361,  296,   82,  217,  361,  361,
 /*  1230 */   361,  252,  267,  361,  361,  361,  361,  361,  300,  250,
 /*  1240 */   176,  361,  220,  361,  200,  361,  361,  361,  361,  361,
 /*  1250 */   361,  361,  361,  361,  361,  291,  242,  361,  361,  296,
 /*  1260 */    81,  217,  361,  361,  361,  252,  267,  361,  361,  361,
 /*  1270 */   361,  361,  300,  250,  176,  361,  220,  361,  200,  361,
 /*  1280 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  291,
 /*  1290 */   242,  361,  361,  296,   87,  217,  361,  361,  361,  252,
 /*  1300 */   267,  361,  361,  361,  361,  361,  300,  250,  176,  361,
 /*  1310 */   220,  361,  200,  361,  361,  361,  361,  361,  361,  361,
 /*  1320 */   361,  361,  361,  291,  242,  361,  361,  296,   76,  217,
 /*  1330 */   361,  361,  361,  252,  267,  361,  361,  361,  361,  361,
 /*  1340 */   300,  250,  176,  361,  220,  361,  200,  361,  361,  361,
 /*  1350 */   361,  361,  361,  361,  361,  361,  361,  291,  242,  361,
 /*  1360 */   361,  296,   68,  217,  361,  361,  361,  252,  267,  361,
 /*  1370 */   361,  361,  361,  361,  300,  250,  176,  361,  220,  361,
 /*  1380 */   200,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1390 */   361,  291,  242,  361,  361,  296,   75,  217,  361,  361,
 /*  1400 */   361,  252,  267,  361,  361,  361,  361,  361,  300,  250,
 /*  1410 */   176,  361,  220,  361,  200,  361,  361,  361,  361,  361,
 /*  1420 */   361,  361,  361,  361,  361,  291,  242,  361,  361,  296,
 /*  1430 */    73,  217,  361,  361,  361,  252,  267,  361,  361,  361,
 /*  1440 */   361,  361,  300,  250,  176,  361,  220,  361,  200,  361,
 /*  1450 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  291,
 /*  1460 */   242,  361,  361,  296,   69,  217,  361,  361,  361,  252,
 /*  1470 */   267,  361,  361,  361,  361,  361,  300,  250,  176,  361,
 /*  1480 */   220,  361,  200,  361,  361,  361,  361,  361,  361,  361,
 /*  1490 */   361,  361,  361,  291,  242,  361,  361,  296,   79,  217,
 /*  1500 */   361,  361,  361,  252,  267,  361,  361,  361,  361,  361,
 /*  1510 */   300,  250,  176,  361,  220,  361,  200,  361,  361,  361,
 /*  1520 */   361,  361,  361,  361,  361,  361,  361,  291,  242,  361,
 /*  1530 */   361,  296,   84,  217,  361,  361,  361,  252,  267,  361,
 /*  1540 */   361,  361,  361,  361,  300,  250,  176,  361,  220,  361,
 /*  1550 */   200,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1560 */   361,  291,  242,  361,  361,  296,   83,  217,  361,  361,
 /*  1570 */   361,  252,  267,  361,  361,  361,  361,  361,  300,  250,
 /*  1580 */   176,  361,  220,  361,  200,  361,  361,  361,  361,  361,
 /*  1590 */   361,  361,  361,  361,  361,  291,  242,  361,  361,  296,
 /*  1600 */    78,  217,  361,  361,  361,  252,  267,  361,  361,  361,
 /*  1610 */   361,  361,  300,  250,  176,  361,  220,  361,  200,  361,
 /*  1620 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  291,
 /*  1630 */   242,  361,  361,  296,   77,  217,  361,  361,  361,  252,
 /*  1640 */   267,  183,  361,  361,  361,  361,  300,  250,  176,  361,
 /*  1650 */   220,  361,  200,  226,  361,  361,  361,  361,  183,  361,
 /*  1660 */   361,  361,  361,  291,  242,  361,  361,  296,   86,  217,
 /*  1670 */   226,  361,  361,  252,  267,  361,   37,  361,  361,  361,
 /*  1680 */   300,  250,  157,  361,   89,  361,  200,  361,  361,  361,
 /*  1690 */   361,  361,  361,  361,  150,  253,   90,  291,  242,  361,
 /*  1700 */   361,  296,  361,  217,  361,   61,  361,  252,  267,   48,
 /*  1710 */   361,  157,  361,   89,  361,  269,  361,  361,  361,  284,
 /*  1720 */   287,  361,  299,  164,  253,   90,  361,  361,  288,  311,
 /*  1730 */   361,  361,  308,  280,  183,  361,  284,  287,  361,  299,
 /*  1740 */   361,  252,  267,  361,  269,  288,  311,  361,  361,  308,
 /*  1750 */   280,  183,  361,  284,  287,  157,  299,   89,  361,  361,
 /*  1760 */   361,  361,  288,  311,  284,  287,  308,  299,  113,   90,
 /*  1770 */   252,  267,  361,  288,  311,  361,  361,  308,  361,  157,
 /*  1780 */   361,   89,  361,  361,  361,  361,  361,  361,  269,  361,
 /*  1790 */   361,  361,  255,   90,  361,  361,  361,  361,  361,  361,
 /*  1800 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1810 */   361,  361,  269,  361,  252,  267,  361,  361,  361,  361,
 /*  1820 */   361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*  1830 */   361,  361,  361,  361,  361,  361,  361,  361,  252,  267,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,  117,   83,   84,    5,   86,  121,   17,   18,   19,
 /*    10 */    47,   92,   93,   14,   15,   96,   17,   24,   55,   26,
 /*    20 */    27,   28,   29,   24,  161,   32,   33,   34,   50,   51,
 /*    30 */    52,   48,   30,   31,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,    1,  122,  115,  164,    5,
 /*    50 */   115,  167,   25,  150,  130,  131,  118,  133,   14,   15,
 /*    60 */    67,   17,   69,   70,   71,   72,   83,   84,   24,   86,
 /*    70 */    77,  136,   46,   47,   47,   92,   93,   87,   34,   96,
 /*    80 */    81,  149,   83,   84,   85,   86,  154,   88,  115,   23,
 /*    90 */   117,   92,   93,   94,   33,   96,   97,   98,    1,    2,
 /*   100 */     3,  128,  129,    6,    7,    8,    9,   10,   11,   12,
 /*   110 */    13,   14,   15,  107,   17,   18,   19,   24,   60,   61,
 /*   120 */   115,  148,  134,  117,   25,   81,    1,   83,   84,   85,
 /*   130 */    86,  107,   88,  115,   48,   25,   92,   93,   94,    1,
 /*   140 */    96,   97,   98,    5,   25,   48,   47,  174,  175,  143,
 /*   150 */    89,   90,   14,   15,   25,   17,   75,   47,   55,   56,
 /*   160 */    79,   80,   24,   25,   83,   84,   47,   86,   54,   83,
 /*   170 */    84,  166,   86,   92,   93,   82,   47,   96,   92,   93,
 /*   180 */    83,   84,   96,   86,   87,  115,  115,  155,   24,   92,
 /*   190 */    93,  115,  174,   96,  134,    1,    2,    3,   34,   24,
 /*   200 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   210 */    85,   17,   18,   19,  123,  145,  146,  147,  148,   81,
 /*   220 */    53,   83,   84,   85,   86,  154,   88,  151,  152,   24,
 /*   230 */    92,   93,   94,  141,   96,   97,   98,    1,   68,  130,
 /*   240 */   131,    5,  133,   76,  174,  175,  115,   62,   78,  125,
 /*   250 */    14,   15,  143,   17,   60,   61,    1,    2,    3,  167,
 /*   260 */    24,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   270 */    15,  167,   17,   18,   19,  171,  115,  146,  147,  148,
 /*   280 */   115,   87,   64,    1,    2,    3,  114,  167,    6,    7,
 /*   290 */     8,    9,   10,   11,   12,   13,   14,   15,  115,   17,
 /*   300 */    18,   19,   47,  162,   31,  174,  175,   25,  147,  148,
 /*   310 */   145,  146,  147,  148,  153,  158,   82,   81,   63,   83,
 /*   320 */    84,   85,   86,  166,   88,   17,  165,  115,   92,   93,
 /*   330 */    94,  170,   96,   97,   98,  174,  175,  115,  115,  174,
 /*   340 */   175,  165,   87,  160,    1,    2,    3,  155,  136,    6,
 /*   350 */     7,    8,    9,   10,   11,   12,   13,   14,   15,  136,
 /*   360 */    17,   18,   19,   85,  107,   93,   49,   47,    6,   87,
 /*   370 */   148,    1,    2,    3,  117,   81,    6,    7,    8,    9,
 /*   380 */    10,   11,   12,   13,   14,   15,   47,   17,   18,   19,
 /*   390 */    95,   83,   84,   25,   86,  115,  174,  175,   75,   59,
 /*   400 */    92,   93,   68,   33,   96,    1,    2,    3,   75,  129,
 /*   410 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   420 */    25,   17,   18,   19,  144,   47,   24,   48,  148,   24,
 /*   430 */    87,   81,    1,    2,    3,   27,   93,    6,    7,    8,
 /*   440 */     9,   10,   11,   12,   13,   14,   15,   47,   17,   18,
 /*   450 */    19,   70,   25,   47,  174,  175,   74,   87,   75,    1,
 /*   460 */     2,    3,   75,   65,    6,    7,    8,    9,   10,   11,
 /*   470 */    12,   13,   14,   15,    1,   17,   18,   19,    5,   59,
 /*   480 */    81,   85,   24,   46,   25,   25,  121,   14,   15,   13,
 /*   490 */    17,   87,  115,  166,  163,   91,   34,   24,   24,    1,
 /*   500 */     2,    3,   24,  115,    6,    7,    8,    9,   10,   11,
 /*   510 */    12,   13,   14,   15,  142,   17,   18,   19,   87,   55,
 /*   520 */    90,  132,   91,  100,  101,  102,  103,  104,  105,  106,
 /*   530 */   107,  108,  109,  110,  111,  112,  113,    5,  124,  116,
 /*   540 */    49,   50,   51,   52,   53,   87,   14,   15,   57,   17,
 /*   550 */   115,  115,  142,  115,   81,  115,   83,   84,   85,   86,
 /*   560 */   115,   88,  115,  140,  115,   92,   93,   94,  115,   96,
 /*   570 */    97,   98,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   580 */   110,  111,  112,  113,  115,   87,  116,  115,   58,    3,
 /*   590 */   115,  169,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   600 */    14,   15,  122,   17,   18,   19,  155,  115,  124,  117,
 /*   610 */   140,   24,   57,   81,  124,   83,   84,   85,   86,  122,
 /*   620 */   114,   34,  165,  162,   92,   93,   94,  135,   96,   97,
 /*   630 */    98,  139,  125,  114,  120,  125,    5,  176,  159,  147,
 /*   640 */   148,  176,  115,  176,  176,  153,  176,  176,   17,  176,
 /*   650 */   115,  176,  117,   66,  119,   24,  164,  165,  176,  167,
 /*   660 */   168,  126,  170,   76,  172,  176,  174,  175,  176,  176,
 /*   670 */   135,  176,  176,   87,  147,  148,  176,  176,  176,  107,
 /*   680 */   153,  176,  147,  148,  176,  176,  176,  115,  153,  117,
 /*   690 */   176,  176,  165,  176,  176,  176,  176,  170,  176,  164,
 /*   700 */   165,  174,  175,  168,    1,  170,  176,  135,  173,  174,
 /*   710 */   175,  176,  176,  176,   83,   84,  176,   86,  176,  147,
 /*   720 */   148,  176,  176,   92,   93,  153,  176,   96,   97,   98,
 /*   730 */   176,  176,  176,  176,  176,  176,  164,  165,  176,  176,
 /*   740 */   168,  176,  170,  115,  172,  117,  174,  175,  176,    6,
 /*   750 */     7,    8,    9,   10,   11,   12,   13,   14,   15,  176,
 /*   760 */    17,   18,   19,  135,  176,  176,  176,  176,  176,  176,
 /*   770 */   176,  176,  176,  176,  176,  147,  148,  176,  176,  176,
 /*   780 */   176,  153,   79,  176,  156,  157,   83,   84,  176,   86,
 /*   790 */   176,  115,  164,  165,  176,  176,  168,  176,  170,  115,
 /*   800 */   176,  117,  174,  175,  176,  176,  102,  103,  104,  105,
 /*   810 */   106,  107,  108,  109,  110,  111,  112,  113,  176,  135,
 /*   820 */   116,  137,  138,  147,  148,  176,  176,  176,  107,  153,
 /*   830 */    87,  147,  148,  176,  176,  176,  115,  153,  117,  176,
 /*   840 */   176,  165,  176,  176,  140,  176,  170,  176,  164,  165,
 /*   850 */   174,  175,  168,  176,  170,  176,  135,  176,  174,  175,
 /*   860 */   176,  176,  176,  176,  176,  176,  176,  176,  147,  148,
 /*   870 */   115,  176,  117,  176,  153,  176,  176,  115,  176,  176,
 /*   880 */   176,  176,  176,  176,  176,  164,  165,  176,  176,  168,
 /*   890 */   135,  170,  176,  172,  176,  174,  175,  176,  176,  176,
 /*   900 */   176,  176,  147,  148,  176,  176,  107,  176,  153,  147,
 /*   910 */   148,  176,  157,  176,  115,  153,  117,  176,  176,  164,
 /*   920 */   165,  176,  115,  168,  117,  170,  115,  165,  117,  174,
 /*   930 */   175,  176,  170,  176,  135,  176,  174,  175,  127,  128,
 /*   940 */   129,  176,  135,  176,  176,  176,  147,  148,  176,  176,
 /*   950 */   176,  176,  153,  176,  147,  148,  176,  176,  176,  148,
 /*   960 */   153,  176,  176,  164,  165,  176,  176,  168,  115,  170,
 /*   970 */   117,  164,  165,  174,  175,  168,  176,  170,  176,  172,
 /*   980 */   176,  174,  175,  176,  176,  174,  175,  176,  135,  176,
 /*   990 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1000 */   147,  148,  115,  176,  117,  176,  153,  176,  176,  176,
 /*  1010 */   176,  176,  176,  176,  176,  176,  176,  164,  165,  176,
 /*  1020 */   176,  168,  135,  170,  176,  138,  173,  174,  175,  176,
 /*  1030 */   176,  176,  176,  176,  147,  148,  115,  176,  117,  176,
 /*  1040 */   153,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1050 */   115,  164,  165,  176,  176,  168,  135,  170,  176,  176,
 /*  1060 */   176,  174,  175,  176,  129,  176,  176,  176,  147,  148,
 /*  1070 */   115,  176,  117,  176,  153,  176,  176,  176,  176,  144,
 /*  1080 */   176,  176,  176,  148,  176,  164,  165,  176,  176,  168,
 /*  1090 */   135,  170,  176,  176,  176,  174,  175,  176,  176,  176,
 /*  1100 */   176,  176,  147,  148,  115,  176,  117,  176,  153,  174,
 /*  1110 */   175,  176,  176,  176,  176,  176,  176,  176,  176,  164,
 /*  1120 */   165,  176,  176,  168,  135,  170,  176,  176,  176,  174,
 /*  1130 */   175,  176,  176,  176,  176,  176,  147,  148,  115,  176,
 /*  1140 */   117,  176,  153,  176,  176,  176,  176,  176,  176,  176,
 /*  1150 */   176,  176,  176,  164,  165,  176,  176,  168,  135,  170,
 /*  1160 */   176,  176,  176,  174,  175,  176,  176,  176,  176,  176,
 /*  1170 */   147,  148,  115,  176,  117,  176,  153,  176,  176,  176,
 /*  1180 */   176,  176,  176,  176,  176,  176,  176,  164,  165,  176,
 /*  1190 */   176,  168,  135,  170,  176,  176,  176,  174,  175,  176,
 /*  1200 */   176,  176,  176,  176,  147,  148,  115,  176,  117,  176,
 /*  1210 */   153,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1220 */   176,  164,  165,  176,  176,  168,  135,  170,  176,  176,
 /*  1230 */   176,  174,  175,  176,  176,  176,  176,  176,  147,  148,
 /*  1240 */   115,  176,  117,  176,  153,  176,  176,  176,  176,  176,
 /*  1250 */   176,  176,  176,  176,  176,  164,  165,  176,  176,  168,
 /*  1260 */   135,  170,  176,  176,  176,  174,  175,  176,  176,  176,
 /*  1270 */   176,  176,  147,  148,  115,  176,  117,  176,  153,  176,
 /*  1280 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  164,
 /*  1290 */   165,  176,  176,  168,  135,  170,  176,  176,  176,  174,
 /*  1300 */   175,  176,  176,  176,  176,  176,  147,  148,  115,  176,
 /*  1310 */   117,  176,  153,  176,  176,  176,  176,  176,  176,  176,
 /*  1320 */   176,  176,  176,  164,  165,  176,  176,  168,  135,  170,
 /*  1330 */   176,  176,  176,  174,  175,  176,  176,  176,  176,  176,
 /*  1340 */   147,  148,  115,  176,  117,  176,  153,  176,  176,  176,
 /*  1350 */   176,  176,  176,  176,  176,  176,  176,  164,  165,  176,
 /*  1360 */   176,  168,  135,  170,  176,  176,  176,  174,  175,  176,
 /*  1370 */   176,  176,  176,  176,  147,  148,  115,  176,  117,  176,
 /*  1380 */   153,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1390 */   176,  164,  165,  176,  176,  168,  135,  170,  176,  176,
 /*  1400 */   176,  174,  175,  176,  176,  176,  176,  176,  147,  148,
 /*  1410 */   115,  176,  117,  176,  153,  176,  176,  176,  176,  176,
 /*  1420 */   176,  176,  176,  176,  176,  164,  165,  176,  176,  168,
 /*  1430 */   135,  170,  176,  176,  176,  174,  175,  176,  176,  176,
 /*  1440 */   176,  176,  147,  148,  115,  176,  117,  176,  153,  176,
 /*  1450 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  164,
 /*  1460 */   165,  176,  176,  168,  135,  170,  176,  176,  176,  174,
 /*  1470 */   175,  176,  176,  176,  176,  176,  147,  148,  115,  176,
 /*  1480 */   117,  176,  153,  176,  176,  176,  176,  176,  176,  176,
 /*  1490 */   176,  176,  176,  164,  165,  176,  176,  168,  135,  170,
 /*  1500 */   176,  176,  176,  174,  175,  176,  176,  176,  176,  176,
 /*  1510 */   147,  148,  115,  176,  117,  176,  153,  176,  176,  176,
 /*  1520 */   176,  176,  176,  176,  176,  176,  176,  164,  165,  176,
 /*  1530 */   176,  168,  135,  170,  176,  176,  176,  174,  175,  176,
 /*  1540 */   176,  176,  176,  176,  147,  148,  115,  176,  117,  176,
 /*  1550 */   153,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1560 */   176,  164,  165,  176,  176,  168,  135,  170,  176,  176,
 /*  1570 */   176,  174,  175,  176,  176,  176,  176,  176,  147,  148,
 /*  1580 */   115,  176,  117,  176,  153,  176,  176,  176,  176,  176,
 /*  1590 */   176,  176,  176,  176,  176,  164,  165,  176,  176,  168,
 /*  1600 */   135,  170,  176,  176,  176,  174,  175,  176,  176,  176,
 /*  1610 */   176,  176,  147,  148,  115,  176,  117,  176,  153,  176,
 /*  1620 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  164,
 /*  1630 */   165,  176,  176,  168,  135,  170,  176,  176,  176,  174,
 /*  1640 */   175,    5,  176,  176,  176,  176,  147,  148,  115,  176,
 /*  1650 */   117,  176,  153,   17,  176,  176,  176,  176,    5,  176,
 /*  1660 */   176,  176,  176,  164,  165,  176,  176,  168,  135,  170,
 /*  1670 */    17,  176,  176,  174,  175,  176,    6,  176,  176,  176,
 /*  1680 */   147,  148,  115,  176,  117,  176,  153,  176,  176,  176,
 /*  1690 */   176,  176,  176,  176,  127,  128,  129,  164,  165,  176,
 /*  1700 */   176,  168,  176,  170,  176,   24,  176,  174,  175,   73,
 /*  1710 */   176,  115,  176,  117,  176,  148,  176,  176,  176,   83,
 /*  1720 */    84,  176,   86,  127,  128,  129,  176,  176,   92,   93,
 /*  1730 */   176,  176,   96,   97,   98,  176,   83,   84,  176,   86,
 /*  1740 */   176,  174,  175,  176,  148,   92,   93,  176,  176,   96,
 /*  1750 */    97,   98,  176,   83,   84,  115,   86,  117,  176,  176,
 /*  1760 */   176,  176,   92,   93,   83,   84,   96,   86,  128,  129,
 /*  1770 */   174,  175,  176,   92,   93,  176,  176,   96,  176,  115,
 /*  1780 */   176,  117,  176,  176,  176,  176,  176,  176,  148,  176,
 /*  1790 */   176,  176,  128,  129,  176,  176,  176,  176,  176,  176,
 /*  1800 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1810 */   176,  176,  148,  176,  174,  175,  176,  176,  176,  176,
 /*  1820 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  1830 */   176,  176,  176,  176,  176,  176,  176,  176,  174,  175,
);
    const YY_SHIFT_USE_DFLT = -82;
    const YY_SHIFT_MAX = 184;
    static public $yy_shift_ofst = array(
 /*     0 */    -7,   -1,  473,   44,   44,  236,  236,   -7,   -7,   44,
 /*    10 */   138,  236,  236,  236,  236,  236,  236,  236,  236,  236,
 /*    20 */   236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
 /*    30 */   236,  236,  236,  236,  532,  532,  532,  532,  631,  631,
 /*    40 */   631,  631,  631,  631, 1653, 1653, 1636, 1653, 1653, 1653,
 /*    50 */   491,  167,   81,  -81,  587,  474,   97,  458,   81, 1681,
 /*    60 */   308,  -81,  -81,  -81,  164,  205,  478,  194,  255,  370,
 /*    70 */   404,  343,  282,  431,  282,  498,  498,  498,  498,  498,
 /*    80 */   498,  498,  498,  498,  498,  498,  586,  743,  743,  -17,
 /*    90 */    86, 1670,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
 /*   100 */   -81,  -81,  703,  -10,  103,  125,    2,   26,   58,   93,
 /*   110 */   -37,  175,  530,  555,  464,  530,  185,  185,  378,  273,
 /*   120 */   530,  430,  555,  462,  185,  218,  175,  114,  205,  175,
 /*   130 */   278,  234,  273,  114,  -82,  -82,  -82,  -82,  -22,   61,
 /*   140 */    27,  170,  119,  129,   99,  110,  387,  382,  383,  381,
 /*   150 */   378,  460,  459,  399,  396,  408,  323,  295,  294,  333,
 /*   160 */   405,  379,  368,  437,  378,  395,  402,  320,  334,  362,
 /*   170 */   320,  339,  340,  368,  350,  398,  295,  476,  420,  427,
 /*   180 */   400,  406,  317,  272,   66,
);
    const YY_REDUCE_USE_DFLT = -138;
    const YY_REDUCE_MAX = 137;
    static public $yy_reduce_ofst = array(
 /*     0 */   423,  535,  492,  721,  572,  684,  628,  470,  704,  799,
 /*    10 */   807,  807,  755,  853,  887, 1125, 1159, 1193, 1091, 1057,
 /*    20 */   955,  989, 1023,  921, 1227, 1261, 1465, 1499, 1431, 1397,
 /*    30 */  1295, 1329, 1363, 1533,  527,  161,  676,  762,  811, 1596,
 /*    40 */  1567,  -27, 1664, 1640,   70,  165,  935,  131,  280,  222,
 /*    50 */   -76,  109,  -68,   76,    6, -116,    5,  157,   71,  223,
 /*    60 */    18,  -65,  212,  183,  257,   92,  104,  327,  327,  327,
 /*    70 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*    80 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  438,
 /*    90 */   377,  388,  435,  436,  440,  445,  469,  472,  475,  453,
 /*   100 */   449,  447,  331,  327,  389,  457,  506,  514,  479,  461,
 /*   110 */   372,  451,  484,  497,  410,  490,  510,  507,  365,  519,
 /*   120 */   414,  422,  480,   24,  124,   91,   32,   60,  120,  192,
 /*   130 */   176,  141,  172,  -12, -137, -115,  -62,  -97,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(24, 26, 27, 28, 29, 32, 33, 34, 67, 69, 70, 71, 72, 77, ),
        /* 1 */ array(1, 5, 14, 15, 17, 24, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 2 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 3 */ array(1, 5, 14, 15, 17, 24, 34, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 4 */ array(1, 5, 14, 15, 17, 24, 34, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 5 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 6 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 7 */ array(24, 26, 27, 28, 29, 32, 33, 34, 67, 69, 70, 71, 72, 77, ),
        /* 8 */ array(24, 26, 27, 28, 29, 32, 33, 34, 67, 69, 70, 71, 72, 77, ),
        /* 9 */ array(1, 5, 14, 15, 17, 24, 34, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 10 */ array(1, 5, 14, 15, 17, 24, 25, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 11 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 12 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 13 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 14 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 15 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 16 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 17 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 18 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 19 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 20 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 21 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 22 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 23 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 24 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 25 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 26 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 27 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 28 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 29 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 30 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 31 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 32 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 33 */ array(1, 5, 14, 15, 17, 24, 81, 83, 84, 85, 86, 88, 92, 93, 94, 96, 97, 98, ),
        /* 34 */ array(5, 14, 15, 17, 81, 83, 84, 85, 86, 92, 93, 94, 96, 97, 98, ),
        /* 35 */ array(5, 14, 15, 17, 81, 83, 84, 85, 86, 92, 93, 94, 96, 97, 98, ),
        /* 36 */ array(5, 14, 15, 17, 81, 83, 84, 85, 86, 92, 93, 94, 96, 97, 98, ),
        /* 37 */ array(5, 14, 15, 17, 81, 83, 84, 85, 86, 92, 93, 94, 96, 97, 98, ),
        /* 38 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 39 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 40 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 41 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 42 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 43 */ array(5, 17, 24, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 44 */ array(5, 17, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 45 */ array(5, 17, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 46 */ array(5, 17, 73, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 47 */ array(5, 17, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 48 */ array(5, 17, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 49 */ array(5, 17, 83, 84, 86, 92, 93, 96, 97, 98, ),
        /* 50 */ array(49, 50, 51, 52, 53, 57, ),
        /* 51 */ array(53, 76, ),
        /* 52 */ array(75, 79, 80, 83, 84, 86, 92, 93, 96, ),
        /* 53 */ array(83, 84, 86, 92, 93, 96, ),
        /* 54 */ array(24, 34, 66, 76, ),
        /* 55 */ array(24, ),
        /* 56 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 48, 83, 84, 86, 87, 92, 93, 96, ),
        /* 57 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 24, 87, ),
        /* 58 */ array(75, 79, 80, 83, 84, 86, 92, 93, 96, ),
        /* 59 */ array(24, 83, 84, 86, 92, 93, 96, ),
        /* 60 */ array(17, 83, 84, 86, 92, 93, 96, ),
        /* 61 */ array(83, 84, 86, 92, 93, 96, ),
        /* 62 */ array(83, 84, 86, 92, 93, 96, ),
        /* 63 */ array(83, 84, 86, 92, 93, 96, ),
        /* 64 */ array(24, 34, ),
        /* 65 */ array(24, ),
        /* 66 */ array(24, ),
        /* 67 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 60, 61, 87, ),
        /* 68 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 47, 63, 87, ),
        /* 69 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 33, 87, ),
        /* 70 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, 91, ),
        /* 71 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, 93, ),
        /* 72 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 25, 87, ),
        /* 73 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, 91, ),
        /* 74 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 25, 87, ),
        /* 75 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 76 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 77 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 78 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 79 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 80 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 81 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 82 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 83 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 84 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 85 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 86 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 87 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 88 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 87, ),
        /* 89 */ array(48, 83, 84, 86, 92, 93, 96, ),
        /* 90 */ array(48, 83, 84, 86, 92, 93, 96, ),
        /* 91 */ array(6, 83, 84, 86, 92, 93, 96, ),
        /* 92 */ array(83, 84, 86, 92, 93, 96, ),
        /* 93 */ array(83, 84, 86, 92, 93, 96, ),
        /* 94 */ array(83, 84, 86, 92, 93, 96, ),
        /* 95 */ array(83, 84, 86, 92, 93, 96, ),
        /* 96 */ array(83, 84, 86, 92, 93, 96, ),
        /* 97 */ array(83, 84, 86, 92, 93, 96, ),
        /* 98 */ array(83, 84, 86, 92, 93, 96, ),
        /* 99 */ array(83, 84, 86, 92, 93, 96, ),
        /* 100 */ array(83, 84, 86, 92, 93, 96, ),
        /* 101 */ array(83, 84, 86, 92, 93, 96, ),
        /* 102 */ array(1, 79, 83, 84, 86, ),
        /* 103 */ array(17, 18, 19, 87, ),
        /* 104 */ array(55, 56, ),
        /* 105 */ array(1, 85, ),
        /* 106 */ array(30, 31, ),
        /* 107 */ array(46, 47, ),
        /* 108 */ array(60, 61, ),
        /* 109 */ array(24, 82, ),
        /* 110 */ array(47, 55, ),
        /* 111 */ array(24, ),
        /* 112 */ array(58, ),
        /* 113 */ array(57, ),
        /* 114 */ array(55, ),
        /* 115 */ array(58, ),
        /* 116 */ array(62, ),
        /* 117 */ array(62, ),
        /* 118 */ array(47, ),
        /* 119 */ array(31, ),
        /* 120 */ array(58, ),
        /* 121 */ array(90, ),
        /* 122 */ array(57, ),
        /* 123 */ array(34, ),
        /* 124 */ array(62, ),
        /* 125 */ array(64, ),
        /* 126 */ array(24, ),
        /* 127 */ array(54, ),
        /* 128 */ array(24, ),
        /* 129 */ array(24, ),
        /* 130 */ array(85, ),
        /* 131 */ array(82, ),
        /* 132 */ array(31, ),
        /* 133 */ array(54, ),
        /* 134 */ array(),
        /* 135 */ array(),
        /* 136 */ array(),
        /* 137 */ array(),
        /* 138 */ array(50, 51, 52, ),
        /* 139 */ array(33, 89, 90, ),
        /* 140 */ array(25, 47, ),
        /* 141 */ array(68, 78, ),
        /* 142 */ array(25, 47, ),
        /* 143 */ array(25, 47, ),
        /* 144 */ array(25, 47, ),
        /* 145 */ array(25, 47, ),
        /* 146 */ array(75, ),
        /* 147 */ array(74, ),
        /* 148 */ array(75, ),
        /* 149 */ array(70, ),
        /* 150 */ array(47, ),
        /* 151 */ array(25, ),
        /* 152 */ array(25, ),
        /* 153 */ array(81, ),
        /* 154 */ array(85, ),
        /* 155 */ array(27, ),
        /* 156 */ array(75, ),
        /* 157 */ array(95, ),
        /* 158 */ array(81, ),
        /* 159 */ array(75, ),
        /* 160 */ array(24, ),
        /* 161 */ array(48, ),
        /* 162 */ array(25, ),
        /* 163 */ array(46, ),
        /* 164 */ array(47, ),
        /* 165 */ array(25, ),
        /* 166 */ array(24, ),
        /* 167 */ array(47, ),
        /* 168 */ array(68, ),
        /* 169 */ array(6, ),
        /* 170 */ array(47, ),
        /* 171 */ array(47, ),
        /* 172 */ array(59, ),
        /* 173 */ array(25, ),
        /* 174 */ array(81, ),
        /* 175 */ array(65, ),
        /* 176 */ array(95, ),
        /* 177 */ array(13, ),
        /* 178 */ array(59, ),
        /* 179 */ array(25, ),
        /* 180 */ array(47, ),
        /* 181 */ array(47, ),
        /* 182 */ array(49, ),
        /* 183 */ array(93, ),
        /* 184 */ array(23, ),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
);
    static public $yy_default = array(
 /*     0 */   331,  499,  499,  499,  499,  499,  499,  331,  331,  499,
 /*    10 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*    20 */   499,  491,  499,  499,  499,  499,  499,  499,  499,  499,
 /*    30 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*    40 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*    50 */   373,  365,  499,  405,  499,  499,  482,  423,  499,  499,
 /*    60 */   499,  499,  499,  499,  499,  499,  493,  379,  382,  499,
 /*    70 */   499,  499,  499,  499,  479,  478,  403,  380,  372,  385,
 /*    80 */   479,  454,  439,  455,  368,  381,  437,  438,  442,  499,
 /*    90 */   356,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*   100 */   499,  499,  424,  445,  371,  499,  339,  349,  421,  428,
 /*   110 */   399,  499,  375,  373,  399,  375,  383,  383,  358,  339,
 /*   120 */   375,  499,  373,  499,  383,  386,  499,  367,  499,  499,
 /*   130 */   499,  428,  339,  367,  431,  358,  346,  407,  363,  499,
 /*   140 */   499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
 /*   150 */   348,  499,  499,  499,  499,  499,  499,  495,  499,  499,
 /*   160 */   499,  499,  465,  499,  391,  499,  396,  400,  499,  499,
 /*   170 */   398,  474,  499,  499,  499,  384,  463,  499,  499,  499,
 /*   180 */   369,  374,  499,  499,  316,  325,  410,  409,  413,  416,
 /*   190 */   323,  458,  324,  457,  408,  411,  328,  404,  330,  376,
 /*   200 */   449,  397,  395,  452,  329,  406,  327,  417,  456,  453,
 /*   210 */   326,  344,  434,  435,  436,  462,  433,  461,  432,  317,
 /*   220 */   465,  425,  429,  412,  318,  426,  496,  486,  495,  430,
 /*   230 */   472,  498,  422,  418,  459,  420,  378,  419,  440,  321,
 /*   240 */   415,  319,  460,  446,  320,  447,  414,  322,  393,  336,
 /*   250 */   466,  483,  487,  351,  337,  350,  484,  480,  387,  388,
 /*   260 */   335,  481,  345,  347,  354,  340,  343,  488,  360,  485,
 /*   270 */   470,  469,  370,  359,  361,  355,  341,  364,  362,  366,
 /*   280 */   497,  468,  471,  392,  489,  451,  450,  490,  491,  473,
 /*   290 */   333,  441,  394,  377,  338,  477,  448,  342,  357,  492,
 /*   300 */   464,  334,  401,  352,  353,  389,  443,  467,  494,  476,
 /*   310 */   390,  493,  475,  402,  444,  332,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 177;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 316;
    const YYNRULE = 183;
    const YYERRORSYMBOL = 99;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_NOT',         'T_AND',         'T_OR',        
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_LIKE',      
  'T_NE',          'T_GT',          'T_GE',          'T_LT',        
  'T_LE',          'T_IN',          'T_PLUS',        'T_MINUS',     
  'T_CONCAT',      'T_TIMES',       'T_DIV',         'T_MOD',       
  'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',  'SEMICOLON',   
  'PAR_OPEN',      'PAR_CLOSE',     'BEGIN',         'SAVEPOINT',   
  'RELEASE',       'ROLLBACK',      'TO',            'TRANSACTION', 
  'COMMIT',        'T_END',         'SELECT',        'ALL',         
  'DISTINCT',      'DISTINCTROW',   'HIGH_PRIORITY',  'STRAIGHT_JOIN',
  'SQL_SMALL_RESULT',  'SQL_BIG_RESULT',  'SQL_CACHE',     'SQL_CALC_FOUND_ROWS',
  'SQL_BUFFER_RESULT',  'SQL_NO_CACHE',  'FROM',          'COMMA',       
  'T_AS',          'JOIN',          'INNER',         'LEFT',        
  'RIGHT',         'NATURAL',       'OUTER',         'ON',          
  'USING',         'WHERE',         'ORDER',         'BY',          
  'DESC',          'ASC',           'LIMIT',         'OFFSET',      
  'GROUP',         'HAVING',        'VALUES',        'DROP',        
  'TABLE',         'DELETE',        'UPDATE',        'INSERT',      
  'REPLACE',       'INTO',          'DUPLICATE',     'KEY',         
  'SET',           'CREATE',        'VIEW',          'PRIMARY',     
  'UNIQUE',        'NUMBER',        'T_UNSIGNED',    'T_DEFAULT',   
  'COLLATE',       'T_NULL',        'AUTO_INCREMENT',  'T_IS',        
  'T_CASE',        'T_ELSE',        'WHEN',          'THEN',        
  'INTERVAL',      'ALPHA',         'T_STRING',      'T_DOT',       
  'COLUMN',        'QUESTION',      'T_DOLLAR',      'error',       
  'query',         'stmts',         'stmt',          'begin',       
  'commit',        'rollback',      'drop',          'select',      
  'insert',        'update',        'delete',        'alter_table', 
  'create_table',  'create_view',   'transaction_keyword',  'alpha',       
  'commit_keyword',  'inner_select',  'select_opts',   'expr_list_as',
  'from',          'joins',         'where',         'group_by',    
  'order_by',      'limit',         'select_mod',    'table_list',  
  'table_with_alias',  'table_name',    'join',          'join_type',   
  'join_condition',  'join_prefix',   'join_postfix',  'expr',        
  'columns',       'order_by_fields',  'order_by_field',  'expr_list_par_optional',
  'insert_stmt',   'expr_list_par_many',  'on_dup',        'set_expr',    
  'insert_table',  'set_expr_values',  'assign',        'term_colname',
  'colname',       'create_fields',  'table_opts',    'table_opt',   
  'table_key',     'term',          'create_column',  'index_list',  
  'indexes',       'index_col_name',  'length',        'order',       
  'data_type',     'column_mods',   'unsigned',      'column_mod',  
  'term_select',   'null',          'in',            'expr_list_par',
  'case',          'case_options',  'function_call',  'expr_list_par_or_null',
  'expr_list',     'expr_as',       'alpha_or_all',  'variable',    
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= PAR_OPEN stmt PAR_CLOSE",
 /*   4 */ "stmt ::= begin",
 /*   5 */ "stmt ::= commit",
 /*   6 */ "stmt ::= rollback",
 /*   7 */ "stmt ::= drop",
 /*   8 */ "stmt ::= select",
 /*   9 */ "stmt ::= insert",
 /*  10 */ "stmt ::= update",
 /*  11 */ "stmt ::= delete",
 /*  12 */ "stmt ::= alter_table",
 /*  13 */ "stmt ::= create_table",
 /*  14 */ "stmt ::= create_view",
 /*  15 */ "stmt ::=",
 /*  16 */ "begin ::= BEGIN transaction_keyword",
 /*  17 */ "begin ::= SAVEPOINT alpha",
 /*  18 */ "commit ::= commit_keyword transaction_keyword",
 /*  19 */ "commit ::= RELEASE SAVEPOINT alpha",
 /*  20 */ "rollback ::= ROLLBACK transaction_keyword",
 /*  21 */ "rollback ::= ROLLBACK TO alpha",
 /*  22 */ "transaction_keyword ::= TRANSACTION",
 /*  23 */ "transaction_keyword ::=",
 /*  24 */ "commit_keyword ::= COMMIT",
 /*  25 */ "commit_keyword ::= T_END",
 /*  26 */ "inner_select ::= PAR_OPEN inner_select PAR_CLOSE",
 /*  27 */ "inner_select ::= PAR_OPEN select PAR_CLOSE",
 /*  28 */ "select ::= SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  29 */ "select_opts ::= select_opts select_mod",
 /*  30 */ "select_opts ::=",
 /*  31 */ "select_mod ::= ALL|DISTINCT|DISTINCTROW|HIGH_PRIORITY|STRAIGHT_JOIN|SQL_SMALL_RESULT|SQL_BIG_RESULT|SQL_CACHE|SQL_CALC_FOUND_ROWS|SQL_BUFFER_RESULT|SQL_NO_CACHE",
 /*  32 */ "from ::= FROM table_list",
 /*  33 */ "from ::=",
 /*  34 */ "table_list ::= table_list COMMA table_with_alias",
 /*  35 */ "table_list ::= table_with_alias",
 /*  36 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  37 */ "table_with_alias ::= inner_select alpha",
 /*  38 */ "table_with_alias ::= table_name T_AS alpha",
 /*  39 */ "table_with_alias ::= table_name alpha",
 /*  40 */ "table_with_alias ::= table_name",
 /*  41 */ "joins ::= joins join",
 /*  42 */ "joins ::=",
 /*  43 */ "join ::= join_type JOIN table_with_alias join_condition",
 /*  44 */ "join_type ::= join_prefix INNER",
 /*  45 */ "join_type ::= join_prefix LEFT join_postfix",
 /*  46 */ "join_type ::= join_prefix RIGHT join_postfix",
 /*  47 */ "join_type ::= join_prefix",
 /*  48 */ "join_prefix ::= NATURAL",
 /*  49 */ "join_prefix ::=",
 /*  50 */ "join_postfix ::= OUTER",
 /*  51 */ "join_postfix ::=",
 /*  52 */ "join_condition ::= ON expr",
 /*  53 */ "join_condition ::= USING columns",
 /*  54 */ "join_condition ::= USING PAR_OPEN columns PAR_CLOSE",
 /*  55 */ "join_condition ::=",
 /*  56 */ "where ::= WHERE expr",
 /*  57 */ "where ::=",
 /*  58 */ "order_by ::= ORDER BY order_by_fields",
 /*  59 */ "order_by ::=",
 /*  60 */ "order_by_fields ::= order_by_fields COMMA order_by_field",
 /*  61 */ "order_by_fields ::= order_by_field",
 /*  62 */ "order_by_field ::= expr DESC|ASC",
 /*  63 */ "order_by_field ::= expr",
 /*  64 */ "limit ::= LIMIT expr OFFSET expr",
 /*  65 */ "limit ::= LIMIT expr COMMA expr",
 /*  66 */ "limit ::= LIMIT expr",
 /*  67 */ "limit ::=",
 /*  68 */ "group_by ::= GROUP BY expr_list_par_optional",
 /*  69 */ "group_by ::= GROUP BY expr_list_par_optional HAVING expr",
 /*  70 */ "group_by ::=",
 /*  71 */ "insert ::= insert_stmt select",
 /*  72 */ "insert ::= insert_stmt inner_select",
 /*  73 */ "insert ::= insert_stmt VALUES expr_list_par_many on_dup",
 /*  74 */ "insert ::= insert_stmt set_expr on_dup",
 /*  75 */ "drop ::= DROP TABLE table_list",
 /*  76 */ "delete ::= DELETE FROM table_with_alias where order_by limit",
 /*  77 */ "update ::= UPDATE table_list joins set_expr where order_by limit",
 /*  78 */ "insert_stmt ::= INSERT|REPLACE INTO insert_table",
 /*  79 */ "insert_stmt ::= INSERT|REPLACE insert_table",
 /*  80 */ "insert_table ::= table_name",
 /*  81 */ "insert_table ::= table_name PAR_OPEN columns PAR_CLOSE",
 /*  82 */ "on_dup ::= ON DUPLICATE KEY UPDATE set_expr_values",
 /*  83 */ "on_dup ::=",
 /*  84 */ "set_expr ::= SET set_expr_values",
 /*  85 */ "set_expr_values ::= set_expr_values COMMA assign",
 /*  86 */ "set_expr_values ::= assign",
 /*  87 */ "assign ::= term_colname T_EQ expr",
 /*  88 */ "create_view ::= CREATE VIEW colname T_AS select",
 /*  89 */ "create_table ::= CREATE TABLE alpha PAR_OPEN create_fields PAR_CLOSE table_opts",
 /*  90 */ "table_opts ::= table_opts table_opt",
 /*  91 */ "table_opts ::=",
 /*  92 */ "table_opt ::= table_key T_EQ term",
 /*  93 */ "table_key ::= table_key alpha",
 /*  94 */ "table_key ::= alpha",
 /*  95 */ "create_fields ::= create_fields COMMA create_column",
 /*  96 */ "create_fields ::= create_column",
 /*  97 */ "create_column ::= PRIMARY KEY index_list",
 /*  98 */ "create_column ::= UNIQUE KEY alpha index_list",
 /*  99 */ "create_column ::= KEY alpha index_list",
 /* 100 */ "index_list ::= PAR_OPEN indexes PAR_CLOSE",
 /* 101 */ "indexes ::= indexes COMMA index_col_name",
 /* 102 */ "indexes ::= index_col_name",
 /* 103 */ "index_col_name ::= expr length order",
 /* 104 */ "order ::= DESC|ASC",
 /* 105 */ "order ::=",
 /* 106 */ "length ::= PAR_OPEN NUMBER PAR_CLOSE",
 /* 107 */ "length ::=",
 /* 108 */ "create_column ::= alpha data_type column_mods",
 /* 109 */ "data_type ::= alpha unsigned",
 /* 110 */ "data_type ::= alpha PAR_OPEN NUMBER PAR_CLOSE unsigned",
 /* 111 */ "data_type ::= alpha PAR_OPEN NUMBER PAR_CLOSE unsigned",
 /* 112 */ "unsigned ::=",
 /* 113 */ "unsigned ::= T_UNSIGNED",
 /* 114 */ "column_mods ::= column_mods column_mod",
 /* 115 */ "column_mods ::=",
 /* 116 */ "column_mod ::= T_DEFAULT term",
 /* 117 */ "column_mod ::= COLLATE term",
 /* 118 */ "column_mod ::= PRIMARY KEY",
 /* 119 */ "column_mod ::= T_NOT T_NULL",
 /* 120 */ "column_mod ::= AUTO_INCREMENT",
 /* 121 */ "expr ::= expr T_AND expr",
 /* 122 */ "expr ::= expr T_OR expr",
 /* 123 */ "expr ::= T_NOT expr",
 /* 124 */ "expr ::= PAR_OPEN expr PAR_CLOSE",
 /* 125 */ "expr ::= term_select",
 /* 126 */ "expr ::= expr T_EQ|T_LIKE|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /* 127 */ "expr ::= expr T_IS T_NOT null",
 /* 128 */ "expr ::= expr T_IS null",
 /* 129 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /* 130 */ "expr ::= expr in term_select",
 /* 131 */ "expr ::= expr in expr_list_par",
 /* 132 */ "expr ::= case",
 /* 133 */ "expr ::= term",
 /* 134 */ "in ::= T_NOT T_IN",
 /* 135 */ "in ::= T_IN",
 /* 136 */ "case ::= T_CASE case_options T_END",
 /* 137 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /* 138 */ "case_options ::= case_options WHEN expr THEN expr",
 /* 139 */ "case_options ::= WHEN expr THEN expr",
 /* 140 */ "term ::= INTERVAL expr ALPHA",
 /* 141 */ "term ::= T_PLUS term",
 /* 142 */ "term ::= T_MINUS NUMBER",
 /* 143 */ "term ::= NUMBER",
 /* 144 */ "term ::= null",
 /* 145 */ "term ::= function_call",
 /* 146 */ "term ::= T_STRING",
 /* 147 */ "term ::= alpha",
 /* 148 */ "term ::= term_colname",
 /* 149 */ "term_select ::= inner_select",
 /* 150 */ "term_colname ::= colname",
 /* 151 */ "null ::= T_NULL",
 /* 152 */ "function_call ::= ALPHA expr_list_par_or_null",
 /* 153 */ "columns ::= columns COMMA alpha",
 /* 154 */ "columns ::= alpha",
 /* 155 */ "expr_list_par_or_null ::= expr_list_par",
 /* 156 */ "expr_list_par_or_null ::= PAR_OPEN PAR_CLOSE",
 /* 157 */ "expr_list_par_optional ::= expr_list_par",
 /* 158 */ "expr_list_par_optional ::= expr_list",
 /* 159 */ "expr_list_par_many ::= expr_list_par_many COMMA expr_list_par",
 /* 160 */ "expr_list_par_many ::= expr_list_par",
 /* 161 */ "expr_list_par ::= PAR_OPEN expr_list PAR_CLOSE",
 /* 162 */ "expr_list ::= expr_list COMMA expr",
 /* 163 */ "expr_list ::= expr",
 /* 164 */ "expr_list_as ::= expr_list_as COMMA expr_as",
 /* 165 */ "expr_list_as ::= expr_as",
 /* 166 */ "expr_as ::= expr",
 /* 167 */ "expr_as ::= expr T_AS alpha",
 /* 168 */ "expr_as ::= expr alpha",
 /* 169 */ "table_name ::= colname",
 /* 170 */ "colname ::= alpha T_DOT alpha_or_all",
 /* 171 */ "colname ::= alpha_or_all",
 /* 172 */ "colname ::= variable",
 /* 173 */ "alpha ::= T_DEFAULT",
 /* 174 */ "alpha ::= COLLATE",
 /* 175 */ "alpha ::= INTERVAL",
 /* 176 */ "alpha ::= AUTO_INCREMENT",
 /* 177 */ "alpha ::= ALPHA",
 /* 178 */ "alpha ::= COLUMN",
 /* 179 */ "alpha_or_all ::= alpha",
 /* 180 */ "alpha_or_all ::= T_TIMES",
 /* 181 */ "variable ::= QUESTION",
 /* 182 */ "variable ::= T_DOLLAR|T_COLON ALPHA",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 100, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 0 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 0 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 9 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 0 ),
  array( 'lhs' => 126, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 0 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 0 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 131, 'rhs' => 2 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 0 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 0 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 4 ),
  array( 'lhs' => 132, 'rhs' => 0 ),
  array( 'lhs' => 122, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 0 ),
  array( 'lhs' => 124, 'rhs' => 3 ),
  array( 'lhs' => 124, 'rhs' => 0 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 4 ),
  array( 'lhs' => 125, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 0 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 5 ),
  array( 'lhs' => 123, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 4 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 6 ),
  array( 'lhs' => 109, 'rhs' => 7 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 140, 'rhs' => 2 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 5 ),
  array( 'lhs' => 142, 'rhs' => 0 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 3 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 5 ),
  array( 'lhs' => 112, 'rhs' => 7 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 151, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 3 ),
  array( 'lhs' => 156, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 159, 'rhs' => 0 ),
  array( 'lhs' => 158, 'rhs' => 3 ),
  array( 'lhs' => 158, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 2 ),
  array( 'lhs' => 160, 'rhs' => 5 ),
  array( 'lhs' => 160, 'rhs' => 5 ),
  array( 'lhs' => 162, 'rhs' => 0 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 0 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 163, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 135, 'rhs' => 1 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 166, 'rhs' => 1 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 5 ),
  array( 'lhs' => 169, 'rhs' => 5 ),
  array( 'lhs' => 169, 'rhs' => 4 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 1 ),
  array( 'lhs' => 165, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 2 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 3 ),
  array( 'lhs' => 172, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 1 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 173, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 148, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        34 => 1,
        60 => 1,
        95 => 1,
        159 => 1,
        164 => 1,
        2 => 2,
        3 => 3,
        100 => 3,
        106 => 3,
        161 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        11 => 4,
        12 => 4,
        13 => 4,
        14 => 4,
        32 => 4,
        56 => 4,
        58 => 4,
        82 => 4,
        84 => 4,
        125 => 4,
        132 => 4,
        133 => 4,
        144 => 4,
        145 => 4,
        148 => 4,
        155 => 4,
        157 => 4,
        158 => 4,
        169 => 4,
        171 => 4,
        172 => 4,
        177 => 4,
        179 => 4,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        26 => 26,
        27 => 26,
        28 => 28,
        29 => 29,
        41 => 29,
        93 => 29,
        114 => 29,
        30 => 30,
        91 => 30,
        31 => 31,
        104 => 31,
        35 => 35,
        61 => 35,
        94 => 35,
        160 => 35,
        165 => 35,
        166 => 35,
        36 => 36,
        38 => 36,
        64 => 36,
        69 => 36,
        167 => 36,
        170 => 36,
        37 => 37,
        39 => 37,
        168 => 37,
        40 => 40,
        66 => 40,
        42 => 42,
        115 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        51 => 49,
        112 => 49,
        50 => 50,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        57 => 55,
        59 => 55,
        67 => 55,
        83 => 55,
        105 => 55,
        107 => 55,
        62 => 62,
        63 => 63,
        65 => 65,
        68 => 68,
        71 => 71,
        72 => 71,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        85 => 85,
        101 => 85,
        153 => 85,
        162 => 85,
        86 => 86,
        102 => 86,
        154 => 86,
        163 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        92 => 92,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        103 => 103,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 110,
        113 => 113,
        173 => 113,
        174 => 113,
        175 => 113,
        176 => 113,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        126 => 126,
        129 => 126,
        127 => 127,
        128 => 128,
        130 => 130,
        131 => 131,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        146 => 146,
        147 => 147,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        156 => 156,
        178 => 178,
        180 => 180,
        181 => 181,
        182 => 182,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2123 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2126 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 2129 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 2132 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2135 "src/SQLParser/Parser.php"
#line 48 "src/SQLParser/Parser.y"
    function yy_r15(){ $this->_retvalue = null;     }
#line 2138 "src/SQLParser/Parser.php"
#line 50 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = new SQL\BeginTransaction;     }
#line 2141 "src/SQLParser/Parser.php"
#line 51 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = new SQL\BeginTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2144 "src/SQLParser/Parser.php"
#line 52 "src/SQLParser/Parser.y"
    function yy_r18(){ $this->_retvalue = new SQL\CommitTransaction;     }
#line 2147 "src/SQLParser/Parser.php"
#line 53 "src/SQLParser/Parser.y"
    function yy_r19(){ $this->_retvalue = new SQL\CommitTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2150 "src/SQLParser/Parser.php"
#line 54 "src/SQLParser/Parser.y"
    function yy_r20(){ $this->_retvalue = new SQL\RollbackTransaction;     }
#line 2153 "src/SQLParser/Parser.php"
#line 55 "src/SQLParser/Parser.y"
    function yy_r21(){ $this->_retvalue = new SQL\RollbackTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2156 "src/SQLParser/Parser.php"
#line 64 "src/SQLParser/Parser.y"
    function yy_r26(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 2159 "src/SQLParser/Parser.php"
#line 68 "src/SQLParser/Parser.y"
    function yy_r28(){ 
    $this->_retvalue = new SQL\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  {
        foreach ($this->yystack[$this->yyidx + -5]->minor as $table) {
            $this->_retvalue->from($table[0], $table[1]);
        }
    }
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2175 "src/SQLParser/Parser.php"
#line 83 "src/SQLParser/Parser.y"
    function yy_r29(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2178 "src/SQLParser/Parser.php"
#line 84 "src/SQLParser/Parser.y"
    function yy_r30(){ $this->_retvalue = array();     }
#line 2181 "src/SQLParser/Parser.php"
#line 85 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = strtoupper(@$this->yystack[$this->yyidx + 0]->minor);     }
#line 2184 "src/SQLParser/Parser.php"
#line 91 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 2187 "src/SQLParser/Parser.php"
#line 93 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2190 "src/SQLParser/Parser.php"
#line 94 "src/SQLParser/Parser.y"
    function yy_r37(){ $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2193 "src/SQLParser/Parser.php"
#line 97 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];     }
#line 2196 "src/SQLParser/Parser.php"
#line 100 "src/SQLParser/Parser.y"
    function yy_r42(){ $this->_retvalue = [];     }
#line 2199 "src/SQLParser/Parser.php"
#line 102 "src/SQLParser/Parser.y"
    function yy_r43(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]); 
    if ($this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 2207 "src/SQLParser/Parser.php"
#line 109 "src/SQLParser/Parser.y"
    function yy_r44(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2210 "src/SQLParser/Parser.php"
#line 110 "src/SQLParser/Parser.y"
    function yy_r45(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2213 "src/SQLParser/Parser.php"
#line 111 "src/SQLParser/Parser.y"
    function yy_r46(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2216 "src/SQLParser/Parser.php"
#line 112 "src/SQLParser/Parser.y"
    function yy_r47(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2219 "src/SQLParser/Parser.php"
#line 114 "src/SQLParser/Parser.y"
    function yy_r48(){ $this->_retvalue = 'NATURAL';     }
#line 2222 "src/SQLParser/Parser.php"
#line 115 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = '';     }
#line 2225 "src/SQLParser/Parser.php"
#line 116 "src/SQLParser/Parser.y"
    function yy_r50(){ $this->_retvalue = 'OUTER';     }
#line 2228 "src/SQLParser/Parser.php"
#line 119 "src/SQLParser/Parser.y"
    function yy_r52(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2231 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r53(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2234 "src/SQLParser/Parser.php"
#line 121 "src/SQLParser/Parser.y"
    function yy_r54(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 2237 "src/SQLParser/Parser.php"
#line 122 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = NULL;     }
#line 2240 "src/SQLParser/Parser.php"
#line 133 "src/SQLParser/Parser.y"
    function yy_r62(){ $this->_retvalue = new Stmt\Expr(strtoupper(@$this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);     }
#line 2243 "src/SQLParser/Parser.php"
#line 134 "src/SQLParser/Parser.y"
    function yy_r63(){ $this->_retvalue = new Stmt\Expr("ASC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 2246 "src/SQLParser/Parser.php"
#line 137 "src/SQLParser/Parser.y"
    function yy_r65(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -2]->minor];     }
#line 2249 "src/SQLParser/Parser.php"
#line 141 "src/SQLParser/Parser.y"
    function yy_r68(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 2252 "src/SQLParser/Parser.php"
#line 145 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2255 "src/SQLParser/Parser.php"
#line 147 "src/SQLParser/Parser.y"
    function yy_r73(){ 
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor; $this->yystack[$this->yyidx + -3]->minor->values($this->yystack[$this->yyidx + -1]->minor); 
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2261 "src/SQLParser/Parser.php"
#line 151 "src/SQLParser/Parser.y"
    function yy_r74(){ 
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; 
    $keys   = [];
    $values = [];
    foreach ($this->yystack[$this->yyidx + -1]->minor->getExprs() as $field) {
        $member = $field->getMembers();
        $keys[]   = $member[0];
        $values[] = $member[1];
    }
    $this->yystack[$this->yyidx + -2]->minor->values([$values])->fields($keys);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2275 "src/SQLParser/Parser.php"
#line 164 "src/SQLParser/Parser.y"
    function yy_r75(){
    $this->_retvalue = new SQL\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2280 "src/SQLParser/Parser.php"
#line 168 "src/SQLParser/Parser.y"
    function yy_r76(){
    $this->_retvalue = new SQL\Delete($this->yystack[$this->yyidx + -3]->minor[0], $this->yystack[$this->yyidx + -3]->minor[1]);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2288 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r77(){
    $this->_retvalue = new SQL\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2297 "src/SQLParser/Parser.php"
#line 183 "src/SQLParser/Parser.y"
    function yy_r78(){ 
    $this->_retvalue = new SQL\Insert(@$this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0])->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2303 "src/SQLParser/Parser.php"
#line 187 "src/SQLParser/Parser.y"
    function yy_r79(){ 
    $this->_retvalue = new SQL\Insert(@$this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]); 
    }
#line 2309 "src/SQLParser/Parser.php"
#line 192 "src/SQLParser/Parser.y"
    function yy_r80(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, []];    }
#line 2312 "src/SQLParser/Parser.php"
#line 193 "src/SQLParser/Parser.y"
    function yy_r81(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 2315 "src/SQLParser/Parser.php"
#line 200 "src/SQLParser/Parser.y"
    function yy_r85(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 2318 "src/SQLParser/Parser.php"
#line 201 "src/SQLParser/Parser.y"
    function yy_r86(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 2321 "src/SQLParser/Parser.php"
#line 202 "src/SQLParser/Parser.y"
    function yy_r87(){ 
    $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); 
    }
#line 2326 "src/SQLParser/Parser.php"
#line 206 "src/SQLParser/Parser.y"
    function yy_r88(){
    $this->_retvalue = new SQL\View($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2331 "src/SQLParser/Parser.php"
#line 210 "src/SQLParser/Parser.y"
    function yy_r89(){
    $this->_retvalue = new SQL\Table($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2336 "src/SQLParser/Parser.php"
#line 214 "src/SQLParser/Parser.y"
    function yy_r90(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2339 "src/SQLParser/Parser.php"
#line 217 "src/SQLParser/Parser.y"
    function yy_r92(){  
    $this->_retvalue[implode(" ", $this->yystack[$this->yyidx + -2]->minor)] = $this->yystack[$this->yyidx + 0]->minor->getMember(0); 
    }
#line 2344 "src/SQLParser/Parser.php"
#line 225 "src/SQLParser/Parser.y"
    function yy_r96(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2347 "src/SQLParser/Parser.php"
#line 227 "src/SQLParser/Parser.y"
    function yy_r97(){
    $this->_retvalue = ['primary', $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2352 "src/SQLParser/Parser.php"
#line 230 "src/SQLParser/Parser.y"
    function yy_r98(){
    $this->_retvalue = ['unique', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2357 "src/SQLParser/Parser.php"
#line 233 "src/SQLParser/Parser.y"
    function yy_r99(){
    $this->_retvalue = ['key', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2362 "src/SQLParser/Parser.php"
#line 241 "src/SQLParser/Parser.y"
    function yy_r103(){
    $this->_retvalue = new Stmt\Expr('INDEX', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2367 "src/SQLParser/Parser.php"
#line 250 "src/SQLParser/Parser.y"
    function yy_r108(){ 
    $this->_retvalue = new Stmt\Column($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1], $this->yystack[$this->yyidx + -1]->minor[2]);
    foreach ($this->yystack[$this->yyidx + 0]->minor as $setting) {
        if (is_array($setting)) {
            $this->_retvalue->{$setting[0]}($setting[1]);
        } else {
            $this->_retvalue->$setting();
        }
    }
    }
#line 2379 "src/SQLParser/Parser.php"
#line 261 "src/SQLParser/Parser.y"
    function yy_r109(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, NULL, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2384 "src/SQLParser/Parser.php"
#line 265 "src/SQLParser/Parser.y"
    function yy_r110(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2389 "src/SQLParser/Parser.php"
#line 274 "src/SQLParser/Parser.y"
    function yy_r113(){ $this->_retvalue = @$this->yystack[$this->yyidx + 0]->minor;     }
#line 2392 "src/SQLParser/Parser.php"
#line 279 "src/SQLParser/Parser.y"
    function yy_r116(){ $this->_retvalue = ['defaultValue', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2395 "src/SQLParser/Parser.php"
#line 280 "src/SQLParser/Parser.y"
    function yy_r117(){ $this->_retvalue = ['collate', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2398 "src/SQLParser/Parser.php"
#line 281 "src/SQLParser/Parser.y"
    function yy_r118(){ $this->_retvalue = 'primaryKey';     }
#line 2401 "src/SQLParser/Parser.php"
#line 282 "src/SQLParser/Parser.y"
    function yy_r119(){    $this->_retvalue = 'notNull';     }
#line 2404 "src/SQLParser/Parser.php"
#line 283 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = 'autoincrement';     }
#line 2407 "src/SQLParser/Parser.php"
#line 286 "src/SQLParser/Parser.y"
    function yy_r121(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2410 "src/SQLParser/Parser.php"
#line 287 "src/SQLParser/Parser.y"
    function yy_r122(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2413 "src/SQLParser/Parser.php"
#line 288 "src/SQLParser/Parser.y"
    function yy_r123(){ $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2416 "src/SQLParser/Parser.php"
#line 289 "src/SQLParser/Parser.y"
    function yy_r124(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2419 "src/SQLParser/Parser.php"
#line 291 "src/SQLParser/Parser.y"
    function yy_r126(){ $this->_retvalue = new Stmt\Expr(@$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2422 "src/SQLParser/Parser.php"
#line 292 "src/SQLParser/Parser.y"
    function yy_r127(){ $this->_retvalue = new Stmt\Expr("!=", $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2425 "src/SQLParser/Parser.php"
#line 293 "src/SQLParser/Parser.y"
    function yy_r128(){ $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2428 "src/SQLParser/Parser.php"
#line 295 "src/SQLParser/Parser.y"
    function yy_r130(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2431 "src/SQLParser/Parser.php"
#line 296 "src/SQLParser/Parser.y"
    function yy_r131(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor));     }
#line 2434 "src/SQLParser/Parser.php"
#line 300 "src/SQLParser/Parser.y"
    function yy_r134(){ $this->_retvalue = 'nin';     }
#line 2437 "src/SQLParser/Parser.php"
#line 301 "src/SQLParser/Parser.y"
    function yy_r135(){ $this->_retvalue = 'in';     }
#line 2440 "src/SQLParser/Parser.php"
#line 303 "src/SQLParser/Parser.y"
    function yy_r136(){ 
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2446 "src/SQLParser/Parser.php"
#line 307 "src/SQLParser/Parser.y"
    function yy_r137(){ 
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 2452 "src/SQLParser/Parser.php"
#line 312 "src/SQLParser/Parser.y"
    function yy_r138(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2455 "src/SQLParser/Parser.php"
#line 313 "src/SQLParser/Parser.y"
    function yy_r139(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2458 "src/SQLParser/Parser.php"
#line 315 "src/SQLParser/Parser.y"
    function yy_r140(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2461 "src/SQLParser/Parser.php"
#line 316 "src/SQLParser/Parser.y"
    function yy_r141(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2464 "src/SQLParser/Parser.php"
#line 317 "src/SQLParser/Parser.y"
    function yy_r142(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 2467 "src/SQLParser/Parser.php"
#line 318 "src/SQLParser/Parser.y"
    function yy_r143(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2470 "src/SQLParser/Parser.php"
#line 321 "src/SQLParser/Parser.y"
    function yy_r146(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""));     }
#line 2473 "src/SQLParser/Parser.php"
#line 322 "src/SQLParser/Parser.y"
    function yy_r147(){ $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2476 "src/SQLParser/Parser.php"
#line 324 "src/SQLParser/Parser.y"
    function yy_r149(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2479 "src/SQLParser/Parser.php"
#line 325 "src/SQLParser/Parser.y"
    function yy_r150(){ 
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Stmt\VariablePlaceholder) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else if (is_array($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]); 
    } else {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2490 "src/SQLParser/Parser.php"
#line 335 "src/SQLParser/Parser.y"
    function yy_r151(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2493 "src/SQLParser/Parser.php"
#line 337 "src/SQLParser/Parser.y"
    function yy_r152(){ $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2496 "src/SQLParser/Parser.php"
#line 343 "src/SQLParser/Parser.y"
    function yy_r156(){ $this->_retvalue = new Stmt\ExprList();     }
#line 2499 "src/SQLParser/Parser.php"
#line 374 "src/SQLParser/Parser.y"
    function yy_r178(){ $this->_retvalue = trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t");     }
#line 2502 "src/SQLParser/Parser.php"
#line 377 "src/SQLParser/Parser.y"
    function yy_r180(){ $this->_retvalue = new Stmt\Expr("ALL");     }
#line 2505 "src/SQLParser/Parser.php"
#line 379 "src/SQLParser/Parser.y"
    function yy_r181(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2508 "src/SQLParser/Parser.php"
#line 380 "src/SQLParser/Parser.y"
    function yy_r182(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2511 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 2631 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
