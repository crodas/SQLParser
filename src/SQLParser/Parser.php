<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 102 "src/SQLParser/Parser.php"

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_NOT                          =  1;
    const T_AND                          =  2;
    const T_OR                           =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_LIKE                         =  7;
    const T_NE                           =  8;
    const T_GT                           =  9;
    const T_GE                           = 10;
    const T_LT                           = 11;
    const T_LE                           = 12;
    const T_IN                           = 13;
    const T_PLUS                         = 14;
    const T_MINUS                        = 15;
    const T_CONCAT                       = 16;
    const T_TIMES                        = 17;
    const T_DIV                          = 18;
    const T_MOD                          = 19;
    const T_PIPE                         = 20;
    const T_BITWISE                      = 21;
    const T_FILTER_PIPE                  = 22;
    const SEMICOLON                      = 23;
    const PAR_OPEN                       = 24;
    const PAR_CLOSE                      = 25;
    const SELECT                         = 26;
    const ALL                            = 27;
    const DISTINCT                       = 28;
    const DISTINCTROW                    = 29;
    const HIGH_PRIORITY                  = 30;
    const STRAIGHT_JOIN                  = 31;
    const SQL_SMALL_RESULT               = 32;
    const SQL_BIG_RESULT                 = 33;
    const SQL_CACHE                      = 34;
    const SQL_CALC_FOUND_ROWS            = 35;
    const SQL_BUFFER_RESULT              = 36;
    const SQL_NO_CACHE                   = 37;
    const FROM                           = 38;
    const COMMA                          = 39;
    const T_AS                           = 40;
    const JOIN                           = 41;
    const INNER                          = 42;
    const LEFT                           = 43;
    const RIGHT                          = 44;
    const NATURAL                        = 45;
    const OUTER                          = 46;
    const ON                             = 47;
    const USING                          = 48;
    const WHERE                          = 49;
    const ORDER                          = 50;
    const BY                             = 51;
    const DESC                           = 52;
    const ASC                            = 53;
    const LIMIT                          = 54;
    const OFFSET                         = 55;
    const GROUP                          = 56;
    const HAVING                         = 57;
    const VALUES                         = 58;
    const DROP                           = 59;
    const TABLE                          = 60;
    const DELETE                         = 61;
    const UPDATE                         = 62;
    const INSERT                         = 63;
    const REPLACE                        = 64;
    const INTO                           = 65;
    const SET                            = 66;
    const CREATE                         = 67;
    const VIEW                           = 68;
    const PRIMARY                        = 69;
    const KEY                            = 70;
    const UNIQUE                         = 71;
    const NUMBER                         = 72;
    const T_DEFAULT                      = 73;
    const COLLATE                        = 74;
    const T_NULL                         = 75;
    const AUTO_INCREMENT                 = 76;
    const T_IS                           = 77;
    const T_CASE                         = 78;
    const T_END                          = 79;
    const T_ELSE                         = 80;
    const WHEN                           = 81;
    const THEN                           = 82;
    const INTERVAL                       = 83;
    const ALPHA                          = 84;
    const T_STRING                       = 85;
    const T_DOT                          = 86;
    const COLUMN                         = 87;
    const QUESTION                       = 88;
    const T_DOLLAR                       = 89;
    const YY_NO_ACTION = 431;
    const YY_ACCEPT_ACTION = 430;
    const YY_ERROR_ACTION = 429;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1610;
static public $yy_action = array(
 /*     0 */    16,  136,   31,   55,  156,    1,  113,  309,  309,  309,
 /*    10 */   309,  230,  120,   35,  154,   13,  257,  142,  268,  141,
 /*    20 */   247,  221,  153,    6,  126,  133,  227,  227,  227,  227,
 /*    30 */   227,  227,  227,  227,  227,  227,  227,  159,   30,   28,
 /*    40 */   259,  267,   24,   24,   24,   24,   24,   24,   24,  166,
 /*    50 */    14,   14,  122,   14,   14,   14,   24,   24,   24,   24,
 /*    60 */    24,   24,   24,  166,   14,   14,  249,   14,   14,   14,
 /*    70 */   172,  175,  207,   97,  206,  253,   96,  116,  244,  112,
 /*    80 */   206,   95,   26,   61,  176,  245,  256,  269,  156,  159,
 /*    90 */    30,   28,  168,   87,   24,   24,   24,   24,   24,   24,
 /*   100 */    24,  166,   14,   14,  265,   14,   14,   14,  266,  207,
 /*   110 */   151,  261,  253,  101,  207,   38,   10,  253,   93,  254,
 /*   120 */   255,   59,  106,  256,  254,  255,   46,  101,  256,  430,
 /*   130 */   161,  198,  191,  192,  193,  194,  202,  203,  212,  213,
 /*   140 */   218,  218,  159,   30,   28,   47,  215,   24,   24,   24,
 /*   150 */    24,   24,   24,   24,  166,   14,   14,   50,   14,   14,
 /*   160 */    14,  159,   30,   28,   51,  101,   24,   24,   24,   24,
 /*   170 */    24,   24,   24,  166,   14,   14,  216,   14,   14,   14,
 /*   180 */    21,  159,   30,   28,   92,  262,   24,   24,   24,   24,
 /*   190 */    24,   24,   24,  166,   14,   14,   23,   14,   14,   14,
 /*   200 */    16,   59,  115,  136,  156,  160,  157,  221,  153,   60,
 /*   210 */   126,  121,  150,   35,  154,  173,  257,  207,  101,  109,
 /*   220 */   253,  127,  147,    6,  250,   16,  197,  254,  255,  156,
 /*   230 */   182,  256,   14,   14,   14,  230,   57,  101,   35,  154,
 /*   240 */    91,  257,  259,  267,   91,  145,   94,  149,    6,  207,
 /*   250 */   121,  136,  253,  233,   89,   39,   42,  101,   13,  254,
 /*   260 */   255,  165,   18,  256,  146,  219,  136,   88,  270,  141,
 /*   270 */   247,  175,  207,  272,  206,  253,   60,  116,  121,  187,
 /*   280 */    12,   22,   26,   61,  176,  237,  256,  269,  156,  258,
 /*   290 */   259,  267,  101,  242,  103,  104,  175,  207,    9,  206,
 /*   300 */   253,  214,  116,   19,  143,  259,  267,   26,   61,  176,
 /*   310 */    62,  256,  269,  156,  159,   30,   28,  260,   42,   24,
 /*   320 */    24,   24,   24,   24,   24,   24,  166,   14,   14,  204,
 /*   330 */    14,   14,   14,  159,   30,   28,  206,  105,   24,   24,
 /*   340 */    24,   24,   24,   24,   24,  166,   14,   14,  233,   14,
 /*   350 */    14,   14,  159,   30,   28,  252,  129,   24,   24,   24,
 /*   360 */    24,   24,   24,   24,  166,   14,   14,  232,   14,   14,
 /*   370 */    14,   16,  124,  248,  233,  156,  224,  136,  148,  189,
 /*   380 */    15,   91,  130,  246,   35,  154,   54,  257,  125,   16,
 /*   390 */   101,   25,  174,  156,    6,   90,  237,  178,   41,    5,
 /*   400 */   132,    8,   35,  154,  179,  257,  195,  271,   52,  101,
 /*   410 */    49,  183,    3,  159,   30,   28,  259,  267,   24,   24,
 /*   420 */    24,   24,   24,   24,   24,  166,   14,   14,  101,   14,
 /*   430 */    14,   14,   37,   17,   40,  185,  210,  190,  205,   44,
 /*   440 */   201,    2,  175,  207,  135,  206,  253,  102,  116,  111,
 /*   450 */    56,  137,   32,   26,   61,  176,  199,  256,  269,  156,
 /*   460 */   175,  207,   19,  206,  253,   20,  116,   11,   52,  236,
 /*   470 */   241,   26,   61,  176,    7,  256,  269,  156,  164,  191,
 /*   480 */   192,  193,  194,  202,  203,  212,  213,  138,  107,  101,
 /*   490 */   243,  171,  234,   28,  188,    4,   24,   24,   24,   24,
 /*   500 */    24,   24,   24,  166,   14,   14,  249,   14,   14,   14,
 /*   510 */   114,   51,  134,  240,  231,  156,   29,   27,  163,  196,
 /*   520 */   208,  239,  263,  108,  264,   83,   48,  257,  117,  152,
 /*   530 */   118,  136,  148,  121,   60,  209,  251,  247,  238,  123,
 /*   540 */   235,  211,  184,  313,  222,  313,  181,  223,  167,  177,
 /*   550 */   237,  169,  313,  186,  156,  162,  313,  259,  267,  313,
 /*   560 */   249,  313,   99,   35,  154,  313,  257,  101,  313,  228,
 /*   570 */   259,  267,  163,  313,  207,  313,  313,  253,  313,   53,
 /*   580 */    33,  313,  121,  207,  254,  255,  253,  313,  256,  313,
 /*   590 */   251,  247,  156,  254,  255,  313,  184,  256,  269,  156,
 /*   600 */   313,  313,  167,  177,  257,  169,  313,  186,  313,  313,
 /*   610 */   225,  259,  267,  313,  313,  140,  313,  144,   36,   43,
 /*   620 */    43,  175,  207,  128,  206,  253,  313,  313,  313,  313,
 /*   630 */    89,  313,   26,   61,  176,  313,  256,  269,  156,  313,
 /*   640 */   160,  119,  136,   88,  313,  313,  313,  155,  313,  313,
 /*   650 */   313,  313,   45,  313,  313,  313,  313,  313,  313,  163,
 /*   660 */   207,  237,  313,  253,  313,  160,   83,  313,  313,  313,
 /*   670 */   254,  255,  155,  313,  256,  269,  156,  251,  247,  313,
 /*   680 */   313,  259,  267,  184,  163,  313,  313,  313,  313,  167,
 /*   690 */   177,   69,  169,  313,  186,  313,  131,  313,  259,  267,
 /*   700 */   313,  313,  251,  247,  313,  313,  249,  313,  184,  313,
 /*   710 */   313,  313,  313,  313,  167,  177,  313,  169,  163,  186,
 /*   720 */   313,  131,  313,  259,  267,   64,  313,  158,  217,  313,
 /*   730 */   313,  313,  313,  313,  313,  249,  251,  247,  313,  313,
 /*   740 */   313,  313,  184,  313,  313,  313,  313,  163,  167,  177,
 /*   750 */   313,  169,  313,  186,   53,  313,  313,  259,  267,  313,
 /*   760 */   257,  313,  249,  313,  313,  251,  247,  313,  313,  313,
 /*   770 */   313,  184,   58,  313,  163,  313,  313,  167,  177,  313,
 /*   780 */   169,   83,  186,  313,  313,  229,  259,  267,  313,  313,
 /*   790 */   313,  313,  251,  247,  313,  313,  313,  313,  184,  160,
 /*   800 */   313,  313,  313,  313,  167,  177,  155,  169,  313,  186,
 /*   810 */   313,  131,  313,  259,  267,  313,  207,  313,  163,  253,
 /*   820 */   313,  207,  313,  313,  253,   68,  254,  255,  313,  313,
 /*   830 */   256,  254,  255,  313,  313,  256,  251,  247,  313,  313,
 /*   840 */   249,  313,  184,  313,  313,  313,  313,  313,  167,  177,
 /*   850 */   313,  169,  163,  186,  313,  313,  313,  259,  267,   64,
 /*   860 */   313,  313,  226,  313,  313,  249,  313,  313,  313,  313,
 /*   870 */   251,  247,  313,  313,  313,  313,  184,  163,  313,  313,
 /*   880 */   313,  313,  167,  177,   74,  169,  313,  186,  313,  313,
 /*   890 */   249,  259,  267,  313,  313,  251,  247,  313,  313,  313,
 /*   900 */   313,  184,  163,  313,  313,  313,  313,  167,  177,   73,
 /*   910 */   169,  313,  186,  313,  313,  313,  259,  267,  313,  313,
 /*   920 */   251,  247,  313,  313,  313,  313,  184,  313,  249,  313,
 /*   930 */   313,  313,  167,  177,  313,  169,  313,  186,  313,  313,
 /*   940 */   163,  259,  267,  313,   34,  313,  313,   71,  313,  313,
 /*   950 */   313,  313,  313,  313,  313,  249,  313,  313,  251,  247,
 /*   960 */   313,  313,  313,  313,  184,   89,  313,  163,  313,  313,
 /*   970 */   167,  177,  313,  169,   70,  186,  220,  136,   88,  259,
 /*   980 */   267,  313,  313,  313,  313,  251,  247,  313,  313,  313,
 /*   990 */   313,  184,  313,  249,  313,  313,  237,  167,  177,  313,
 /*  1000 */   169,  313,  186,  313,  313,  163,  259,  267,  313,  313,
 /*  1010 */   313,  207,   76,  313,  253,  313,  259,  267,  313,  313,
 /*  1020 */   249,  254,  255,  251,  247,  256,  313,  313,  313,  184,
 /*  1030 */   313,  313,  163,  313,  313,  167,  177,  313,  169,   85,
 /*  1040 */   186,  313,  313,  313,  259,  267,  313,  313,  313,  313,
 /*  1050 */   251,  247,  313,  313,  313,  313,  184,  313,  249,  313,
 /*  1060 */   313,  313,  167,  177,  313,  169,  313,  186,  313,  313,
 /*  1070 */   163,  259,  267,  313,  313,  313,  313,   98,  313,  313,
 /*  1080 */    89,  313,  313,  249,  313,  313,  313,  313,  251,  247,
 /*  1090 */   313,  100,  136,   88,  184,  163,  313,  313,  313,  313,
 /*  1100 */   167,  177,   63,  169,  313,  186,  313,  313,  249,  259,
 /*  1110 */   267,  237,  313,  251,  247,  313,  313,  313,  313,  184,
 /*  1120 */   163,  313,  313,  313,  313,  167,  177,   65,  169,  313,
 /*  1130 */   186,  259,  267,  313,  259,  267,  156,  313,  251,  247,
 /*  1140 */   313,  313,  249,  313,  184,  313,  313,  313,  257,  313,
 /*  1150 */   167,  177,  313,  169,  163,  186,  313,  313,  313,  259,
 /*  1160 */   267,   66,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1170 */   313,  313,  251,  247,  313,  313,  313,  313,  184,  313,
 /*  1180 */   249,  313,  313,  313,  167,  177,  313,  169,  313,  186,
 /*  1190 */   313,  313,  163,  259,  267,  313,  313,  313,  313,   86,
 /*  1200 */   313,  313,  313,  313,  207,  249,  313,  253,  313,  313,
 /*  1210 */   251,  247,  313,  313,  254,  255,  184,  163,  256,  269,
 /*  1220 */   156,  313,  167,  177,   72,  169,  313,  186,  313,  313,
 /*  1230 */   249,  259,  267,  313,  313,  251,  247,  313,  313,  313,
 /*  1240 */   313,  184,  163,  313,  313,  313,  313,  167,  177,   78,
 /*  1250 */   169,  313,  186,  313,  313,  313,  259,  267,  313,  313,
 /*  1260 */   251,  247,  313,  313,  249,  313,  184,  313,  313,  313,
 /*  1270 */   313,  313,  167,  177,  313,  169,  163,  186,  313,  313,
 /*  1280 */   313,  259,  267,   67,  313,  313,  313,  313,  313,  313,
 /*  1290 */   313,  313,  313,  313,  251,  247,  313,  313,  313,  313,
 /*  1300 */   184,  313,  249,  313,  313,  313,  167,  177,  313,  169,
 /*  1310 */   313,  186,  313,  313,  163,  259,  267,  313,  313,  313,
 /*  1320 */   313,   80,  313,  313,  313,  313,  313,  249,  313,  313,
 /*  1330 */   313,  313,  251,  247,  313,  313,  313,  313,  184,  163,
 /*  1340 */   313,  313,  313,  313,  167,  177,   79,  169,  313,  186,
 /*  1350 */   313,  313,  249,  259,  267,  313,  313,  251,  247,  313,
 /*  1360 */   313,  313,  313,  184,  163,  313,  313,  313,  313,  167,
 /*  1370 */   177,   75,  169,  313,  186,  313,  313,  313,  259,  267,
 /*  1380 */   313,  313,  251,  247,  313,  313,  249,  313,  184,  313,
 /*  1390 */   313,  313,  313,  313,  167,  177,  313,  169,  163,  186,
 /*  1400 */   313,  313,  313,  259,  267,   81,  313,  313,  313,  313,
 /*  1410 */   313,  313,  313,  313,  313,  313,  251,  247,  313,  313,
 /*  1420 */   313,  313,  184,  313,  249,  313,  313,  313,  167,  177,
 /*  1430 */   313,  169,  313,  186,  313,  313,  163,  259,  267,  313,
 /*  1440 */   313,  313,  313,   84,  313,  313,  313,  313,  313,  249,
 /*  1450 */   313,  313,  313,  313,  251,  247,  313,  313,  313,  313,
 /*  1460 */   184,  163,  313,  313,  313,  313,  167,  177,   77,  169,
 /*  1470 */   313,  186,  313,  313,  249,  259,  267,  313,  313,  251,
 /*  1480 */   247,  313,  313,  313,  313,  184,  163,  313,  313,  313,
 /*  1490 */   313,  167,  177,   82,  169,  313,  186,  313,  313,  313,
 /*  1500 */   259,  267,  313,  313,  251,  247,  313,  313,  313,  313,
 /*  1510 */   184,  313,  313,  313,  313,  313,  167,  177,  313,  169,
 /*  1520 */   313,  186,  313,  313,  313,  259,  267,  200,  191,  192,
 /*  1530 */   193,  194,  202,  203,  212,  213,  313,  313,  313,   89,
 /*  1540 */   313,  313,  313,  163,  313,  313,   89,  313,  313,  110,
 /*  1550 */   219,  136,   88,  313,  313,  313,  139,  219,  136,   88,
 /*  1560 */    51,  251,  247,  313,  313,  313,  313,  180,  313,  163,
 /*  1570 */   237,  313,  313,  313,  177,  313,  313,  237,  186,  313,
 /*  1580 */   313,  313,  259,  267,  313,  313,  313,  251,  247,  313,
 /*  1590 */   259,  267,  313,  170,  313,  313,  313,  259,  267,  313,
 /*  1600 */   177,  313,  313,  313,  186,  313,  313,  313,  259,  267,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,  114,   47,   48,    5,  103,    1,   41,   42,   43,
 /*    10 */    44,   45,  107,   14,   15,   49,   17,  130,  131,  132,
 /*    20 */   133,  116,  117,   24,  119,  114,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,   34,   35,   36,   37,    1,    2,    3,
 /*    40 */   153,  154,    6,    7,    8,    9,   10,   11,   12,   13,
 /*    50 */    14,   15,  141,   17,   18,   19,    6,    7,    8,    9,
 /*    60 */    10,   11,   12,   13,   14,   15,  102,   17,   18,   19,
 /*    70 */   114,   72,   73,  142,   75,   76,   40,   78,   95,  108,
 /*    80 */    75,   40,   83,   84,   85,  102,   87,   88,   89,    1,
 /*    90 */     2,    3,  136,  137,    6,    7,    8,    9,   10,   11,
 /*   100 */    12,   13,   14,   15,  140,   17,   18,   19,  144,   73,
 /*   110 */    56,  128,   76,   77,   73,   38,   39,   76,   60,   83,
 /*   120 */    84,  114,  107,   87,   83,   84,   68,   77,   87,   91,
 /*   130 */    92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   140 */    52,   53,    1,    2,    3,  106,  139,    6,    7,    8,
 /*   150 */     9,   10,   11,   12,   13,   14,   15,  135,   17,   18,
 /*   160 */    19,    1,    2,    3,  126,   77,    6,    7,    8,    9,
 /*   170 */    10,   11,   12,   13,   14,   15,  114,   17,   18,   19,
 /*   180 */    39,    1,    2,    3,   40,   25,    6,    7,    8,    9,
 /*   190 */    10,   11,   12,   13,   14,   15,   55,   17,   18,   19,
 /*   200 */     1,  114,   70,  114,    5,   95,   50,  116,  117,   24,
 /*   210 */   119,   26,  102,   14,   15,  153,   17,   73,   77,  128,
 /*   220 */    76,  134,  133,   24,   25,    1,  139,   83,   84,    5,
 /*   230 */    25,   87,   17,   18,   19,   45,   24,   77,   14,   15,
 /*   240 */    39,   17,  153,  154,   39,   69,   70,   71,   24,   73,
 /*   250 */    26,  114,   76,  114,  102,   39,   66,   77,   49,   83,
 /*   260 */    84,  122,   82,   87,  112,  113,  114,  115,  131,  132,
 /*   270 */   133,   72,   73,  110,   75,   76,   24,   78,   26,   79,
 /*   280 */    80,   81,   83,   84,   85,  133,   87,   88,   89,   25,
 /*   290 */   153,  154,   77,   42,   43,   44,   72,   73,   24,   75,
 /*   300 */    76,  140,   78,   39,  127,  153,  154,   83,   84,   85,
 /*   310 */    58,   87,   88,   89,    1,    2,    3,  140,   66,    6,
 /*   320 */     7,    8,    9,   10,   11,   12,   13,   14,   15,  145,
 /*   330 */    17,   18,   19,    1,    2,    3,   75,  109,    6,    7,
 /*   340 */     8,    9,   10,   11,   12,   13,   14,   15,  114,   17,
 /*   350 */    18,   19,    1,    2,    3,  110,  122,    6,    7,    8,
 /*   360 */     9,   10,   11,   12,   13,   14,   15,   25,   17,   18,
 /*   370 */    19,    1,   25,  140,  114,    5,  114,  114,  115,  140,
 /*   380 */    54,   39,  122,  150,   14,   15,   39,   17,  148,    1,
 /*   390 */    77,   81,  129,    5,   24,   70,  133,   84,   38,   51,
 /*   400 */    72,   39,   14,   15,   13,   17,   75,   84,  146,   77,
 /*   410 */    24,   79,   24,    1,    2,    3,  153,  154,    6,    7,
 /*   420 */     8,    9,   10,   11,   12,   13,   14,   15,   77,   17,
 /*   430 */    18,   19,   60,   82,   41,   72,   25,   70,   25,   39,
 /*   440 */    25,   51,   72,   73,    1,   75,   76,   39,   78,   40,
 /*   450 */    86,   24,   23,   83,   84,   85,   25,   87,   88,   89,
 /*   460 */    72,   73,   39,   75,   76,    6,   78,   57,  146,  114,
 /*   470 */   114,   83,   84,   85,   24,   87,   88,   89,   93,   94,
 /*   480 */    95,   96,   97,   98,   99,  100,  101,  114,  114,   77,
 /*   490 */   114,  114,  114,    3,   95,   24,    6,    7,    8,    9,
 /*   500 */    10,   11,   12,   13,   14,   15,  102,   17,   18,   19,
 /*   510 */   114,  126,   69,   46,  120,    5,   73,   74,  114,   76,
 /*   520 */   145,  120,  140,  107,  110,  121,  106,   17,  109,  125,
 /*   530 */   109,  114,  115,   26,   24,  140,  132,  133,  114,  105,
 /*   540 */   118,  143,  138,  155,  140,  155,  129,  114,  144,  145,
 /*   550 */   133,  147,  155,  149,    5,  151,  155,  153,  154,  155,
 /*   560 */   102,  155,  104,   14,   15,  155,   17,   77,  155,  111,
 /*   570 */   153,  154,  114,  155,   73,  155,  155,   76,  155,  121,
 /*   580 */    24,  155,   26,   73,   83,   84,   76,  155,   87,  155,
 /*   590 */   132,  133,    5,   83,   84,  155,  138,   87,   88,   89,
 /*   600 */   155,  155,  144,  145,   17,  147,  155,  149,  155,  155,
 /*   610 */   152,  153,  154,  155,  155,   59,  155,   61,   62,   63,
 /*   620 */    64,   72,   73,   67,   75,   76,  155,  155,  155,  155,
 /*   630 */   102,  155,   83,   84,   85,  155,   87,   88,   89,  155,
 /*   640 */    95,  113,  114,  115,  155,  155,  155,  102,  155,  155,
 /*   650 */   155,  155,   65,  155,  155,  155,  155,  155,  155,  114,
 /*   660 */    73,  133,  155,   76,  155,   95,  121,  155,  155,  155,
 /*   670 */    83,   84,  102,  155,   87,   88,   89,  132,  133,  155,
 /*   680 */   155,  153,  154,  138,  114,  155,  155,  155,  155,  144,
 /*   690 */   145,  121,  147,  155,  149,  155,  151,  155,  153,  154,
 /*   700 */   155,  155,  132,  133,  155,  155,  102,  155,  138,  155,
 /*   710 */   155,  155,  155,  155,  144,  145,  155,  147,  114,  149,
 /*   720 */   155,  151,  155,  153,  154,  121,  155,  123,  124,  155,
 /*   730 */   155,  155,  155,  155,  155,  102,  132,  133,  155,  155,
 /*   740 */   155,  155,  138,  155,  155,  155,  155,  114,  144,  145,
 /*   750 */   155,  147,  155,  149,  121,  155,  155,  153,  154,  155,
 /*   760 */    17,  155,  102,  155,  155,  132,  133,  155,  155,  155,
 /*   770 */   155,  138,   24,  155,  114,  155,  155,  144,  145,  155,
 /*   780 */   147,  121,  149,  155,  155,  152,  153,  154,  155,  155,
 /*   790 */   155,  155,  132,  133,  155,  155,  155,  155,  138,   95,
 /*   800 */   155,  155,  155,  155,  144,  145,  102,  147,  155,  149,
 /*   810 */   155,  151,  155,  153,  154,  155,   73,  155,  114,   76,
 /*   820 */   155,   73,  155,  155,   76,  121,   83,   84,  155,  155,
 /*   830 */    87,   83,   84,  155,  155,   87,  132,  133,  155,  155,
 /*   840 */   102,  155,  138,  155,  155,  155,  155,  155,  144,  145,
 /*   850 */   155,  147,  114,  149,  155,  155,  155,  153,  154,  121,
 /*   860 */   155,  155,  124,  155,  155,  102,  155,  155,  155,  155,
 /*   870 */   132,  133,  155,  155,  155,  155,  138,  114,  155,  155,
 /*   880 */   155,  155,  144,  145,  121,  147,  155,  149,  155,  155,
 /*   890 */   102,  153,  154,  155,  155,  132,  133,  155,  155,  155,
 /*   900 */   155,  138,  114,  155,  155,  155,  155,  144,  145,  121,
 /*   910 */   147,  155,  149,  155,  155,  155,  153,  154,  155,  155,
 /*   920 */   132,  133,  155,  155,  155,  155,  138,  155,  102,  155,
 /*   930 */   155,  155,  144,  145,  155,  147,  155,  149,  155,  155,
 /*   940 */   114,  153,  154,  155,    6,  155,  155,  121,  155,  155,
 /*   950 */   155,  155,  155,  155,  155,  102,  155,  155,  132,  133,
 /*   960 */   155,  155,  155,  155,  138,  102,  155,  114,  155,  155,
 /*   970 */   144,  145,  155,  147,  121,  149,  113,  114,  115,  153,
 /*   980 */   154,  155,  155,  155,  155,  132,  133,  155,  155,  155,
 /*   990 */   155,  138,  155,  102,  155,  155,  133,  144,  145,  155,
 /*  1000 */   147,  155,  149,  155,  155,  114,  153,  154,  155,  155,
 /*  1010 */   155,   73,  121,  155,   76,  155,  153,  154,  155,  155,
 /*  1020 */   102,   83,   84,  132,  133,   87,  155,  155,  155,  138,
 /*  1030 */   155,  155,  114,  155,  155,  144,  145,  155,  147,  121,
 /*  1040 */   149,  155,  155,  155,  153,  154,  155,  155,  155,  155,
 /*  1050 */   132,  133,  155,  155,  155,  155,  138,  155,  102,  155,
 /*  1060 */   155,  155,  144,  145,  155,  147,  155,  149,  155,  155,
 /*  1070 */   114,  153,  154,  155,  155,  155,  155,  121,  155,  155,
 /*  1080 */   102,  155,  155,  102,  155,  155,  155,  155,  132,  133,
 /*  1090 */   155,  113,  114,  115,  138,  114,  155,  155,  155,  155,
 /*  1100 */   144,  145,  121,  147,  155,  149,  155,  155,  102,  153,
 /*  1110 */   154,  133,  155,  132,  133,  155,  155,  155,  155,  138,
 /*  1120 */   114,  155,  155,  155,  155,  144,  145,  121,  147,  155,
 /*  1130 */   149,  153,  154,  155,  153,  154,    5,  155,  132,  133,
 /*  1140 */   155,  155,  102,  155,  138,  155,  155,  155,   17,  155,
 /*  1150 */   144,  145,  155,  147,  114,  149,  155,  155,  155,  153,
 /*  1160 */   154,  121,  155,  155,  155,  155,  155,  155,  155,  155,
 /*  1170 */   155,  155,  132,  133,  155,  155,  155,  155,  138,  155,
 /*  1180 */   102,  155,  155,  155,  144,  145,  155,  147,  155,  149,
 /*  1190 */   155,  155,  114,  153,  154,  155,  155,  155,  155,  121,
 /*  1200 */   155,  155,  155,  155,   73,  102,  155,   76,  155,  155,
 /*  1210 */   132,  133,  155,  155,   83,   84,  138,  114,   87,   88,
 /*  1220 */    89,  155,  144,  145,  121,  147,  155,  149,  155,  155,
 /*  1230 */   102,  153,  154,  155,  155,  132,  133,  155,  155,  155,
 /*  1240 */   155,  138,  114,  155,  155,  155,  155,  144,  145,  121,
 /*  1250 */   147,  155,  149,  155,  155,  155,  153,  154,  155,  155,
 /*  1260 */   132,  133,  155,  155,  102,  155,  138,  155,  155,  155,
 /*  1270 */   155,  155,  144,  145,  155,  147,  114,  149,  155,  155,
 /*  1280 */   155,  153,  154,  121,  155,  155,  155,  155,  155,  155,
 /*  1290 */   155,  155,  155,  155,  132,  133,  155,  155,  155,  155,
 /*  1300 */   138,  155,  102,  155,  155,  155,  144,  145,  155,  147,
 /*  1310 */   155,  149,  155,  155,  114,  153,  154,  155,  155,  155,
 /*  1320 */   155,  121,  155,  155,  155,  155,  155,  102,  155,  155,
 /*  1330 */   155,  155,  132,  133,  155,  155,  155,  155,  138,  114,
 /*  1340 */   155,  155,  155,  155,  144,  145,  121,  147,  155,  149,
 /*  1350 */   155,  155,  102,  153,  154,  155,  155,  132,  133,  155,
 /*  1360 */   155,  155,  155,  138,  114,  155,  155,  155,  155,  144,
 /*  1370 */   145,  121,  147,  155,  149,  155,  155,  155,  153,  154,
 /*  1380 */   155,  155,  132,  133,  155,  155,  102,  155,  138,  155,
 /*  1390 */   155,  155,  155,  155,  144,  145,  155,  147,  114,  149,
 /*  1400 */   155,  155,  155,  153,  154,  121,  155,  155,  155,  155,
 /*  1410 */   155,  155,  155,  155,  155,  155,  132,  133,  155,  155,
 /*  1420 */   155,  155,  138,  155,  102,  155,  155,  155,  144,  145,
 /*  1430 */   155,  147,  155,  149,  155,  155,  114,  153,  154,  155,
 /*  1440 */   155,  155,  155,  121,  155,  155,  155,  155,  155,  102,
 /*  1450 */   155,  155,  155,  155,  132,  133,  155,  155,  155,  155,
 /*  1460 */   138,  114,  155,  155,  155,  155,  144,  145,  121,  147,
 /*  1470 */   155,  149,  155,  155,  102,  153,  154,  155,  155,  132,
 /*  1480 */   133,  155,  155,  155,  155,  138,  114,  155,  155,  155,
 /*  1490 */   155,  144,  145,  121,  147,  155,  149,  155,  155,  155,
 /*  1500 */   153,  154,  155,  155,  132,  133,  155,  155,  155,  155,
 /*  1510 */   138,  155,  155,  155,  155,  155,  144,  145,  155,  147,
 /*  1520 */   155,  149,  155,  155,  155,  153,  154,   93,   94,   95,
 /*  1530 */    96,   97,   98,   99,  100,  101,  155,  155,  155,  102,
 /*  1540 */   155,  155,  155,  114,  155,  155,  102,  155,  155,  112,
 /*  1550 */   113,  114,  115,  155,  155,  155,  112,  113,  114,  115,
 /*  1560 */   126,  132,  133,  155,  155,  155,  155,  138,  155,  114,
 /*  1570 */   133,  155,  155,  155,  145,  155,  155,  133,  149,  155,
 /*  1580 */   155,  155,  153,  154,  155,  155,  155,  132,  133,  155,
 /*  1590 */   153,  154,  155,  138,  155,  155,  155,  153,  154,  155,
 /*  1600 */   145,  155,  155,  155,  149,  155,  155,  155,  153,  154,
);
    const YY_SHIFT_USE_DFLT = -46;
    const YY_SHIFT_MAX = 165;
    static public $yy_shift_ofst = array(
 /*     0 */   556,   -1,  388,  224,  224,  370,  224,  199,  370,  370,
 /*    10 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*    20 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*    30 */   370,  370,  556,  556,  549,  549,  510,  510,  510,  510,
 /*    40 */   510,  510, 1131,  587, 1131, 1131, 1131,  -34,  190,  176,
 /*    50 */   501,  252,  471,   36,  176,  748,  743,  501,  501,  501,
 /*    60 */   185,  450,  274,  141,   88,  313,  351,  332,  160,  160,
 /*    70 */   180,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*    80 */   412,  412,  412,  412,  490,   50,   50,  938,   41,  144,
 /*    90 */   501,  501,  501,  501,  501,  501,  501,  443,  215,   77,
 /*   100 */   -45,    5,  274,  467,  467,  326,  156,  274,  156,  209,
 /*   110 */   216,  507,  156,  261,  274,  274,  310,  326,  326,  209,
 /*   120 */    54,  -46,  -46,  -46,  -46,  200,  251,  347,   58,  342,
 /*   130 */   205,  264,  431,  427,  367,  331,  364,  328,  386,  216,
 /*   140 */   372,  459,  400,  408,  360,  132,  216,  409,  212,  325,
 /*   150 */   411,  390,  410,  393,  363,  411,  323,  348,  362,  391,
 /*   160 */   413,  429,  423,  364,  415,  201,
);
    const YY_REDUCE_USE_DFLT = -114;
    const YY_REDUCE_MAX = 124;
    static public $yy_reduce_ofst = array(
 /*     0 */    38,  458,  404,  570,  545,  604,  704,  660,  738,  660,
 /*    10 */   633, 1225, 1162, 1347,  956,  981, 1372, 1200,  788, 1250,
 /*    20 */   763,  826,  853, 1128, 1078, 1040, 1006,  891,  918, 1103,
 /*    30 */  1322, 1284, 1434,  385, 1455, 1429, 1437, 1444,  152,  863,
 /*    40 */   978,  528, -113,  417,  137,  263,   89,  -95,   91,   87,
 /*    50 */   -44,  -17,  -36,  262,    7,  139,   62,  260,  234,  -89,
 /*    60 */   110,  233,  177,  322,  322,  322,  322,  322,  322,  322,
 /*    70 */   322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
 /*    80 */   322,  322,  322,  322,  322,  322,  322,  377,  378,  376,
 /*    90 */   374,  355,  356,  373,  396,  424,  433,  398,  322,  434,
 /*   100 */   422,  375,  382,  401,  394,  414,  419,  395,  421,  416,
 /*   110 */   420,  399,  228,  184,  161,  239,  240,  245,  163,   15,
 /*   120 */   -29,  -98,  -69,   39,   22,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(24, 26, 59, 61, 62, 63, 64, 67, ),
        /* 1 */ array(1, 5, 14, 15, 17, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 2 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 3 */ array(1, 5, 14, 15, 17, 24, 26, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 4 */ array(1, 5, 14, 15, 17, 24, 26, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 5 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 6 */ array(1, 5, 14, 15, 17, 24, 26, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 7 */ array(1, 5, 14, 15, 17, 24, 25, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 8 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 9 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 10 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 11 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 12 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 13 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 14 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 15 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 16 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 17 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 18 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 19 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 20 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 21 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 22 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 23 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 24 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 25 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 26 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 27 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 28 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 29 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 30 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 31 */ array(1, 5, 14, 15, 17, 24, 72, 73, 75, 76, 78, 83, 84, 85, 87, 88, 89, ),
        /* 32 */ array(24, 26, 59, 61, 62, 63, 64, 67, ),
        /* 33 */ array(24, 26, 59, 61, 62, 63, 64, 67, ),
        /* 34 */ array(5, 14, 15, 17, 72, 73, 75, 76, 83, 84, 85, 87, 88, 89, ),
        /* 35 */ array(5, 14, 15, 17, 72, 73, 75, 76, 83, 84, 85, 87, 88, 89, ),
        /* 36 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 37 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 38 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 39 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 40 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 41 */ array(5, 17, 24, 73, 76, 83, 84, 87, 88, 89, ),
        /* 42 */ array(5, 17, 73, 76, 83, 84, 87, 88, 89, ),
        /* 43 */ array(5, 17, 65, 73, 76, 83, 84, 87, 88, 89, ),
        /* 44 */ array(5, 17, 73, 76, 83, 84, 87, 88, 89, ),
        /* 45 */ array(5, 17, 73, 76, 83, 84, 87, 88, 89, ),
        /* 46 */ array(5, 17, 73, 76, 83, 84, 87, 88, 89, ),
        /* 47 */ array(41, 42, 43, 44, 45, 49, ),
        /* 48 */ array(45, 66, ),
        /* 49 */ array(69, 70, 71, 73, 76, 83, 84, 87, ),
        /* 50 */ array(73, 76, 83, 84, 87, ),
        /* 51 */ array(24, 26, 58, 66, ),
        /* 52 */ array(24, ),
        /* 53 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 40, 73, 76, 77, 83, 84, 87, ),
        /* 54 */ array(69, 70, 71, 73, 76, 83, 84, 87, ),
        /* 55 */ array(24, 73, 76, 83, 84, 87, ),
        /* 56 */ array(17, 73, 76, 83, 84, 87, ),
        /* 57 */ array(73, 76, 83, 84, 87, ),
        /* 58 */ array(73, 76, 83, 84, 87, ),
        /* 59 */ array(73, 76, 83, 84, 87, ),
        /* 60 */ array(24, 26, ),
        /* 61 */ array(24, ),
        /* 62 */ array(24, ),
        /* 63 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 39, 55, 77, ),
        /* 64 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 52, 53, 77, ),
        /* 65 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, 84, ),
        /* 66 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, 82, ),
        /* 67 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, 79, ),
        /* 68 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 25, 77, ),
        /* 69 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 25, 77, ),
        /* 70 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, 82, ),
        /* 71 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 72 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 73 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 74 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 75 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 76 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 77 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 78 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 79 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 80 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 81 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 82 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 83 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 84 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 85 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 86 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 77, ),
        /* 87 */ array(6, 73, 76, 83, 84, 87, ),
        /* 88 */ array(40, 73, 76, 83, 84, 87, ),
        /* 89 */ array(40, 73, 76, 83, 84, 87, ),
        /* 90 */ array(73, 76, 83, 84, 87, ),
        /* 91 */ array(73, 76, 83, 84, 87, ),
        /* 92 */ array(73, 76, 83, 84, 87, ),
        /* 93 */ array(73, 76, 83, 84, 87, ),
        /* 94 */ array(73, 76, 83, 84, 87, ),
        /* 95 */ array(73, 76, 83, 84, 87, ),
        /* 96 */ array(73, 76, 83, 84, 87, ),
        /* 97 */ array(1, 69, 73, 74, 76, ),
        /* 98 */ array(17, 18, 19, 77, ),
        /* 99 */ array(38, 39, ),
        /* 100 */ array(47, 48, ),
        /* 101 */ array(1, 75, ),
        /* 102 */ array(24, ),
        /* 103 */ array(46, ),
        /* 104 */ array(46, ),
        /* 105 */ array(54, ),
        /* 106 */ array(50, ),
        /* 107 */ array(24, ),
        /* 108 */ array(50, ),
        /* 109 */ array(49, ),
        /* 110 */ array(39, ),
        /* 111 */ array(26, ),
        /* 112 */ array(50, ),
        /* 113 */ array(75, ),
        /* 114 */ array(24, ),
        /* 115 */ array(24, ),
        /* 116 */ array(81, ),
        /* 117 */ array(54, ),
        /* 118 */ array(54, ),
        /* 119 */ array(49, ),
        /* 120 */ array(56, ),
        /* 121 */ array(),
        /* 122 */ array(),
        /* 123 */ array(),
        /* 124 */ array(),
        /* 125 */ array(79, 80, 81, ),
        /* 126 */ array(42, 43, 44, ),
        /* 127 */ array(25, 39, ),
        /* 128 */ array(60, 68, ),
        /* 129 */ array(25, 39, ),
        /* 130 */ array(25, 39, ),
        /* 131 */ array(25, 39, ),
        /* 132 */ array(25, ),
        /* 133 */ array(24, ),
        /* 134 */ array(70, ),
        /* 135 */ array(75, ),
        /* 136 */ array(86, ),
        /* 137 */ array(72, ),
        /* 138 */ array(24, ),
        /* 139 */ array(39, ),
        /* 140 */ array(60, ),
        /* 141 */ array(6, ),
        /* 142 */ array(39, ),
        /* 143 */ array(39, ),
        /* 144 */ array(38, ),
        /* 145 */ array(70, ),
        /* 146 */ array(39, ),
        /* 147 */ array(40, ),
        /* 148 */ array(24, ),
        /* 149 */ array(70, ),
        /* 150 */ array(25, ),
        /* 151 */ array(51, ),
        /* 152 */ array(57, ),
        /* 153 */ array(41, ),
        /* 154 */ array(72, ),
        /* 155 */ array(25, ),
        /* 156 */ array(84, ),
        /* 157 */ array(51, ),
        /* 158 */ array(39, ),
        /* 159 */ array(13, ),
        /* 160 */ array(25, ),
        /* 161 */ array(23, ),
        /* 162 */ array(39, ),
        /* 163 */ array(86, ),
        /* 164 */ array(25, ),
        /* 165 */ array(39, ),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
);
    static public $yy_default = array(
 /*     0 */   285,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*    10 */   429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*    20 */   429,  429,  429,  429,  429,  429,  421,  429,  429,  429,
 /*    30 */   429,  429,  285,  285,  429,  429,  429,  429,  429,  429,
 /*    40 */   429,  429,  429,  429,  429,  429,  429,  317,  309,  429,
 /*    50 */   347,  429,  429,  413,  429,  429,  429,  429,  429,  429,
 /*    60 */   429,  423,  429,  326,  323,  429,  429,  429,  429,  410,
 /*    70 */   429,  325,  363,  385,  345,  409,  364,  316,  324,  329,
 /*    80 */   386,  312,  370,  410,  368,  369,  373,  429,  300,  429,
 /*    90 */   429,  429,  429,  429,  429,  429,  429,  358,  376,  293,
 /*   100 */   315,  429,  429,  311,  311,  327,  319,  429,  319,  317,
 /*   110 */   302,  429,  319,  429,  429,  429,  429,  327,  327,  317,
 /*   120 */   330,  290,  362,  302,  349,  429,  307,  429,  429,  429,
 /*   130 */   429,  429,  429,  359,  429,  429,  425,  429,  429,  335,
 /*   140 */   429,  429,  342,  333,  429,  429,  292,  429,  340,  429,
 /*   150 */   429,  429,  328,  429,  429,  396,  429,  429,  318,  429,
 /*   160 */   429,  273,  405,  394,  429,  313,  382,  372,  348,  379,
 /*   170 */   350,  351,  352,  417,  338,  390,  393,  391,  387,  381,
 /*   180 */   388,  339,  341,  384,  380,  389,  392,  383,  346,  355,
 /*   190 */   365,  277,  278,  279,  280,  366,  367,  354,  275,  360,
 /*   200 */   274,  276,  281,  282,  374,  287,  398,  420,  375,  356,
 /*   210 */   286,  361,  283,  284,  357,  353,  425,  321,  322,  295,
 /*   220 */   294,  301,  404,  414,  415,  412,  320,  291,  289,  411,
 /*   230 */   308,  306,  314,  401,  299,  303,  400,  416,  298,  305,
 /*   240 */   310,  296,  304,  297,  331,  332,  399,  397,  402,  396,
 /*   250 */   403,  395,  336,  422,  421,  423,  424,  426,  408,  418,
 /*   260 */   407,  334,  371,  406,  288,  378,  377,  419,  344,  427,
 /*   270 */   343,  428,  337,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 156;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 273;
    const YYNRULE = 156;
    const YYERRORSYMBOL = 90;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_NOT',         'T_AND',         'T_OR',        
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_LIKE',      
  'T_NE',          'T_GT',          'T_GE',          'T_LT',        
  'T_LE',          'T_IN',          'T_PLUS',        'T_MINUS',     
  'T_CONCAT',      'T_TIMES',       'T_DIV',         'T_MOD',       
  'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',  'SEMICOLON',   
  'PAR_OPEN',      'PAR_CLOSE',     'SELECT',        'ALL',         
  'DISTINCT',      'DISTINCTROW',   'HIGH_PRIORITY',  'STRAIGHT_JOIN',
  'SQL_SMALL_RESULT',  'SQL_BIG_RESULT',  'SQL_CACHE',     'SQL_CALC_FOUND_ROWS',
  'SQL_BUFFER_RESULT',  'SQL_NO_CACHE',  'FROM',          'COMMA',       
  'T_AS',          'JOIN',          'INNER',         'LEFT',        
  'RIGHT',         'NATURAL',       'OUTER',         'ON',          
  'USING',         'WHERE',         'ORDER',         'BY',          
  'DESC',          'ASC',           'LIMIT',         'OFFSET',      
  'GROUP',         'HAVING',        'VALUES',        'DROP',        
  'TABLE',         'DELETE',        'UPDATE',        'INSERT',      
  'REPLACE',       'INTO',          'SET',           'CREATE',      
  'VIEW',          'PRIMARY',       'KEY',           'UNIQUE',      
  'NUMBER',        'T_DEFAULT',     'COLLATE',       'T_NULL',      
  'AUTO_INCREMENT',  'T_IS',          'T_CASE',        'T_END',       
  'T_ELSE',        'WHEN',          'THEN',          'INTERVAL',    
  'ALPHA',         'T_STRING',      'T_DOT',         'COLUMN',      
  'QUESTION',      'T_DOLLAR',      'error',         'query',       
  'stmts',         'stmt',          'drop',          'select',      
  'insert',        'update',        'delete',        'alter_table', 
  'create_table',  'create_view',   'inner_select',  'select_opts', 
  'expr_list_as',  'from',          'joins',         'where',       
  'group_by',      'order_by',      'limit',         'select_mod',  
  'table_list',    'table_with_alias',  'alpha',         'table_name',  
  'join',          'join_type',     'join_condition',  'join_prefix', 
  'join_postfix',  'expr',          'columns',       'order_by_fields',
  'order_by_field',  'expr_list_par_optional',  'insert_stmt',   'expr_list_par_many',
  'set_expr',      'insert_table',  'set_expr_values',  'assign',      
  'term_colname',  'colname',       'create_fields',  'table_opts',  
  'table_opt',     'table_key',     'term',          'create_column',
  'expr_list_par',  'data_type',     'column_mods',   'column_mod',  
  'term_select',   'null',          'in',            'case',        
  'case_options',  'function_call',  'expr_list_par_or_null',  'expr_list',   
  'expr_as',       'alpha_or_all',  'variable',    
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= PAR_OPEN stmt PAR_CLOSE",
 /*   4 */ "stmt ::= drop",
 /*   5 */ "stmt ::= select",
 /*   6 */ "stmt ::= insert",
 /*   7 */ "stmt ::= update",
 /*   8 */ "stmt ::= delete",
 /*   9 */ "stmt ::= alter_table",
 /*  10 */ "stmt ::= create_table",
 /*  11 */ "stmt ::= create_view",
 /*  12 */ "stmt ::=",
 /*  13 */ "inner_select ::= PAR_OPEN inner_select PAR_CLOSE",
 /*  14 */ "inner_select ::= PAR_OPEN select PAR_CLOSE",
 /*  15 */ "select ::= SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  16 */ "select_opts ::= select_opts select_mod",
 /*  17 */ "select_opts ::=",
 /*  18 */ "select_mod ::= ALL|DISTINCT|DISTINCTROW|HIGH_PRIORITY|STRAIGHT_JOIN|SQL_SMALL_RESULT|SQL_BIG_RESULT|SQL_CACHE|SQL_CALC_FOUND_ROWS|SQL_BUFFER_RESULT|SQL_NO_CACHE",
 /*  19 */ "from ::= FROM table_list",
 /*  20 */ "from ::=",
 /*  21 */ "table_list ::= table_list COMMA table_with_alias",
 /*  22 */ "table_list ::= table_with_alias",
 /*  23 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  24 */ "table_with_alias ::= inner_select alpha",
 /*  25 */ "table_with_alias ::= table_name T_AS alpha",
 /*  26 */ "table_with_alias ::= table_name alpha",
 /*  27 */ "table_with_alias ::= table_name",
 /*  28 */ "joins ::= joins join",
 /*  29 */ "joins ::=",
 /*  30 */ "join ::= join_type JOIN table_with_alias join_condition",
 /*  31 */ "join_type ::= join_prefix INNER",
 /*  32 */ "join_type ::= join_prefix LEFT join_postfix",
 /*  33 */ "join_type ::= join_prefix RIGHT join_postfix",
 /*  34 */ "join_type ::= join_prefix",
 /*  35 */ "join_prefix ::= NATURAL",
 /*  36 */ "join_prefix ::=",
 /*  37 */ "join_postfix ::= OUTER",
 /*  38 */ "join_postfix ::=",
 /*  39 */ "join_condition ::= ON expr",
 /*  40 */ "join_condition ::= USING columns",
 /*  41 */ "join_condition ::= USING PAR_OPEN columns PAR_CLOSE",
 /*  42 */ "join_condition ::=",
 /*  43 */ "where ::= WHERE expr",
 /*  44 */ "where ::=",
 /*  45 */ "order_by ::= ORDER BY order_by_fields",
 /*  46 */ "order_by ::=",
 /*  47 */ "order_by_fields ::= order_by_fields COMMA order_by_field",
 /*  48 */ "order_by_fields ::= order_by_field",
 /*  49 */ "order_by_field ::= expr DESC|ASC",
 /*  50 */ "order_by_field ::= expr",
 /*  51 */ "limit ::= LIMIT expr OFFSET expr",
 /*  52 */ "limit ::= LIMIT expr COMMA expr",
 /*  53 */ "limit ::= LIMIT expr",
 /*  54 */ "limit ::=",
 /*  55 */ "group_by ::= GROUP BY expr_list_par_optional",
 /*  56 */ "group_by ::= GROUP BY expr_list_par_optional HAVING expr",
 /*  57 */ "group_by ::=",
 /*  58 */ "insert ::= insert_stmt select",
 /*  59 */ "insert ::= insert_stmt inner_select",
 /*  60 */ "insert ::= insert_stmt VALUES expr_list_par_many",
 /*  61 */ "insert ::= insert_stmt set_expr",
 /*  62 */ "drop ::= DROP TABLE table_list",
 /*  63 */ "delete ::= DELETE FROM table_with_alias where order_by limit",
 /*  64 */ "update ::= UPDATE table_list joins set_expr where order_by limit",
 /*  65 */ "insert_stmt ::= INSERT|REPLACE INTO insert_table",
 /*  66 */ "insert_stmt ::= INSERT|REPLACE insert_table",
 /*  67 */ "insert_table ::= table_name",
 /*  68 */ "insert_table ::= table_name PAR_OPEN columns PAR_CLOSE",
 /*  69 */ "set_expr ::= SET set_expr_values",
 /*  70 */ "set_expr_values ::= set_expr_values COMMA assign",
 /*  71 */ "set_expr_values ::= assign",
 /*  72 */ "assign ::= term_colname T_EQ expr",
 /*  73 */ "create_view ::= CREATE VIEW colname T_AS select",
 /*  74 */ "create_table ::= CREATE TABLE alpha PAR_OPEN create_fields PAR_CLOSE table_opts",
 /*  75 */ "table_opts ::= table_opts table_opt",
 /*  76 */ "table_opts ::=",
 /*  77 */ "table_opt ::= table_key T_EQ term",
 /*  78 */ "table_key ::= table_key alpha",
 /*  79 */ "table_key ::= alpha",
 /*  80 */ "create_fields ::= create_fields COMMA create_column",
 /*  81 */ "create_fields ::= create_column",
 /*  82 */ "create_column ::= PRIMARY KEY expr_list_par",
 /*  83 */ "create_column ::= UNIQUE KEY alpha expr_list_par",
 /*  84 */ "create_column ::= KEY alpha expr_list_par",
 /*  85 */ "create_column ::= alpha data_type column_mods",
 /*  86 */ "data_type ::= alpha",
 /*  87 */ "data_type ::= alpha PAR_OPEN NUMBER PAR_CLOSE",
 /*  88 */ "column_mods ::= column_mods column_mod",
 /*  89 */ "column_mods ::=",
 /*  90 */ "column_mod ::= T_DEFAULT expr",
 /*  91 */ "column_mod ::= COLLATE expr",
 /*  92 */ "column_mod ::= PRIMARY KEY",
 /*  93 */ "column_mod ::= T_NOT T_NULL",
 /*  94 */ "column_mod ::= AUTO_INCREMENT",
 /*  95 */ "expr ::= expr T_AND expr",
 /*  96 */ "expr ::= expr T_OR expr",
 /*  97 */ "expr ::= T_NOT expr",
 /*  98 */ "expr ::= PAR_OPEN expr PAR_CLOSE",
 /*  99 */ "expr ::= term_select",
 /* 100 */ "expr ::= expr T_EQ|T_LIKE|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /* 101 */ "expr ::= expr T_IS T_NOT null",
 /* 102 */ "expr ::= expr T_IS null",
 /* 103 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /* 104 */ "expr ::= expr in term_select",
 /* 105 */ "expr ::= expr in expr_list_par",
 /* 106 */ "expr ::= case",
 /* 107 */ "expr ::= term",
 /* 108 */ "in ::= T_NOT T_IN",
 /* 109 */ "in ::= T_IN",
 /* 110 */ "case ::= T_CASE case_options T_END",
 /* 111 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /* 112 */ "case_options ::= case_options WHEN expr THEN expr",
 /* 113 */ "case_options ::= WHEN expr THEN expr",
 /* 114 */ "term ::= INTERVAL expr ALPHA",
 /* 115 */ "term ::= T_PLUS term",
 /* 116 */ "term ::= T_MINUS NUMBER",
 /* 117 */ "term ::= NUMBER",
 /* 118 */ "term ::= null",
 /* 119 */ "term ::= function_call",
 /* 120 */ "term ::= T_STRING",
 /* 121 */ "term ::= alpha",
 /* 122 */ "term ::= term_colname",
 /* 123 */ "term_select ::= inner_select",
 /* 124 */ "term_colname ::= colname",
 /* 125 */ "null ::= T_NULL",
 /* 126 */ "function_call ::= ALPHA expr_list_par_or_null",
 /* 127 */ "columns ::= columns COMMA alpha",
 /* 128 */ "columns ::= alpha",
 /* 129 */ "expr_list_par_or_null ::= expr_list_par",
 /* 130 */ "expr_list_par_or_null ::= PAR_OPEN PAR_CLOSE",
 /* 131 */ "expr_list_par_optional ::= expr_list_par",
 /* 132 */ "expr_list_par_optional ::= expr_list",
 /* 133 */ "expr_list_par_many ::= expr_list_par_many COMMA expr_list_par",
 /* 134 */ "expr_list_par_many ::= expr_list_par",
 /* 135 */ "expr_list_par ::= PAR_OPEN expr_list PAR_CLOSE",
 /* 136 */ "expr_list ::= expr_list COMMA expr",
 /* 137 */ "expr_list ::= expr",
 /* 138 */ "expr_list_as ::= expr_list_as COMMA expr_as",
 /* 139 */ "expr_list_as ::= expr_as",
 /* 140 */ "expr_as ::= expr",
 /* 141 */ "expr_as ::= expr T_AS alpha",
 /* 142 */ "expr_as ::= expr alpha",
 /* 143 */ "table_name ::= colname",
 /* 144 */ "colname ::= alpha T_DOT alpha_or_all",
 /* 145 */ "colname ::= alpha_or_all",
 /* 146 */ "colname ::= variable",
 /* 147 */ "alpha ::= T_DEFAULT",
 /* 148 */ "alpha ::= INTERVAL",
 /* 149 */ "alpha ::= AUTO_INCREMENT",
 /* 150 */ "alpha ::= ALPHA",
 /* 151 */ "alpha ::= COLUMN",
 /* 152 */ "alpha_or_all ::= alpha",
 /* 153 */ "alpha_or_all ::= T_TIMES",
 /* 154 */ "variable ::= QUESTION",
 /* 155 */ "variable ::= T_DOLLAR|T_COLON ALPHA",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 9 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 0 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 0 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 0 ),
  array( 'lhs' => 116, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 119, 'rhs' => 0 ),
  array( 'lhs' => 120, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 0 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 4 ),
  array( 'lhs' => 118, 'rhs' => 0 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 0 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 0 ),
  array( 'lhs' => 123, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 2 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 4 ),
  array( 'lhs' => 110, 'rhs' => 4 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 110, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 5 ),
  array( 'lhs' => 108, 'rhs' => 0 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 6 ),
  array( 'lhs' => 97, 'rhs' => 7 ),
  array( 'lhs' => 126, 'rhs' => 3 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 4 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 7 ),
  array( 'lhs' => 135, 'rhs' => 2 ),
  array( 'lhs' => 135, 'rhs' => 0 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 2 ),
  array( 'lhs' => 137, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 4 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 3 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 4 ),
  array( 'lhs' => 142, 'rhs' => 2 ),
  array( 'lhs' => 142, 'rhs' => 0 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 4 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 1 ),
  array( 'lhs' => 147, 'rhs' => 3 ),
  array( 'lhs' => 147, 'rhs' => 5 ),
  array( 'lhs' => 148, 'rhs' => 5 ),
  array( 'lhs' => 148, 'rhs' => 4 ),
  array( 'lhs' => 138, 'rhs' => 3 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 1 ),
  array( 'lhs' => 149, 'rhs' => 2 ),
  array( 'lhs' => 122, 'rhs' => 3 ),
  array( 'lhs' => 122, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 125, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 3 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 2 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 1 ),
  array( 'lhs' => 154, 'rhs' => 2 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        21 => 1,
        47 => 1,
        80 => 1,
        133 => 1,
        138 => 1,
        2 => 2,
        3 => 3,
        135 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        11 => 4,
        19 => 4,
        43 => 4,
        45 => 4,
        69 => 4,
        99 => 4,
        106 => 4,
        107 => 4,
        118 => 4,
        119 => 4,
        122 => 4,
        129 => 4,
        131 => 4,
        132 => 4,
        143 => 4,
        145 => 4,
        146 => 4,
        150 => 4,
        152 => 4,
        12 => 12,
        13 => 13,
        14 => 13,
        15 => 15,
        16 => 16,
        28 => 16,
        78 => 16,
        88 => 16,
        17 => 17,
        76 => 17,
        18 => 18,
        22 => 22,
        48 => 22,
        79 => 22,
        134 => 22,
        139 => 22,
        140 => 22,
        23 => 23,
        25 => 23,
        51 => 23,
        56 => 23,
        141 => 23,
        144 => 23,
        24 => 24,
        26 => 24,
        142 => 24,
        27 => 27,
        53 => 27,
        29 => 29,
        89 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        38 => 36,
        37 => 37,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        44 => 42,
        46 => 42,
        54 => 42,
        49 => 49,
        50 => 50,
        52 => 52,
        55 => 55,
        58 => 58,
        59 => 58,
        60 => 60,
        61 => 61,
        62 => 62,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        70 => 70,
        127 => 70,
        136 => 70,
        71 => 71,
        128 => 71,
        137 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        77 => 77,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        100 => 100,
        103 => 100,
        101 => 101,
        102 => 102,
        104 => 104,
        105 => 105,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        120 => 120,
        121 => 121,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        130 => 130,
        147 => 147,
        148 => 147,
        149 => 147,
        151 => 151,
        153 => 153,
        154 => 154,
        155 => 155,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1936 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1939 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 1942 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 1945 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1948 "src/SQLParser/Parser.php"
#line 45 "src/SQLParser/Parser.y"
    function yy_r12(){ $this->_retvalue = null;     }
#line 1951 "src/SQLParser/Parser.php"
#line 47 "src/SQLParser/Parser.y"
    function yy_r13(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 1954 "src/SQLParser/Parser.php"
#line 51 "src/SQLParser/Parser.y"
    function yy_r15(){ 
    $this->_retvalue = new SQL\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  {
        foreach ($this->yystack[$this->yyidx + -5]->minor as $table) {
            $this->_retvalue->from($table[0], $table[1]);
        }
    }
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 1970 "src/SQLParser/Parser.php"
#line 66 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1973 "src/SQLParser/Parser.php"
#line 67 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = array();     }
#line 1976 "src/SQLParser/Parser.php"
#line 68 "src/SQLParser/Parser.y"
    function yy_r18(){ $this->_retvalue = strtoupper(@$this->yystack[$this->yyidx + 0]->minor);     }
#line 1979 "src/SQLParser/Parser.php"
#line 74 "src/SQLParser/Parser.y"
    function yy_r22(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 1982 "src/SQLParser/Parser.php"
#line 76 "src/SQLParser/Parser.y"
    function yy_r23(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 1985 "src/SQLParser/Parser.php"
#line 77 "src/SQLParser/Parser.y"
    function yy_r24(){ $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 1988 "src/SQLParser/Parser.php"
#line 80 "src/SQLParser/Parser.y"
    function yy_r27(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];     }
#line 1991 "src/SQLParser/Parser.php"
#line 83 "src/SQLParser/Parser.y"
    function yy_r29(){ $this->_retvalue = [];     }
#line 1994 "src/SQLParser/Parser.php"
#line 85 "src/SQLParser/Parser.y"
    function yy_r30(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]); 
    if ($this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 2002 "src/SQLParser/Parser.php"
#line 92 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2005 "src/SQLParser/Parser.php"
#line 93 "src/SQLParser/Parser.y"
    function yy_r32(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2008 "src/SQLParser/Parser.php"
#line 94 "src/SQLParser/Parser.y"
    function yy_r33(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2011 "src/SQLParser/Parser.php"
#line 95 "src/SQLParser/Parser.y"
    function yy_r34(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2014 "src/SQLParser/Parser.php"
#line 97 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = 'NATURAL';     }
#line 2017 "src/SQLParser/Parser.php"
#line 98 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = '';     }
#line 2020 "src/SQLParser/Parser.php"
#line 99 "src/SQLParser/Parser.y"
    function yy_r37(){ $this->_retvalue = 'OUTER';     }
#line 2023 "src/SQLParser/Parser.php"
#line 102 "src/SQLParser/Parser.y"
    function yy_r39(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2026 "src/SQLParser/Parser.php"
#line 103 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2029 "src/SQLParser/Parser.php"
#line 104 "src/SQLParser/Parser.y"
    function yy_r41(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 2032 "src/SQLParser/Parser.php"
#line 105 "src/SQLParser/Parser.y"
    function yy_r42(){ $this->_retvalue = NULL;     }
#line 2035 "src/SQLParser/Parser.php"
#line 116 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = new Stmt\Expr(strtoupper(@$this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);     }
#line 2038 "src/SQLParser/Parser.php"
#line 117 "src/SQLParser/Parser.y"
    function yy_r50(){ $this->_retvalue = new Stmt\Expr("DESC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 2041 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r52(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -2]->minor];     }
#line 2044 "src/SQLParser/Parser.php"
#line 124 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 2047 "src/SQLParser/Parser.php"
#line 128 "src/SQLParser/Parser.y"
    function yy_r58(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2050 "src/SQLParser/Parser.php"
#line 130 "src/SQLParser/Parser.y"
    function yy_r60(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->yystack[$this->yyidx + -2]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2053 "src/SQLParser/Parser.php"
#line 131 "src/SQLParser/Parser.y"
    function yy_r61(){ 
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; 
    $keys   = [];
    $values = [];
    foreach ($this->yystack[$this->yyidx + 0]->minor->getExprs() as $field) {
        $member = $field->getMembers();
        $keys[]   = $member[0];
        $values[] = $member[1];
    }
    $this->yystack[$this->yyidx + -1]->minor->values([$values])->fields($keys);
    }
#line 2066 "src/SQLParser/Parser.php"
#line 143 "src/SQLParser/Parser.y"
    function yy_r62(){
    $this->_retvalue = new SQL\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2071 "src/SQLParser/Parser.php"
#line 147 "src/SQLParser/Parser.y"
    function yy_r63(){
    $this->_retvalue = new SQL\Delete($this->yystack[$this->yyidx + -3]->minor[0], $this->yystack[$this->yyidx + -3]->minor[1]);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2079 "src/SQLParser/Parser.php"
#line 154 "src/SQLParser/Parser.y"
    function yy_r64(){
    $this->_retvalue = new SQL\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2088 "src/SQLParser/Parser.php"
#line 162 "src/SQLParser/Parser.y"
    function yy_r65(){ 
    $this->_retvalue = new SQL\Insert(@$this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0])->fields($this->yystack[$this->yyidx + 0]->minor[1]);     }
#line 2093 "src/SQLParser/Parser.php"
#line 165 "src/SQLParser/Parser.y"
    function yy_r66(){ 
    $this->_retvalue = new SQL\Insert(@$this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]); 
    }
#line 2099 "src/SQLParser/Parser.php"
#line 170 "src/SQLParser/Parser.y"
    function yy_r67(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, []];    }
#line 2102 "src/SQLParser/Parser.php"
#line 171 "src/SQLParser/Parser.y"
    function yy_r68(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 2105 "src/SQLParser/Parser.php"
#line 174 "src/SQLParser/Parser.y"
    function yy_r70(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 2108 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 2111 "src/SQLParser/Parser.php"
#line 176 "src/SQLParser/Parser.y"
    function yy_r72(){ 
    $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); 
    }
#line 2116 "src/SQLParser/Parser.php"
#line 180 "src/SQLParser/Parser.y"
    function yy_r73(){
    $this->_retvalue = new SQL\View($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2121 "src/SQLParser/Parser.php"
#line 184 "src/SQLParser/Parser.y"
    function yy_r74(){
    $this->_retvalue = new SQL\Table($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2126 "src/SQLParser/Parser.php"
#line 188 "src/SQLParser/Parser.y"
    function yy_r75(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2129 "src/SQLParser/Parser.php"
#line 191 "src/SQLParser/Parser.y"
    function yy_r77(){  
    $this->_retvalue[implode(" ", $this->yystack[$this->yyidx + -2]->minor)] = $this->yystack[$this->yyidx + 0]->minor->getMember(0); 
    }
#line 2134 "src/SQLParser/Parser.php"
#line 199 "src/SQLParser/Parser.y"
    function yy_r81(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2137 "src/SQLParser/Parser.php"
#line 201 "src/SQLParser/Parser.y"
    function yy_r82(){
    $this->_retvalue = ['primary', $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2142 "src/SQLParser/Parser.php"
#line 204 "src/SQLParser/Parser.y"
    function yy_r83(){
    $this->_retvalue = ['unique', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2147 "src/SQLParser/Parser.php"
#line 207 "src/SQLParser/Parser.y"
    function yy_r84(){
    $this->_retvalue = ['key', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2152 "src/SQLParser/Parser.php"
#line 211 "src/SQLParser/Parser.y"
    function yy_r85(){ 
    $this->_retvalue = new Stmt\Column($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]);
    foreach ($this->yystack[$this->yyidx + 0]->minor as $setting) {
        if (is_array($setting)) {
            $this->_retvalue->{$setting[0]}($setting[1]);
        } else {
            $this->_retvalue->$setting();
        }
    }
    }
#line 2164 "src/SQLParser/Parser.php"
#line 222 "src/SQLParser/Parser.y"
    function yy_r86(){
    $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];
    }
#line 2169 "src/SQLParser/Parser.php"
#line 226 "src/SQLParser/Parser.y"
    function yy_r87(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];
    }
#line 2174 "src/SQLParser/Parser.php"
#line 233 "src/SQLParser/Parser.y"
    function yy_r90(){ $this->_retvalue = ['defaultValue', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2177 "src/SQLParser/Parser.php"
#line 234 "src/SQLParser/Parser.y"
    function yy_r91(){ $this->_retvalue = ['collate', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2180 "src/SQLParser/Parser.php"
#line 235 "src/SQLParser/Parser.y"
    function yy_r92(){ $this->_retvalue = 'primaryKey';     }
#line 2183 "src/SQLParser/Parser.php"
#line 236 "src/SQLParser/Parser.y"
    function yy_r93(){ $this->_retvalue = 'notNull';     }
#line 2186 "src/SQLParser/Parser.php"
#line 237 "src/SQLParser/Parser.y"
    function yy_r94(){ $this->_retvalue = 'autoincrement';     }
#line 2189 "src/SQLParser/Parser.php"
#line 240 "src/SQLParser/Parser.y"
    function yy_r95(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2192 "src/SQLParser/Parser.php"
#line 241 "src/SQLParser/Parser.y"
    function yy_r96(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2195 "src/SQLParser/Parser.php"
#line 242 "src/SQLParser/Parser.y"
    function yy_r97(){ $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2198 "src/SQLParser/Parser.php"
#line 243 "src/SQLParser/Parser.y"
    function yy_r98(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2201 "src/SQLParser/Parser.php"
#line 245 "src/SQLParser/Parser.y"
    function yy_r100(){ $this->_retvalue = new Stmt\Expr(@$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2204 "src/SQLParser/Parser.php"
#line 246 "src/SQLParser/Parser.y"
    function yy_r101(){ $this->_retvalue = new Stmt\Expr("!=", $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2207 "src/SQLParser/Parser.php"
#line 247 "src/SQLParser/Parser.y"
    function yy_r102(){ $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2210 "src/SQLParser/Parser.php"
#line 249 "src/SQLParser/Parser.y"
    function yy_r104(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2213 "src/SQLParser/Parser.php"
#line 250 "src/SQLParser/Parser.y"
    function yy_r105(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor));     }
#line 2216 "src/SQLParser/Parser.php"
#line 254 "src/SQLParser/Parser.y"
    function yy_r108(){ $this->_retvalue = 'nin';     }
#line 2219 "src/SQLParser/Parser.php"
#line 255 "src/SQLParser/Parser.y"
    function yy_r109(){ $this->_retvalue = 'in';     }
#line 2222 "src/SQLParser/Parser.php"
#line 257 "src/SQLParser/Parser.y"
    function yy_r110(){ 
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2228 "src/SQLParser/Parser.php"
#line 261 "src/SQLParser/Parser.y"
    function yy_r111(){ 
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 2234 "src/SQLParser/Parser.php"
#line 266 "src/SQLParser/Parser.y"
    function yy_r112(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2237 "src/SQLParser/Parser.php"
#line 267 "src/SQLParser/Parser.y"
    function yy_r113(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2240 "src/SQLParser/Parser.php"
#line 269 "src/SQLParser/Parser.y"
    function yy_r114(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2243 "src/SQLParser/Parser.php"
#line 270 "src/SQLParser/Parser.y"
    function yy_r115(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2246 "src/SQLParser/Parser.php"
#line 271 "src/SQLParser/Parser.y"
    function yy_r116(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 2249 "src/SQLParser/Parser.php"
#line 272 "src/SQLParser/Parser.y"
    function yy_r117(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2252 "src/SQLParser/Parser.php"
#line 275 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""));     }
#line 2255 "src/SQLParser/Parser.php"
#line 276 "src/SQLParser/Parser.y"
    function yy_r121(){ $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2258 "src/SQLParser/Parser.php"
#line 278 "src/SQLParser/Parser.y"
    function yy_r123(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2261 "src/SQLParser/Parser.php"
#line 279 "src/SQLParser/Parser.y"
    function yy_r124(){ 
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Stmt\VariablePlaceholder) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else if (is_array($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]); 
    } else {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2272 "src/SQLParser/Parser.php"
#line 289 "src/SQLParser/Parser.y"
    function yy_r125(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2275 "src/SQLParser/Parser.php"
#line 291 "src/SQLParser/Parser.y"
    function yy_r126(){ $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2278 "src/SQLParser/Parser.php"
#line 297 "src/SQLParser/Parser.y"
    function yy_r130(){ $this->_retvalue = new Stmt\ExprList();     }
#line 2281 "src/SQLParser/Parser.php"
#line 323 "src/SQLParser/Parser.y"
    function yy_r147(){ $this->_retvalue = @$this->yystack[$this->yyidx + 0]->minor;     }
#line 2284 "src/SQLParser/Parser.php"
#line 327 "src/SQLParser/Parser.y"
    function yy_r151(){ $this->_retvalue = trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t");     }
#line 2287 "src/SQLParser/Parser.php"
#line 330 "src/SQLParser/Parser.y"
    function yy_r153(){ $this->_retvalue = new Stmt\Expr("ALL");     }
#line 2290 "src/SQLParser/Parser.php"
#line 332 "src/SQLParser/Parser.y"
    function yy_r154(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2293 "src/SQLParser/Parser.php"
#line 333 "src/SQLParser/Parser.y"
    function yy_r155(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2296 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 2416 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
