<?php
/* Driver template for the PHP_SQLParser_rGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class SQLParser_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof SQLParser_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof SQLParser_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof SQLParser_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof SQLParser_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class SQLParser_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here
#line 2 "src/SQLParser/Parser.y"

use SQLParser\Stmt;
#line 102 "src/SQLParser/Parser.php"

// declare_class is output here
#line 6 "src/SQLParser/Parser.y"
 class SQLParser_Parser #line 107 "src/SQLParser/Parser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 7 "src/SQLParser/Parser.y"

    public $body = array();
#line 115 "src/SQLParser/Parser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const T_OR                           =  1;
    const T_AND                          =  2;
    const T_NOT                          =  3;
    const T_QUESTION                     =  4;
    const T_COLON                        =  5;
    const T_EQ                           =  6;
    const T_LIKE                         =  7;
    const T_GLOB                         =  8;
    const T_NE                           =  9;
    const T_GT                           = 10;
    const T_GE                           = 11;
    const T_LT                           = 12;
    const T_LE                           = 13;
    const T_IN                           = 14;
    const T_PLUS                         = 15;
    const T_MINUS                        = 16;
    const T_CONCAT                       = 17;
    const T_TIMES                        = 18;
    const T_DIV                          = 19;
    const T_MOD                          = 20;
    const T_PIPE                         = 21;
    const T_BITWISE                      = 22;
    const T_FILTER_PIPE                  = 23;
    const SEMICOLON                      = 24;
    const PAR_OPEN                       = 25;
    const PAR_CLOSE                      = 26;
    const BEGIN                          = 27;
    const SAVEPOINT                      = 28;
    const RELEASE                        = 29;
    const ROLLBACK                       = 30;
    const TO                             = 31;
    const TRANSACTION                    = 32;
    const WORK                           = 33;
    const COMMIT                         = 34;
    const T_END                          = 35;
    const ALTER                          = 36;
    const TABLE                          = 37;
    const DROP                           = 38;
    const PRIMARY                        = 39;
    const KEY                            = 40;
    const INDEX                          = 41;
    const SET                            = 42;
    const T_DEFAULT                      = 43;
    const MODIFY                         = 44;
    const ADD                            = 45;
    const RENAME                         = 46;
    const CREATE                         = 47;
    const ON                             = 48;
    const UNIQUE                         = 49;
    const T_AS                           = 50;
    const CHANGE                         = 51;
    const T_COLUMN                       = 52;
    const T_FIRST                        = 53;
    const T_AFTER                        = 54;
    const SELECT                         = 55;
    const ALL                            = 56;
    const DISTINCT                       = 57;
    const DISTINCTROW                    = 58;
    const HIGH_PRIORITY                  = 59;
    const STRAIGHT_JOIN                  = 60;
    const SQL_SMALL_RESULT               = 61;
    const SQL_BIG_RESULT                 = 62;
    const SQL_CACHE                      = 63;
    const SQL_CALC_FOUND_ROWS            = 64;
    const SQL_BUFFER_RESULT              = 65;
    const SQL_NO_CACHE                   = 66;
    const FROM                           = 67;
    const COMMA                          = 68;
    const JOIN                           = 69;
    const INNER                          = 70;
    const LEFT                           = 71;
    const RIGHT                          = 72;
    const NATURAL                        = 73;
    const OUTER                          = 74;
    const USING                          = 75;
    const WHERE                          = 76;
    const ORDER                          = 77;
    const BY                             = 78;
    const DESC                           = 79;
    const ASC                            = 80;
    const LIMIT                          = 81;
    const OFFSET                         = 82;
    const GROUP                          = 83;
    const HAVING                         = 84;
    const VALUES                         = 85;
    const DELETE                         = 86;
    const UPDATE                         = 87;
    const INSERT                         = 88;
    const REPLACE                        = 89;
    const INTO                           = 90;
    const DUPLICATE                      = 91;
    const VIEW                           = 92;
    const NUMBER                         = 93;
    const T_UNSIGNED                     = 94;
    const COLLATE                        = 95;
    const T_NULL                         = 96;
    const AUTO_INCREMENT                 = 97;
    const T_IS                           = 98;
    const T_BINARY                       = 99;
    const T_CASE                         = 100;
    const T_ELSE                         = 101;
    const WHEN                           = 102;
    const THEN                           = 103;
    const INTERVAL                       = 104;
    const ALPHA                          = 105;
    const T_STRING1                      = 106;
    const T_STRING2                      = 107;
    const T_DOT                          = 108;
    const COLUMN                         = 109;
    const QUESTION                       = 110;
    const T_DOLLAR                       = 111;
    const YY_NO_ACTION = 603;
    const YY_ACCEPT_ACTION = 602;
    const YY_ERROR_ACTION = 601;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1873;
static public $yy_action = array(
 /*     0 */    33,  139,  112,  223,  210,  378,  114,  113,  106,  322,
 /*    10 */    25,  101,   36,  205,  341,  235,  455,  455,  455,  455,
 /*    20 */   328,  380,    9,   28,   30,   26,  126,  193,  334,   31,
 /*    30 */   217,  349,   31,   31,   31,   31,   31,  358,   32,   32,
 /*    40 */   294,   32,   32,   32,  256,  210,   52,  114,  113,  342,
 /*    50 */   322,  228,  167,  317,  317,  317,  317,  317,  317,  317,
 /*    60 */   317,  317,  317,  317,   68,   33,  294,  112,  192,  334,
 /*    70 */   224,  245,  251,  116,  122,  287,  287,   36,  205,   65,
 /*    80 */   235,   32,   32,   32,   39,   11,  210,    9,  114,  113,
 /*    90 */   374,  322,  293,  281,  290,  232,  115,  152,  218,   66,
 /*   100 */    66,   29,  110,  370,  368,  294,  278,  250,  112,  159,
 /*   110 */   334,  243,  245,  251,  238,   17,   18,  165,  293,  179,
 /*   120 */   290,  129,  321,   60,   60,   64,   64,  292,  288,   30,
 /*   130 */    26,  126,  278,  238,   31,  217,  349,   31,   31,   31,
 /*   140 */    31,   31,  358,   32,   32,  273,   32,   32,   32,  323,
 /*   150 */   160,  157,  171,  245,  251,  374,  141,  293,  281,  290,
 /*   160 */   321,  129,  152,   33,  187,  112,   29,  110,  370,  368,
 /*   170 */   221,  278,  250,  112,  326,   36,  205,   63,  235,  287,
 /*   180 */   287,  214,   33,  210,  112,    9,  315,  117,  105,  354,
 /*   190 */   172,  137,  124,   51,   36,  205,   22,  235,   54,  108,
 /*   200 */   125,  319,  166,  294,    9,  156,   30,   26,  126,  180,
 /*   210 */    24,   31,  217,  349,   31,   31,   31,   31,   31,  358,
 /*   220 */    32,   32,  294,   32,   32,   32,  129,  135,   30,   26,
 /*   230 */   126,  117,  109,   31,  217,  349,   31,   31,   31,   31,
 /*   240 */    31,  358,   32,   32,   55,   32,   32,   32,  325,   46,
 /*   250 */   245,  251,  321,  374,  312,  293,  281,  290,  310,  186,
 /*   260 */   152,   72,  165,  210,   29,  110,  370,  368,  299,  278,
 /*   270 */   250,  112,  374,  154,  293,  281,  290,  311,  345,  152,
 /*   280 */    46,  314,  216,   29,  110,  370,  368,   27,  278,  250,
 /*   290 */   112,    4,  111,  133,  121,  212,  127,  305,   61,  329,
 /*   300 */   279,  277,  203,  129,  194,  123,  306,  306,  425,  425,
 /*   310 */   360,  328,   70,  128,  102,  217,  349,  356,   98,   50,
 /*   320 */   243,  165,  357,   19,  356,  129,    1,   30,   26,  126,
 /*   330 */   245,  251,   31,  217,  349,   31,   31,   31,   31,   31,
 /*   340 */   358,   32,   32,   23,   32,   32,   32,  335,  211,   53,
 /*   350 */   170,  173,  191,   38,   48,   48,   25,  101,  260,  158,
 /*   360 */   341,  359,  163,   30,   26,  126,  281,   71,   31,  217,
 /*   370 */   349,   31,   31,   31,   31,   31,  358,   32,   32,  197,
 /*   380 */    32,   32,   32,   30,   26,  126,  338,  338,   31,  217,
 /*   390 */   349,   31,   31,   31,   31,   31,  358,   32,   32,  142,
 /*   400 */    32,   32,   32,   30,   26,  126,  353,  132,   31,  217,
 /*   410 */   349,   31,   31,   31,   31,   31,  358,   32,   32,  215,
 /*   420 */    32,   32,   32,  153,  129,  246,  246,  208,  301,  246,
 /*   430 */   219,  289,   33,  109,  112,  365,  361,  146,  210,  302,
 /*   440 */    42,  246,  164,  155,   36,  205,  339,  235,  231,  335,
 /*   450 */   211,  364,  170,  246,    6,    7,  240,  271,  222,  233,
 /*   460 */   129,  103,  351,  165,  242,   16,  117,  246,  246,    2,
 /*   470 */    15,  366,  294,  246,  246,  120,  375,   45,   41,   19,
 /*   480 */   129,  246,   12,  246,   59,   13,  371,   40,  198,  143,
 /*   490 */    20,  247,  190,  362,  144,   21,   47,  245,  251,    3,
 /*   500 */   129,   56,   30,   26,  126,  245,  251,   31,  217,  349,
 /*   510 */    31,   31,   31,   31,   31,  358,   32,   32,  376,   32,
 /*   520 */    32,   32,  374,  210,  293,  281,  290,   73,  105,  152,
 /*   530 */    43,  229,  140,   29,  110,  370,  368,  352,  278,  250,
 /*   540 */   112,  252,   28,  276,  182,  168,  602,  202,  381,  269,
 /*   550 */   268,  265,  257,  264,  263,  262,  261,  259,  258,  275,
 /*   560 */   266,   26,  126,  131,  348,   31,  217,  349,   31,   31,
 /*   570 */    31,   31,   31,  358,   32,   32,  112,   32,   32,   32,
 /*   580 */   183,  345,  316,  350,   34,   10,  145,  344,  324,  235,
 /*   590 */   245,  251,  298,   44,  178,  112,   99,  210,  309,  129,
 /*   600 */   181,  286,  322,  304,  291,   36,  205,  234,  235,  200,
 /*   610 */   196,   67,    5,  213,  294,  248,    8,  327,  373,  331,
 /*   620 */   185,  210,  227,  337,  332,  255,  365,  330,  283,  295,
 /*   630 */    69,  280,  297,  294,  197,  274,   35,  126,  372,  284,
 /*   640 */    31,  217,  349,   31,   31,   31,   31,   31,  358,   32,
 /*   650 */    32,  210,   32,   32,   32,   58,  365,  129,  169,  355,
 /*   660 */   195,  285,  199,  281,  245,  251,  293,  161,  290,  210,
 /*   670 */   369,  320,  107,   62,  322,  292,  288,  253,  254,   14,
 /*   680 */   278,  250,  112,  374,  243,  293,  281,  290,  245,  251,
 /*   690 */   177,  285,  199,  219,   29,  110,  370,  368,  365,  278,
 /*   700 */   250,  112,   31,  217,  349,   31,   31,   31,   31,   31,
 /*   710 */   358,   32,   32,  112,   32,   32,   32,  367,  245,  251,
 /*   720 */   239,  149,  294,  296,  244,  249,  235,  165,  267,  119,
 /*   730 */   420,  420,  129,  420,  366,  420,  245,  251,  420,  377,
 /*   740 */   420,  219,  420,  420,  420,  420,  365,  196,   67,  371,
 /*   750 */   420,  294,  420,  112,  420,  420,  362,  185,  420,  420,
 /*   760 */   245,  251,  420,  420,  420,  420,  235,  420,  420,  420,
 /*   770 */   219,  420,  319,  109,  293,  365,  290,   57,  420,  420,
 /*   780 */   420,  210,  366,  292,  288,  134,  365,  225,  278,  420,
 /*   790 */   420,  294,  308,  420,  129,  420,  210,  371,  114,  113,
 /*   800 */   420,  322,  420,  293,  362,  290,  420,  420,  245,  251,
 /*   810 */   420,  366,  292,  288,  253,  254,  343,  278,  250,  112,
 /*   820 */   148,  282,  199,  420,  420,  347,  371,  219,  420,  319,
 /*   830 */   346,  420,  365,  362,   83,  420,  300,  245,  251,  420,
 /*   840 */   420,  420,  420,  293,  420,  290,  420,  420,  245,  251,
 /*   850 */   420,  420,  292,  288,  253,  254,  420,  278,  250,  112,
 /*   860 */   206,  420,  420,  245,  251,  420,  420,  420,  366,  210,
 /*   870 */   420,  114,  113,  343,  322,  420,  420,  420,  420,  420,
 /*   880 */   420,  420,  347,  371,  420,  420,  336,  346,  420,  420,
 /*   890 */   362,  420,  209,  333,  245,  251,  420,  420,  420,  420,
 /*   900 */   420,  272,  269,  268,  265,  257,  264,  263,  262,  261,
 /*   910 */   259,  258,  275,  266,  420,  420,  131,  420,  420,  220,
 /*   920 */   269,  268,  265,  257,  264,  263,  262,  261,  259,  258,
 /*   930 */   275,  266,  221,  420,  131,  420,  245,  251,  420,  420,
 /*   940 */   112,  219,  420,  204,  420,  420,  365,  420,   83,   99,
 /*   950 */   221,  420,  420,  235,  420,  420,  420,  420,  420,  219,
 /*   960 */   420,  204,  420,  420,  365,  420,   81,   99,  210,  420,
 /*   970 */   114,  113,  420,  322,  420,  420,  420,  420,  294,  420,
 /*   980 */   420,  420,  366,  420,  420,  210,  420,  343,  420,  420,
 /*   990 */   105,  420,  136,  138,  420,  420,  347,  371,  210,  420,
 /*  1000 */   366,  346,  210,  188,  362,  343,  176,  365,  245,  251,
 /*  1010 */   420,  420,  420,  420,  347,  371,  219,  420,  319,  346,
 /*  1020 */   420,  365,  362,   75,  176,   49,  245,  251,  420,  420,
 /*  1030 */   293,  420,  290,  210,  420,  245,  251,  420,  201,  292,
 /*  1040 */   288,  253,  254,  162,  278,  250,  112,  207,  303,  219,
 /*  1050 */   313,  319,  245,  251,  365,  210,   75,  366,  420,  420,
 /*  1060 */   105,  420,  343,  230,  420,  245,  251,  420,  420,  245,
 /*  1070 */   251,  347,  371,  219,  420,  319,  346,  420,  365,  362,
 /*  1080 */    57,  307,  420,  245,  251,  420,  420,  420,  420,  219,
 /*  1090 */   366,  319,  420,  420,  365,  343,   83,  174,  210,  420,
 /*  1100 */   245,  251,  420,  105,  347,  371,  130,  420,  210,  346,
 /*  1110 */   420,  420,  362,  236,  366,  420,  245,  251,  420,  343,
 /*  1120 */   420,  420,  245,  251,  420,  112,  420,  219,  347,  371,
 /*  1130 */   366,  420,  365,  346,  420,  343,  362,  221,  235,  318,
 /*  1140 */   245,  251,  420,  420,  347,  371,  219,  420,  204,  346,
 /*  1150 */   420,  365,  362,   80,  176,  420,  245,  251,  420,  420,
 /*  1160 */   420,  420,  420,  294,  420,  245,  251,  420,  366,  420,
 /*  1170 */   420,  420,  420,  379,  420,  245,  251,  219,  104,  319,
 /*  1180 */   420,  420,  365,  371,   90,  420,  210,  366,  420,  420,
 /*  1190 */   362,  237,  343,  420,  245,  251,  294,  420,  420,  210,
 /*  1200 */   420,  347,  371,  420,  150,  219,  346,  319,  420,  362,
 /*  1210 */   365,  210,   84,  245,  251,  293,  226,  290,  366,  420,
 /*  1220 */   420,  420,  420,  343,  292,  288,  253,  254,  420,  278,
 /*  1230 */   250,  112,  347,  371,  219,  420,  319,  346,  420,  365,
 /*  1240 */   362,   87,  420,  420,  245,  251,  366,  420,  293,  420,
 /*  1250 */   290,  343,  420,  245,  251,  420,  420,  292,  288,  420,
 /*  1260 */   347,  371,  278,  420,  420,  346,  245,  251,  362,  219,
 /*  1270 */   420,  319,  245,  251,  365,  366,   86,  420,  245,  251,
 /*  1280 */   343,  420,  420,  420,  420,  420,  420,  420,  420,  347,
 /*  1290 */   371,  420,  420,  219,  346,  319,  420,  362,  365,  420,
 /*  1300 */    88,  245,  251,  210,  420,  420,  181,  420,  322,  219,
 /*  1310 */   366,  319,  210,  420,  365,  343,   78,  151,  420,  420,
 /*  1320 */   420,  420,  210,  420,  347,  371,  210,  189,  420,  346,
 /*  1330 */   420,  365,  362,  420,  366,  420,  245,  251,  420,  343,
 /*  1340 */   219,  270,  319,  235,  420,  365,  210,   79,  347,  371,
 /*  1350 */   366,  241,  420,  346,  420,  343,  362,  420,  420,  420,
 /*  1360 */   245,  251,  420,  420,  347,  371,  420,  162,  294,  346,
 /*  1370 */   245,  251,  362,  175,  363,  420,  245,  251,  420,  245,
 /*  1380 */   251,  366,  420,  210,  420,  420,  343,  420,  184,  245,
 /*  1390 */   251,  420,  420,  245,  251,  347,  371,  420,  420,  219,
 /*  1400 */   346,  319,  420,  362,  365,  210,   92,  245,  251,  420,
 /*  1410 */   147,  420,  420,  245,  251,  420,  420,  420,  420,  219,
 /*  1420 */   293,  319,  290,  420,  365,  420,   89,  420,  420,  292,
 /*  1430 */   288,  420,  420,  210,  278,  420,  420,  420,  340,  219,
 /*  1440 */   366,  319,  420,  420,  365,  343,   77,  420,  420,  420,
 /*  1450 */   245,  251,  420,  420,  347,  371,  420,  420,  420,  346,
 /*  1460 */   366,  420,  362,  420,  420,  343,  245,  251,  420,  420,
 /*  1470 */   420,  420,  245,  251,  347,  371,  420,  420,  420,  346,
 /*  1480 */   366,  420,  362,  420,  420,  343,  245,  251,  420,  420,
 /*  1490 */   420,  219,  420,  319,  347,  371,  365,  420,  100,  346,
 /*  1500 */   245,  251,  362,  420,  420,  420,  245,  251,  420,  420,
 /*  1510 */   420,  219,  420,  319,  420,  420,  365,  420,   96,  420,
 /*  1520 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  219,
 /*  1530 */   420,  319,  366,  420,  365,  420,   74,  343,  420,  294,
 /*  1540 */   420,  420,  420,   37,  420,  420,  347,  371,  420,  420,
 /*  1550 */   420,  346,  366,  420,  362,  420,  420,  343,  245,  251,
 /*  1560 */   420,  420,  420,  420,  420,  420,  347,  371,  420,  420,
 /*  1570 */   366,  346,  420,  420,  362,  343,  420,  420,  245,  251,
 /*  1580 */   294,  420,  420,  420,  347,  371,  420,  420,  420,  346,
 /*  1590 */   420,  293,  362,  290,  420,  420,  245,  251,  420,  420,
 /*  1600 */   292,  288,  420,  420,  219,  278,  319,  420,  420,  365,
 /*  1610 */   219,   93,  319,  420,  420,  365,  420,   82,  420,  420,
 /*  1620 */   420,  420,  420,  420,  420,  420,  420,  420,  219,  420,
 /*  1630 */   319,  420,  293,  365,  290,   91,  420,  420,  420,  420,
 /*  1640 */   420,  292,  288,  420,  420,  366,  278,  420,  420,  420,
 /*  1650 */   343,  366,  420,  420,  294,  420,  343,  420,  420,  347,
 /*  1660 */   371,  118,  420,  420,  346,  347,  371,  362,  420,  366,
 /*  1670 */   346,  245,  251,  362,  343,  420,  420,  245,  251,  420,
 /*  1680 */   420,  420,  420,  347,  371,  420,  420,  219,  346,  319,
 /*  1690 */   420,  362,  365,  420,   95,  245,  251,  420,  420,  420,
 /*  1700 */   420,  420,  420,  420,  420,  219,  293,  319,  290,  420,
 /*  1710 */   365,  420,   94,  420,  420,  292,  288,  420,  420,  420,
 /*  1720 */   278,  420,  420,  420,  420,  420,  420,  420,  366,  420,
 /*  1730 */   420,  420,  420,  343,  219,  420,  319,  420,  420,  365,
 /*  1740 */   420,   97,  347,  371,  420,  420,  366,  346,  420,  420,
 /*  1750 */   362,  343,  420,  420,  245,  251,  420,  420,  420,  420,
 /*  1760 */   347,  371,  420,  420,  420,  346,  420,  420,  362,  420,
 /*  1770 */   420,  420,  245,  251,  420,  366,  420,  420,  420,  420,
 /*  1780 */   343,  219,  420,  319,  420,  420,  365,  420,   76,  347,
 /*  1790 */   371,  420,  420,  420,  346,  420,  420,  362,  420,  420,
 /*  1800 */   420,  245,  251,  420,  219,  420,  319,  420,  420,  365,
 /*  1810 */   420,   85,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  1820 */   420,  420,  366,  420,  420,  420,  420,  343,  420,  420,
 /*  1830 */   420,  420,  420,  420,  420,  420,  347,  371,  420,  420,
 /*  1840 */   420,  346,  420,  420,  362,  366,  420,  420,  245,  251,
 /*  1850 */   343,  420,  420,  420,  420,  420,  420,  420,  420,  347,
 /*  1860 */   371,  420,  420,  420,  346,  420,  420,  362,  420,  420,
 /*  1870 */   420,  245,  251,
    );
    static public $yy_lookahead = array(
 /*     0 */     3,  129,    5,  129,  129,   40,  131,  132,   25,  134,
 /*    10 */   186,  187,   15,   16,  190,   18,   69,   70,   71,   72,
 /*    20 */    73,   96,   25,   76,    1,    2,    3,  152,  153,    6,
 /*    30 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*    40 */    43,   18,   19,   20,  133,  129,  135,  131,  132,   35,
 /*    50 */   134,  129,  180,   56,   57,   58,   59,   60,   61,   62,
 /*    60 */    63,   64,   65,   66,   31,    3,   43,    5,  152,  153,
 /*    70 */   196,  196,  197,   50,   31,   32,   33,   15,   16,   40,
 /*    80 */    18,   18,   19,   20,   67,   68,  129,   25,  131,  132,
 /*    90 */    93,  134,   95,   96,   97,  173,  174,  100,   39,   40,
 /*   100 */    41,  104,  105,  106,  107,   43,  109,  110,  111,  152,
 /*   110 */   153,   52,  196,  197,   31,  101,  102,   55,   95,   93,
 /*   120 */    97,   98,  129,   40,   41,   40,   41,  104,  105,    1,
 /*   130 */     2,    3,  109,   50,    6,    7,    8,    9,   10,   11,
 /*   140 */    12,   13,   14,   15,   16,   26,   18,   19,   20,   70,
 /*   150 */    71,   72,  159,  196,  197,   93,   26,   95,   96,   97,
 /*   160 */   129,   98,  100,    3,   25,    5,  104,  105,  106,  107,
 /*   170 */   120,  109,  110,  111,   74,   15,   16,   41,   18,   32,
 /*   180 */    33,  131,    3,  129,    5,   25,   26,   68,  134,   26,
 /*   190 */   159,  137,   38,   68,   15,   16,   68,   18,   44,   45,
 /*   200 */    46,  131,   26,   43,   25,   51,    1,    2,    3,   25,
 /*   210 */    82,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   220 */    15,   16,   43,   18,   19,   20,   98,  178,    1,    2,
 /*   230 */     3,   68,   25,    6,    7,    8,    9,   10,   11,   12,
 /*   240 */    13,   14,   15,   16,   68,   18,   19,   20,  158,   42,
 /*   250 */   196,  197,  129,   93,  184,   95,   96,   97,  188,   93,
 /*   260 */   100,  146,   55,  129,  104,  105,  106,  107,  134,  109,
 /*   270 */   110,  111,   93,    3,   95,   96,   97,   26,   94,  100,
 /*   280 */    42,   26,  159,  104,  105,  106,  107,   48,  109,  110,
 /*   290 */   111,   25,   85,   27,   28,   29,   30,   53,   54,  129,
 /*   300 */    34,   35,   36,   98,   38,  181,   79,   80,   40,   41,
 /*   310 */   105,   73,   37,   47,   75,    7,    8,   49,  172,   68,
 /*   320 */    52,   55,   14,   68,   49,   98,  143,    1,    2,    3,
 /*   330 */   196,  197,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   340 */    14,   15,   16,   81,   18,   19,   20,  154,  155,  139,
 /*   350 */   157,  141,   86,   87,   88,   89,  186,  187,  150,  166,
 /*   360 */   190,   35,  148,    1,    2,    3,   96,   92,    6,    7,
 /*   370 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   48,
 /*   380 */    18,   19,   20,    1,    2,    3,   79,   80,    6,    7,
 /*   390 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   68,
 /*   400 */    18,   19,   20,    1,    2,    3,   98,  164,    6,    7,
 /*   410 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   83,
 /*   420 */    18,   19,   20,  149,   98,   39,   40,   77,   26,   43,
 /*   430 */   129,  188,    3,   25,    5,  134,   26,   50,  129,   43,
 /*   440 */    68,   55,  147,  134,   15,   16,  188,   18,  120,  154,
 /*   450 */   155,  193,  157,   67,   25,   78,   26,   26,   40,  131,
 /*   460 */    98,  108,   99,   55,   26,  103,   68,   81,   82,   78,
 /*   470 */    43,  170,   43,   87,   88,   28,  175,   87,   69,   68,
 /*   480 */    98,   95,   68,   97,   48,  103,  185,   37,   91,   40,
 /*   490 */    84,  105,   40,  192,  166,    6,   25,  196,  197,   24,
 /*   500 */    98,   37,    1,    2,    3,  196,  197,    6,    7,    8,
 /*   510 */     9,   10,   11,   12,   13,   14,   15,   16,   93,   18,
 /*   520 */    19,   20,   93,  129,   95,   96,   97,  146,  134,  100,
 /*   530 */    67,  137,  147,  104,  105,  106,  107,  138,  109,  110,
 /*   540 */   111,  165,   76,  128,    3,  145,  113,  114,  115,  116,
 /*   550 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*   560 */   127,    2,    3,  130,  138,    6,    7,    8,    9,   10,
 /*   570 */    11,   12,   13,   14,   15,   16,    5,   18,   19,   20,
 /*   580 */    39,   94,  179,  182,   43,   25,  149,  182,  156,   18,
 /*   590 */   196,  197,  185,   25,  141,    5,  163,  129,  142,   98,
 /*   600 */   132,  188,  134,  138,  165,   15,   16,  129,   18,   38,
 /*   610 */    39,   40,   25,   42,   43,  198,   25,  129,  183,  129,
 /*   620 */    49,  129,  129,  129,  129,  128,  134,  129,  129,  129,
 /*   630 */   139,  129,  190,   43,   48,  167,   95,    3,   97,  128,
 /*   640 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   650 */    16,  129,   18,   19,   20,  140,  134,   98,  191,  142,
 /*   660 */   168,  169,  170,   96,  196,  197,   95,  149,   97,  129,
 /*   670 */   142,  158,  132,  139,  134,  104,  105,  106,  107,  102,
 /*   680 */   109,  110,  111,   93,   52,   95,   96,   97,  196,  197,
 /*   690 */   168,  169,  170,  129,  104,  105,  106,  107,  134,  109,
 /*   700 */   110,  111,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   710 */    14,   15,   16,    5,   18,   19,   20,  142,  196,  197,
 /*   720 */   150,  147,   43,  185,  142,  120,   18,   55,  150,   50,
 /*   730 */   199,  199,   98,  199,  170,  199,  196,  197,  199,  175,
 /*   740 */   199,  129,  199,  199,  199,  199,  134,   39,   40,  185,
 /*   750 */   199,   43,  199,    5,  199,  199,  192,   49,  199,  199,
 /*   760 */   196,  197,  199,  199,  199,  199,   18,  199,  199,  199,
 /*   770 */   129,  199,  131,   25,   95,  134,   97,  136,  199,  199,
 /*   780 */   199,  129,  170,  104,  105,  144,  134,  175,  109,  199,
 /*   790 */   199,   43,  151,  199,   98,  199,  129,  185,  131,  132,
 /*   800 */   199,  134,  199,   95,  192,   97,  199,  199,  196,  197,
 /*   810 */   199,  170,  104,  105,  106,  107,  175,  109,  110,  111,
 /*   820 */   153,  169,  170,  199,  199,  184,  185,  129,  199,  131,
 /*   830 */   189,  199,  134,  192,  136,  199,  195,  196,  197,  199,
 /*   840 */   199,  199,  199,   95,  199,   97,  199,  199,  196,  197,
 /*   850 */   199,  199,  104,  105,  106,  107,  199,  109,  110,  111,
 /*   860 */   162,  199,  199,  196,  197,  199,  199,  199,  170,  129,
 /*   870 */   199,  131,  132,  175,  134,  199,  199,  199,  199,  199,
 /*   880 */   199,  199,  184,  185,  199,  199,  188,  189,  199,  199,
 /*   890 */   192,  199,  194,  153,  196,  197,  199,  199,  199,  199,
 /*   900 */   199,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*   910 */   124,  125,  126,  127,  199,  199,  130,  199,  199,  115,
 /*   920 */   116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*   930 */   126,  127,  120,  199,  130,  199,  196,  197,  199,  199,
 /*   940 */     5,  129,  199,  131,  199,  199,  134,  199,  136,  163,
 /*   950 */   120,  199,  199,   18,  199,  199,  199,  199,  199,  129,
 /*   960 */   199,  131,  199,  199,  134,  199,  136,  163,  129,  199,
 /*   970 */   131,  132,  199,  134,  199,  199,  199,  199,   43,  199,
 /*   980 */   199,  199,  170,  199,  199,  129,  199,  175,  199,  199,
 /*   990 */   134,  199,  153,  137,  199,  199,  184,  185,  129,  199,
 /*  1000 */   170,  189,  129,  134,  192,  175,  194,  134,  196,  197,
 /*  1010 */   199,  199,  199,  199,  184,  185,  129,  199,  131,  189,
 /*  1020 */   199,  134,  192,  136,  194,   90,  196,  197,  199,  199,
 /*  1030 */    95,  199,   97,  129,  199,  196,  197,  199,  134,  104,
 /*  1040 */   105,  106,  107,  170,  109,  110,  111,  160,  161,  129,
 /*  1050 */   177,  131,  196,  197,  134,  129,  136,  170,  199,  199,
 /*  1060 */   134,  199,  175,  137,  199,  196,  197,  199,  199,  196,
 /*  1070 */   197,  184,  185,  129,  199,  131,  189,  199,  134,  192,
 /*  1080 */   136,  161,  199,  196,  197,  199,  199,  199,  199,  129,
 /*  1090 */   170,  131,  199,  199,  134,  175,  136,  171,  129,  199,
 /*  1100 */   196,  197,  199,  134,  184,  185,  137,  199,  129,  189,
 /*  1110 */   199,  199,  192,  134,  170,  199,  196,  197,  199,  175,
 /*  1120 */   199,  199,  196,  197,  199,    5,  199,  129,  184,  185,
 /*  1130 */   170,  199,  134,  189,  199,  175,  192,  120,   18,  195,
 /*  1140 */   196,  197,  199,  199,  184,  185,  129,  199,  131,  189,
 /*  1150 */   199,  134,  192,  136,  194,  199,  196,  197,  199,  199,
 /*  1160 */   199,  199,  199,   43,  199,  196,  197,  199,  170,  199,
 /*  1170 */   199,  199,  199,  175,  199,  196,  197,  129,   25,  131,
 /*  1180 */   199,  199,  134,  185,  136,  199,  129,  170,  199,  199,
 /*  1190 */   192,  134,  175,  199,  196,  197,   43,  199,  199,  129,
 /*  1200 */   199,  184,  185,  199,  134,  129,  189,  131,  199,  192,
 /*  1210 */   134,  129,  136,  196,  197,   95,  134,   97,  170,  199,
 /*  1220 */   199,  199,  199,  175,  104,  105,  106,  107,  199,  109,
 /*  1230 */   110,  111,  184,  185,  129,  199,  131,  189,  199,  134,
 /*  1240 */   192,  136,  199,  199,  196,  197,  170,  199,   95,  199,
 /*  1250 */    97,  175,  199,  196,  197,  199,  199,  104,  105,  199,
 /*  1260 */   184,  185,  109,  199,  199,  189,  196,  197,  192,  129,
 /*  1270 */   199,  131,  196,  197,  134,  170,  136,  199,  196,  197,
 /*  1280 */   175,  199,  199,  199,  199,  199,  199,  199,  199,  184,
 /*  1290 */   185,  199,  199,  129,  189,  131,  199,  192,  134,  199,
 /*  1300 */   136,  196,  197,  129,  199,  199,  132,  199,  134,  129,
 /*  1310 */   170,  131,  129,  199,  134,  175,  136,  134,  199,  199,
 /*  1320 */   199,  199,  129,  199,  184,  185,  129,  134,  199,  189,
 /*  1330 */   199,  134,  192,  199,  170,  199,  196,  197,  199,  175,
 /*  1340 */   129,  167,  131,   18,  199,  134,  129,  136,  184,  185,
 /*  1350 */   170,  134,  199,  189,  199,  175,  192,  199,  199,  199,
 /*  1360 */   196,  197,  199,  199,  184,  185,  199,  170,   43,  189,
 /*  1370 */   196,  197,  192,  176,  177,  199,  196,  197,  199,  196,
 /*  1380 */   197,  170,  199,  129,  199,  199,  175,  199,  134,  196,
 /*  1390 */   197,  199,  199,  196,  197,  184,  185,  199,  199,  129,
 /*  1400 */   189,  131,  199,  192,  134,  129,  136,  196,  197,  199,
 /*  1410 */   134,  199,  199,  196,  197,  199,  199,  199,  199,  129,
 /*  1420 */    95,  131,   97,  199,  134,  199,  136,  199,  199,  104,
 /*  1430 */   105,  199,  199,  129,  109,  199,  199,  199,  134,  129,
 /*  1440 */   170,  131,  199,  199,  134,  175,  136,  199,  199,  199,
 /*  1450 */   196,  197,  199,  199,  184,  185,  199,  199,  199,  189,
 /*  1460 */   170,  199,  192,  199,  199,  175,  196,  197,  199,  199,
 /*  1470 */   199,  199,  196,  197,  184,  185,  199,  199,  199,  189,
 /*  1480 */   170,  199,  192,  199,  199,  175,  196,  197,  199,  199,
 /*  1490 */   199,  129,  199,  131,  184,  185,  134,  199,  136,  189,
 /*  1500 */   196,  197,  192,  199,  199,  199,  196,  197,  199,  199,
 /*  1510 */   199,  129,  199,  131,  199,  199,  134,  199,  136,  199,
 /*  1520 */   199,  199,  199,  199,  199,  199,  199,  199,  199,  129,
 /*  1530 */   199,  131,  170,  199,  134,  199,  136,  175,  199,   43,
 /*  1540 */   199,  199,  199,    6,  199,  199,  184,  185,  199,  199,
 /*  1550 */   199,  189,  170,  199,  192,  199,  199,  175,  196,  197,
 /*  1560 */   199,  199,  199,  199,  199,  199,  184,  185,  199,  199,
 /*  1570 */   170,  189,  199,  199,  192,  175,  199,  199,  196,  197,
 /*  1580 */    43,  199,  199,  199,  184,  185,  199,  199,  199,  189,
 /*  1590 */   199,   95,  192,   97,  199,  199,  196,  197,  199,  199,
 /*  1600 */   104,  105,  199,  199,  129,  109,  131,  199,  199,  134,
 /*  1610 */   129,  136,  131,  199,  199,  134,  199,  136,  199,  199,
 /*  1620 */   199,  199,  199,  199,  199,  199,  199,  199,  129,  199,
 /*  1630 */   131,  199,   95,  134,   97,  136,  199,  199,  199,  199,
 /*  1640 */   199,  104,  105,  199,  199,  170,  109,  199,  199,  199,
 /*  1650 */   175,  170,  199,  199,   43,  199,  175,  199,  199,  184,
 /*  1660 */   185,   50,  199,  199,  189,  184,  185,  192,  199,  170,
 /*  1670 */   189,  196,  197,  192,  175,  199,  199,  196,  197,  199,
 /*  1680 */   199,  199,  199,  184,  185,  199,  199,  129,  189,  131,
 /*  1690 */   199,  192,  134,  199,  136,  196,  197,  199,  199,  199,
 /*  1700 */   199,  199,  199,  199,  199,  129,   95,  131,   97,  199,
 /*  1710 */   134,  199,  136,  199,  199,  104,  105,  199,  199,  199,
 /*  1720 */   109,  199,  199,  199,  199,  199,  199,  199,  170,  199,
 /*  1730 */   199,  199,  199,  175,  129,  199,  131,  199,  199,  134,
 /*  1740 */   199,  136,  184,  185,  199,  199,  170,  189,  199,  199,
 /*  1750 */   192,  175,  199,  199,  196,  197,  199,  199,  199,  199,
 /*  1760 */   184,  185,  199,  199,  199,  189,  199,  199,  192,  199,
 /*  1770 */   199,  199,  196,  197,  199,  170,  199,  199,  199,  199,
 /*  1780 */   175,  129,  199,  131,  199,  199,  134,  199,  136,  184,
 /*  1790 */   185,  199,  199,  199,  189,  199,  199,  192,  199,  199,
 /*  1800 */   199,  196,  197,  199,  129,  199,  131,  199,  199,  134,
 /*  1810 */   199,  136,  199,  199,  199,  199,  199,  199,  199,  199,
 /*  1820 */   199,  199,  170,  199,  199,  199,  199,  175,  199,  199,
 /*  1830 */   199,  199,  199,  199,  199,  199,  184,  185,  199,  199,
 /*  1840 */   199,  189,  199,  199,  192,  170,  199,  199,  196,  197,
 /*  1850 */   175,  199,  199,  199,  199,  199,  199,  199,  199,  184,
 /*  1860 */   185,  199,  199,  199,  189,  199,  199,  192,  199,  199,
 /*  1870 */   199,  196,  197,
);
    const YY_SHIFT_USE_DFLT = -76;
    const YY_SHIFT_MAX = 221;
    static public $yy_shift_ofst = array(
 /*     0 */   266,   -3,  429,  266,  266,   62,   62,  179,  160,   62,
 /*    10 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*    20 */   179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
 /*    30 */   179,  179,  179,  179,  590,  590,  590,  590,  748,  748,
 /*    40 */   748,  748,  748,  748, 1120, 1120, 1120,  708,  935, 1120,
 /*    50 */  1120, 1120,  571,  708,  708,  708, 1120,   23, 1120, 1120,
 /*    60 */  1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
 /*    70 */  1120, 1120,  -53,  238,  128,  227,  205,  362,  382,  326,
 /*    80 */   402,  402,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    90 */   501,  501,  501,  501,  559,  634,  634,  696, 1496,  207,
 /*   100 */    63,  587, 1153, 1325, 1496, 1496, 1496,  154,  268,  408,
 /*   110 */   591,  560,  386,  679, 1611, 1537, 1496, 1496, 1496, 1496,
 /*   120 */  1496, 1496, 1496,  541,   59,   83,  308,   43,  275,  270,
 /*   130 */   244,  147,  331,  147,   17,  307,  239,  244,  244,  184,
 /*   140 */   350,  487,  560,  568,  586,  262,  672,  568,  466,  350,
 /*   150 */   568,  568,  577,  262,  567,  568,  632,  100,  466,  372,
 /*   160 */   100,  262,  139,  350,  336,  -76,  -76,  -76,  -76,   14,
 /*   170 */    79,  119,  163,   85,  176,  251,  255,  125,  136,  130,
 /*   180 */    26,  -17,  -75,  -35,   33,   39,  410,  166,  387,  436,
 /*   190 */   390,  463,  372,  372,  450,  125,  449,  397,  452,  489,
 /*   200 */   396,  471,  475,  464,  438,  425,  406,  414,  377,  411,
 /*   210 */   353,  409,  447,  427,  438,  391,  398,  363,  418,  353,
 /*   220 */   431,  430,
);
    const YY_REDUCE_USE_DFLT = -177;
    const YY_REDUCE_MAX = 168;
    static public $yy_reduce_ofst = array(
 /*     0 */   433,  641,  698,  786,  804,  812,  830,  887,  960, 1017,
 /*    10 */   960,  944,  920, 1048, 1310, 1290, 1270, 1211, 1180, 1164,
 /*    20 */  1140, 1105, 1076, 1400, 1675, 1475, 1558, 1499, 1481, 1652,
 /*    30 */  1576, 1605, 1362, 1382,  301,  564,  998,  612,  -43,  -84,
 /*    40 */  -125,  839,  740,  667, 1197,  522,  492,  926,  468, 1174,
 /*    50 */   873,  652,  969,  856,   54,  394,  540,  170, 1304, 1276,
 /*    60 */  1254,  134, 1217, 1193, 1183,  309, 1082, 1070, 1057,  979,
 /*    70 */   904,  869,  295,  193, -176, -176, -176, -176, -176, -176,
 /*    80 */  -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
 /*    90 */  -176, -176, -176, -176, -176, -176, -176, -176,  -78,  328,
 /*   100 */  -176,   70,  123, -126,   31, -128,   -7,  -89,  210,   50,
 /*   110 */   258,  243,  417,  488,  490,  493,  494,  478,  495,  498,
 /*   120 */   499,  500,  502,  435,  491,  515,  442,  497,  453,  407,
 /*   130 */   465,  511,  376,  415,  400,  403,  432,  426,  399,  401,
 /*   140 */   437,  405,  413,  456,  439,  578,  605,  582,  574,  518,
 /*   150 */   528,  517,  467,  570,  538,  575,  534,  513,  385,  381,
 /*   160 */    90,  208,   49,  274,  214,  183,  146,  124,  115,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 1 */ array(3, 5, 15, 16, 18, 25, 43, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 2 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 3 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 4 */ array(25, 27, 28, 29, 30, 34, 35, 36, 38, 47, 55, 86, 87, 88, 89, ),
        /* 5 */ array(3, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 6 */ array(3, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 7 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 8 */ array(3, 5, 15, 16, 18, 25, 26, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 9 */ array(3, 5, 15, 16, 18, 25, 43, 55, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 10 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 11 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 12 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 13 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 14 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 15 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 16 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 17 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 18 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 19 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 20 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 21 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 22 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 23 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 24 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 25 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 26 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 27 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 28 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 29 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 30 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 31 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 32 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 33 */ array(3, 5, 15, 16, 18, 25, 43, 93, 95, 96, 97, 100, 104, 105, 106, 107, 109, 110, 111, ),
        /* 34 */ array(5, 15, 16, 18, 43, 93, 95, 96, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 35 */ array(5, 15, 16, 18, 43, 93, 95, 96, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 36 */ array(5, 15, 16, 18, 43, 93, 95, 96, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 37 */ array(5, 15, 16, 18, 43, 93, 95, 96, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 38 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 39 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 40 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 41 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 42 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 43 */ array(5, 18, 25, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 44 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 45 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 46 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 47 */ array(5, 18, 39, 40, 43, 49, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 48 */ array(5, 18, 43, 90, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 49 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 50 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 51 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 52 */ array(5, 18, 38, 39, 40, 42, 43, 49, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 53 */ array(5, 18, 39, 40, 43, 49, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 54 */ array(5, 18, 39, 40, 43, 49, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 55 */ array(5, 18, 39, 40, 43, 49, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 56 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 57 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 43, 50, 95, 97, 98, 104, 105, 109, ),
        /* 58 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 59 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 60 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 61 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 62 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 63 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 64 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 65 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 66 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 67 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 68 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 69 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 70 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 71 */ array(5, 18, 43, 95, 97, 104, 105, 106, 107, 109, 110, 111, ),
        /* 72 */ array(69, 70, 71, 72, 73, 76, ),
        /* 73 */ array(42, 73, ),
        /* 74 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 68, 82, 98, ),
        /* 75 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 79, 80, 98, ),
        /* 76 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 105, ),
        /* 77 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 103, ),
        /* 78 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, 103, ),
        /* 79 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 35, 98, ),
        /* 80 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, ),
        /* 81 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 98, ),
        /* 82 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 83 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 84 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 85 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 86 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 87 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 88 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 89 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 90 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 91 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 92 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 93 */ array(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 94 */ array(2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 95 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 96 */ array(3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 97 */ array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 98, ),
        /* 98 */ array(43, 95, 97, 104, 105, 109, ),
        /* 99 */ array(25, 42, 55, 85, ),
        /* 100 */ array(18, 19, 20, 98, ),
        /* 101 */ array(25, ),
        /* 102 */ array(25, 43, 95, 97, 104, 105, 109, ),
        /* 103 */ array(18, 43, 95, 97, 104, 105, 109, ),
        /* 104 */ array(43, 95, 97, 104, 105, 109, ),
        /* 105 */ array(43, 95, 97, 104, 105, 109, ),
        /* 106 */ array(43, 95, 97, 104, 105, 109, ),
        /* 107 */ array(38, 44, 45, 46, 51, ),
        /* 108 */ array(40, 41, 49, 52, ),
        /* 109 */ array(25, 55, ),
        /* 110 */ array(25, ),
        /* 111 */ array(25, ),
        /* 112 */ array(39, 40, 43, 55, 67, 81, 82, 87, 88, 95, 97, 105, ),
        /* 113 */ array(43, 50, 95, 97, 104, 105, 109, ),
        /* 114 */ array(43, 50, 95, 97, 104, 105, 109, ),
        /* 115 */ array(6, 43, 95, 97, 104, 105, 109, ),
        /* 116 */ array(43, 95, 97, 104, 105, 109, ),
        /* 117 */ array(43, 95, 97, 104, 105, 109, ),
        /* 118 */ array(43, 95, 97, 104, 105, 109, ),
        /* 119 */ array(43, 95, 97, 104, 105, 109, ),
        /* 120 */ array(43, 95, 97, 104, 105, 109, ),
        /* 121 */ array(43, 95, 97, 104, 105, 109, ),
        /* 122 */ array(43, 95, 97, 104, 105, 109, ),
        /* 123 */ array(3, 39, 43, 95, 97, ),
        /* 124 */ array(39, 40, 41, 52, ),
        /* 125 */ array(31, 40, 41, 50, ),
        /* 126 */ array(7, 8, 14, 98, ),
        /* 127 */ array(31, 32, 33, ),
        /* 128 */ array(37, 49, 92, ),
        /* 129 */ array(3, 96, ),
        /* 130 */ array(53, 54, ),
        /* 131 */ array(32, 33, ),
        /* 132 */ array(48, 68, ),
        /* 133 */ array(32, 33, ),
        /* 134 */ array(67, 68, ),
        /* 135 */ array(79, 80, ),
        /* 136 */ array(48, 75, ),
        /* 137 */ array(53, 54, ),
        /* 138 */ array(53, 54, ),
        /* 139 */ array(25, 94, ),
        /* 140 */ array(77, ),
        /* 141 */ array(94, ),
        /* 142 */ array(25, ),
        /* 143 */ array(25, ),
        /* 144 */ array(48, ),
        /* 145 */ array(81, ),
        /* 146 */ array(55, ),
        /* 147 */ array(25, ),
        /* 148 */ array(76, ),
        /* 149 */ array(77, ),
        /* 150 */ array(25, ),
        /* 151 */ array(25, ),
        /* 152 */ array(102, ),
        /* 153 */ array(81, ),
        /* 154 */ array(96, ),
        /* 155 */ array(25, ),
        /* 156 */ array(52, ),
        /* 157 */ array(74, ),
        /* 158 */ array(76, ),
        /* 159 */ array(68, ),
        /* 160 */ array(74, ),
        /* 161 */ array(81, ),
        /* 162 */ array(25, ),
        /* 163 */ array(77, ),
        /* 164 */ array(83, ),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(35, 101, 102, ),
        /* 170 */ array(70, 71, 72, ),
        /* 171 */ array(26, 68, ),
        /* 172 */ array(26, 68, ),
        /* 173 */ array(40, 41, ),
        /* 174 */ array(26, 68, ),
        /* 175 */ array(26, 68, ),
        /* 176 */ array(26, 68, ),
        /* 177 */ array(68, ),
        /* 178 */ array(41, ),
        /* 179 */ array(26, ),
        /* 180 */ array(93, ),
        /* 181 */ array(25, ),
        /* 182 */ array(96, ),
        /* 183 */ array(40, ),
        /* 184 */ array(31, ),
        /* 185 */ array(40, ),
        /* 186 */ array(26, ),
        /* 187 */ array(93, ),
        /* 188 */ array(50, ),
        /* 189 */ array(48, ),
        /* 190 */ array(87, ),
        /* 191 */ array(67, ),
        /* 192 */ array(68, ),
        /* 193 */ array(68, ),
        /* 194 */ array(37, ),
        /* 195 */ array(68, ),
        /* 196 */ array(40, ),
        /* 197 */ array(91, ),
        /* 198 */ array(40, ),
        /* 199 */ array(6, ),
        /* 200 */ array(43, ),
        /* 201 */ array(25, ),
        /* 202 */ array(24, ),
        /* 203 */ array(37, ),
        /* 204 */ array(26, ),
        /* 205 */ array(93, ),
        /* 206 */ array(84, ),
        /* 207 */ array(68, ),
        /* 208 */ array(78, ),
        /* 209 */ array(68, ),
        /* 210 */ array(108, ),
        /* 211 */ array(69, ),
        /* 212 */ array(28, ),
        /* 213 */ array(43, ),
        /* 214 */ array(26, ),
        /* 215 */ array(78, ),
        /* 216 */ array(68, ),
        /* 217 */ array(99, ),
        /* 218 */ array(40, ),
        /* 219 */ array(108, ),
        /* 220 */ array(26, ),
        /* 221 */ array(26, ),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
        /* 348 */ array(),
        /* 349 */ array(),
        /* 350 */ array(),
        /* 351 */ array(),
        /* 352 */ array(),
        /* 353 */ array(),
        /* 354 */ array(),
        /* 355 */ array(),
        /* 356 */ array(),
        /* 357 */ array(),
        /* 358 */ array(),
        /* 359 */ array(),
        /* 360 */ array(),
        /* 361 */ array(),
        /* 362 */ array(),
        /* 363 */ array(),
        /* 364 */ array(),
        /* 365 */ array(),
        /* 366 */ array(),
        /* 367 */ array(),
        /* 368 */ array(),
        /* 369 */ array(),
        /* 370 */ array(),
        /* 371 */ array(),
        /* 372 */ array(),
        /* 373 */ array(),
        /* 374 */ array(),
        /* 375 */ array(),
        /* 376 */ array(),
        /* 377 */ array(),
        /* 378 */ array(),
        /* 379 */ array(),
        /* 380 */ array(),
        /* 381 */ array(),
);
    static public $yy_default = array(
 /*     0 */   398,  601,  601,  398,  398,  601,  601,  601,  601,  601,
 /*    10 */   601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
 /*    20 */   601,  601,  601,  601,  601,  601,  601,  601,  601,  591,
 /*    30 */   601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
 /*    40 */   601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
 /*    50 */   601,  601,  601,  601,  601,  601,  601,  580,  601,  601,
 /*    60 */   601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
 /*    70 */   601,  601,  463,  455,  472,  469,  601,  601,  601,  601,
 /*    80 */   601,  577,  462,  577,  471,  470,  475,  493,  576,  414,
 /*    90 */   551,  458,  552,  536,  528,  527,  529,  532,  495,  601,
 /*   100 */   535,  601,  601,  601,  601,  601,  601,  601,  430,  601,
 /*   110 */   593,  601,  601,  446,  601,  601,  601,  601,  601,  601,
 /*   120 */   601,  601,  601,  514,  430,  427,  601,  406,  425,  545,
 /*   130 */   433,  406,  489,  406,  439,  511,  461,  433,  433,  518,
 /*   140 */   465,  518,  601,  601,  489,  473,  601,  601,  463,  465,
 /*   150 */   601,  601,  601,  473,  601,  601,  430,  457,  463,  448,
 /*   160 */   457,  473,  513,  465,  476,  436,  497,  521,  448,  601,
 /*   170 */   453,  601,  601,  601,  601,  601,  601,  488,  601,  601,
 /*   180 */   601,  486,  601,  601,  601,  601,  601,  601,  601,  601,
 /*   190 */   601,  601,  438,  481,  601,  490,  601,  601,  601,  601,
 /*   200 */   601,  601,  382,  601,  563,  601,  474,  464,  601,  572,
 /*   210 */   595,  601,  601,  601,  601,  601,  459,  546,  601,  561,
 /*   220 */   601,  601,  412,  595,  584,  498,  413,  499,  500,  501,
 /*   230 */   502,  477,  496,  478,  567,  596,  419,  421,  426,  434,
 /*   240 */   410,  428,  409,  429,  423,  585,  600,  599,  598,  494,
 /*   250 */   597,  588,  479,  586,  587,  403,  411,  389,  395,  394,
 /*   260 */   482,  393,  392,  391,  390,  388,  397,  483,  387,  386,
 /*   270 */   484,  385,  383,  487,  485,  396,  399,  408,  594,  407,
 /*   280 */   404,  565,  491,  402,  401,  492,  573,  405,  593,  574,
 /*   290 */   592,  480,  591,  590,  589,  400,  533,  543,  534,  432,
 /*   300 */   579,  530,  415,  467,  416,  431,  468,  466,  435,  503,
 /*   310 */   538,  506,  537,  507,  575,  570,  509,  437,  578,  563,
 /*   320 */   452,  568,  583,  450,  449,  451,  456,  445,  454,  582,
 /*   330 */   444,  443,  442,  440,  441,  447,  571,  581,  510,  569,
 /*   340 */   420,  544,  549,  540,  516,  519,  539,  531,  417,  548,
 /*   350 */   515,  547,  418,  545,  460,  422,  424,  542,  541,  550,
 /*   360 */   553,  512,  558,  508,  566,  564,  562,  504,  560,  505,
 /*   370 */   559,  557,  526,  520,  556,  522,  555,  523,  524,  554,
 /*   380 */   525,  384,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 200;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 382;
    const YYNRULE = 219;
    const YYERRORSYMBOL = 112;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'T_OR',          'T_AND',         'T_NOT',       
  'T_QUESTION',    'T_COLON',       'T_EQ',          'T_LIKE',      
  'T_GLOB',        'T_NE',          'T_GT',          'T_GE',        
  'T_LT',          'T_LE',          'T_IN',          'T_PLUS',      
  'T_MINUS',       'T_CONCAT',      'T_TIMES',       'T_DIV',       
  'T_MOD',         'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',
  'SEMICOLON',     'PAR_OPEN',      'PAR_CLOSE',     'BEGIN',       
  'SAVEPOINT',     'RELEASE',       'ROLLBACK',      'TO',          
  'TRANSACTION',   'WORK',          'COMMIT',        'T_END',       
  'ALTER',         'TABLE',         'DROP',          'PRIMARY',     
  'KEY',           'INDEX',         'SET',           'T_DEFAULT',   
  'MODIFY',        'ADD',           'RENAME',        'CREATE',      
  'ON',            'UNIQUE',        'T_AS',          'CHANGE',      
  'T_COLUMN',      'T_FIRST',       'T_AFTER',       'SELECT',      
  'ALL',           'DISTINCT',      'DISTINCTROW',   'HIGH_PRIORITY',
  'STRAIGHT_JOIN',  'SQL_SMALL_RESULT',  'SQL_BIG_RESULT',  'SQL_CACHE',   
  'SQL_CALC_FOUND_ROWS',  'SQL_BUFFER_RESULT',  'SQL_NO_CACHE',  'FROM',        
  'COMMA',         'JOIN',          'INNER',         'LEFT',        
  'RIGHT',         'NATURAL',       'OUTER',         'USING',       
  'WHERE',         'ORDER',         'BY',            'DESC',        
  'ASC',           'LIMIT',         'OFFSET',        'GROUP',       
  'HAVING',        'VALUES',        'DELETE',        'UPDATE',      
  'INSERT',        'REPLACE',       'INTO',          'DUPLICATE',   
  'VIEW',          'NUMBER',        'T_UNSIGNED',    'COLLATE',     
  'T_NULL',        'AUTO_INCREMENT',  'T_IS',          'T_BINARY',    
  'T_CASE',        'T_ELSE',        'WHEN',          'THEN',        
  'INTERVAL',      'ALPHA',         'T_STRING1',     'T_STRING2',   
  'T_DOT',         'COLUMN',        'QUESTION',      'T_DOLLAR',    
  'error',         'query',         'stmts',         'stmt',        
  'begin',         'commit',        'rollback',      'drop',        
  'select',        'insert',        'update',        'delete',      
  'alter_table',   'create_table',  'create_index',  'create_view', 
  'transaction_keyword',  'alpha',         'commit_keyword',  'inner_select',
  'table_name',    'alter_operation',  'colname',       'alter_change',
  'expr',          'create_column',  'after',         'optional_column',
  'to',            'index_type',    'index_list',    'select_opts', 
  'expr_list_as',  'from',          'joins',         'where',       
  'group_by',      'order_by',      'limit',         'select_mod',  
  'table_list',    'table_with_alias',  'join',          'join_type',   
  'join_condition',  'join_prefix',   'join_postfix',  'columns',     
  'order_by_fields',  'order_by_field',  'expr_list_par_optional',  'insert_stmt', 
  'expr_list_par_many',  'on_dup',        'set_expr',      'insert_table',
  'set_expr_values',  'assign',        'term_colname',  'create_fields',
  'table_opts',    'table_opt',     'table_key',     'term',        
  'indexes',       'index_col_name',  'length',        'order',       
  'data_type',     'column_mods',   'unsigned',      'column_mod',  
  'term_select',   'null',          'negable',       'in',          
  'expr_list_par',  'case',          'negable_expr',  'case_options',
  'function_call',  'expr_list_par_or_null',  'expr_list',     'expr_as',     
  'alpha_or_all',  'variable',      'variable_name',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "query ::= stmts",
 /*   1 */ "stmts ::= stmts SEMICOLON stmt",
 /*   2 */ "stmts ::= stmt",
 /*   3 */ "stmt ::= PAR_OPEN stmt PAR_CLOSE",
 /*   4 */ "stmt ::= begin",
 /*   5 */ "stmt ::= commit",
 /*   6 */ "stmt ::= rollback",
 /*   7 */ "stmt ::= drop",
 /*   8 */ "stmt ::= select",
 /*   9 */ "stmt ::= insert",
 /*  10 */ "stmt ::= update",
 /*  11 */ "stmt ::= delete",
 /*  12 */ "stmt ::= alter_table",
 /*  13 */ "stmt ::= create_table",
 /*  14 */ "stmt ::= create_index",
 /*  15 */ "stmt ::= create_view",
 /*  16 */ "stmt ::=",
 /*  17 */ "begin ::= BEGIN transaction_keyword",
 /*  18 */ "begin ::= SAVEPOINT alpha",
 /*  19 */ "commit ::= commit_keyword transaction_keyword",
 /*  20 */ "commit ::= RELEASE SAVEPOINT alpha",
 /*  21 */ "rollback ::= ROLLBACK transaction_keyword",
 /*  22 */ "rollback ::= ROLLBACK TO alpha",
 /*  23 */ "transaction_keyword ::= TRANSACTION|WORK",
 /*  24 */ "transaction_keyword ::=",
 /*  25 */ "commit_keyword ::= COMMIT",
 /*  26 */ "commit_keyword ::= T_END",
 /*  27 */ "inner_select ::= PAR_OPEN inner_select PAR_CLOSE",
 /*  28 */ "inner_select ::= PAR_OPEN select PAR_CLOSE",
 /*  29 */ "alter_table ::= ALTER TABLE table_name alter_operation",
 /*  30 */ "alter_operation ::= DROP PRIMARY KEY",
 /*  31 */ "alter_operation ::= DROP KEY|INDEX colname",
 /*  32 */ "alter_operation ::= alter_change SET T_DEFAULT expr",
 /*  33 */ "alter_operation ::= alter_change DROP T_DEFAULT",
 /*  34 */ "alter_operation ::= alter_change create_column after",
 /*  35 */ "alter_operation ::= MODIFY create_column after",
 /*  36 */ "alter_operation ::= ADD optional_column create_column after",
 /*  37 */ "alter_operation ::= DROP optional_column colname",
 /*  38 */ "alter_operation ::= RENAME to colname",
 /*  39 */ "alter_operation ::= RENAME KEY|INDEX colname TO colname",
 /*  40 */ "alter_operation ::= ADD index_type KEY|INDEX colname index_list",
 /*  41 */ "create_index ::= CREATE index_type INDEX colname ON colname index_list",
 /*  42 */ "index_type ::= UNIQUE",
 /*  43 */ "index_type ::=",
 /*  44 */ "to ::= TO|T_AS",
 /*  45 */ "to ::=",
 /*  46 */ "alter_change ::= CHANGE optional_column colname",
 /*  47 */ "optional_column ::= T_COLUMN",
 /*  48 */ "optional_column ::=",
 /*  49 */ "after ::= T_FIRST",
 /*  50 */ "after ::= T_AFTER colname",
 /*  51 */ "after ::=",
 /*  52 */ "select ::= SELECT select_opts expr_list_as from joins where group_by order_by limit",
 /*  53 */ "select_opts ::= select_opts select_mod",
 /*  54 */ "select_opts ::=",
 /*  55 */ "select_mod ::= ALL|DISTINCT|DISTINCTROW|HIGH_PRIORITY|STRAIGHT_JOIN|SQL_SMALL_RESULT|SQL_BIG_RESULT|SQL_CACHE|SQL_CALC_FOUND_ROWS|SQL_BUFFER_RESULT|SQL_NO_CACHE",
 /*  56 */ "from ::= FROM table_list",
 /*  57 */ "from ::=",
 /*  58 */ "table_list ::= table_list COMMA table_with_alias",
 /*  59 */ "table_list ::= table_with_alias",
 /*  60 */ "table_with_alias ::= inner_select T_AS alpha",
 /*  61 */ "table_with_alias ::= inner_select alpha",
 /*  62 */ "table_with_alias ::= table_name T_AS alpha",
 /*  63 */ "table_with_alias ::= table_name alpha",
 /*  64 */ "table_with_alias ::= table_name",
 /*  65 */ "joins ::= joins join",
 /*  66 */ "joins ::=",
 /*  67 */ "join ::= join_type JOIN table_with_alias join_condition",
 /*  68 */ "join_type ::= join_prefix INNER",
 /*  69 */ "join_type ::= join_prefix LEFT join_postfix",
 /*  70 */ "join_type ::= join_prefix RIGHT join_postfix",
 /*  71 */ "join_type ::= join_prefix",
 /*  72 */ "join_prefix ::= NATURAL",
 /*  73 */ "join_prefix ::=",
 /*  74 */ "join_postfix ::= OUTER",
 /*  75 */ "join_postfix ::=",
 /*  76 */ "join_condition ::= ON expr",
 /*  77 */ "join_condition ::= USING columns",
 /*  78 */ "join_condition ::= USING PAR_OPEN columns PAR_CLOSE",
 /*  79 */ "join_condition ::=",
 /*  80 */ "where ::= WHERE expr",
 /*  81 */ "where ::=",
 /*  82 */ "order_by ::= ORDER BY order_by_fields",
 /*  83 */ "order_by ::=",
 /*  84 */ "order_by_fields ::= order_by_fields COMMA order_by_field",
 /*  85 */ "order_by_fields ::= order_by_field",
 /*  86 */ "order_by_field ::= expr DESC|ASC",
 /*  87 */ "order_by_field ::= expr",
 /*  88 */ "limit ::= LIMIT expr OFFSET expr",
 /*  89 */ "limit ::= LIMIT expr COMMA expr",
 /*  90 */ "limit ::= LIMIT expr",
 /*  91 */ "limit ::=",
 /*  92 */ "group_by ::= GROUP BY expr_list_par_optional",
 /*  93 */ "group_by ::= GROUP BY expr_list_par_optional HAVING expr",
 /*  94 */ "group_by ::=",
 /*  95 */ "insert ::= insert_stmt select",
 /*  96 */ "insert ::= insert_stmt inner_select",
 /*  97 */ "insert ::= insert_stmt VALUES expr_list_par_many on_dup",
 /*  98 */ "insert ::= insert_stmt set_expr on_dup",
 /*  99 */ "drop ::= DROP TABLE table_list",
 /* 100 */ "delete ::= DELETE FROM table_with_alias where order_by limit",
 /* 101 */ "update ::= UPDATE table_list joins set_expr where order_by limit",
 /* 102 */ "insert_stmt ::= INSERT|REPLACE INTO insert_table",
 /* 103 */ "insert_stmt ::= INSERT|REPLACE insert_table",
 /* 104 */ "insert_table ::= table_name",
 /* 105 */ "insert_table ::= table_name PAR_OPEN columns PAR_CLOSE",
 /* 106 */ "on_dup ::= ON DUPLICATE KEY UPDATE set_expr_values",
 /* 107 */ "on_dup ::=",
 /* 108 */ "set_expr ::= SET set_expr_values",
 /* 109 */ "set_expr_values ::= set_expr_values COMMA assign",
 /* 110 */ "set_expr_values ::= assign",
 /* 111 */ "assign ::= term_colname T_EQ expr",
 /* 112 */ "create_view ::= CREATE VIEW colname T_AS select",
 /* 113 */ "create_table ::= CREATE TABLE colname PAR_OPEN create_fields PAR_CLOSE table_opts",
 /* 114 */ "table_opts ::= table_opts table_opt",
 /* 115 */ "table_opts ::=",
 /* 116 */ "table_opt ::= table_key T_EQ term",
 /* 117 */ "table_key ::= table_key alpha",
 /* 118 */ "table_key ::= alpha",
 /* 119 */ "create_fields ::= create_fields COMMA create_column",
 /* 120 */ "create_fields ::= create_column",
 /* 121 */ "create_column ::= PRIMARY KEY index_list",
 /* 122 */ "create_column ::= UNIQUE KEY colname index_list",
 /* 123 */ "create_column ::= KEY colname index_list",
 /* 124 */ "index_list ::= PAR_OPEN indexes PAR_CLOSE",
 /* 125 */ "indexes ::= indexes COMMA index_col_name",
 /* 126 */ "indexes ::= index_col_name",
 /* 127 */ "index_col_name ::= term_colname length order",
 /* 128 */ "order ::= DESC|ASC",
 /* 129 */ "order ::=",
 /* 130 */ "length ::= PAR_OPEN NUMBER PAR_CLOSE",
 /* 131 */ "length ::=",
 /* 132 */ "create_column ::= colname data_type column_mods",
 /* 133 */ "data_type ::= alpha unsigned",
 /* 134 */ "data_type ::= alpha PAR_OPEN NUMBER PAR_CLOSE unsigned",
 /* 135 */ "data_type ::= alpha PAR_OPEN NUMBER PAR_CLOSE unsigned",
 /* 136 */ "unsigned ::=",
 /* 137 */ "unsigned ::= T_UNSIGNED",
 /* 138 */ "column_mods ::= column_mods column_mod",
 /* 139 */ "column_mods ::=",
 /* 140 */ "column_mod ::= T_DEFAULT term",
 /* 141 */ "column_mod ::= COLLATE term",
 /* 142 */ "column_mod ::= PRIMARY KEY",
 /* 143 */ "column_mod ::= T_NOT T_NULL",
 /* 144 */ "column_mod ::= AUTO_INCREMENT",
 /* 145 */ "expr ::= expr T_AND expr",
 /* 146 */ "expr ::= expr T_OR expr",
 /* 147 */ "expr ::= T_NOT expr",
 /* 148 */ "expr ::= PAR_OPEN expr PAR_CLOSE",
 /* 149 */ "expr ::= term_select",
 /* 150 */ "expr ::= expr T_EQ|T_NE|T_GT|T_GE|T_LT|T_LE expr",
 /* 151 */ "expr ::= expr T_IS T_NOT null",
 /* 152 */ "expr ::= expr T_IS null",
 /* 153 */ "expr ::= expr T_PLUS|T_MINUS|T_TIMES|T_DIV|T_MOD expr",
 /* 154 */ "expr ::= expr negable expr",
 /* 155 */ "expr ::= expr in term_select",
 /* 156 */ "expr ::= expr in expr_list_par",
 /* 157 */ "expr ::= case",
 /* 158 */ "expr ::= term",
 /* 159 */ "in ::= T_IN",
 /* 160 */ "in ::= T_NOT T_IN",
 /* 161 */ "negable ::= T_NOT negable_expr",
 /* 162 */ "negable ::= negable_expr",
 /* 163 */ "negable_expr ::= T_IS",
 /* 164 */ "negable_expr ::= T_LIKE",
 /* 165 */ "negable_expr ::= T_LIKE T_BINARY",
 /* 166 */ "negable_expr ::= T_GLOB",
 /* 167 */ "case ::= T_CASE case_options T_END",
 /* 168 */ "case ::= T_CASE case_options T_ELSE expr T_END",
 /* 169 */ "case_options ::= case_options WHEN expr THEN expr",
 /* 170 */ "case_options ::= WHEN expr THEN expr",
 /* 171 */ "term ::= INTERVAL expr ALPHA",
 /* 172 */ "term ::= T_PLUS term",
 /* 173 */ "term ::= T_MINUS NUMBER",
 /* 174 */ "term ::= NUMBER",
 /* 175 */ "term ::= null",
 /* 176 */ "term ::= function_call",
 /* 177 */ "term ::= T_STRING1",
 /* 178 */ "term ::= T_STRING2",
 /* 179 */ "term ::= alpha",
 /* 180 */ "term ::= term_colname",
 /* 181 */ "term_select ::= inner_select",
 /* 182 */ "term_colname ::= colname",
 /* 183 */ "null ::= T_NULL",
 /* 184 */ "function_call ::= ALPHA expr_list_par_or_null",
 /* 185 */ "columns ::= columns COMMA alpha",
 /* 186 */ "columns ::= alpha",
 /* 187 */ "expr_list_par_or_null ::= expr_list_par",
 /* 188 */ "expr_list_par_or_null ::= PAR_OPEN PAR_CLOSE",
 /* 189 */ "expr_list_par_optional ::= expr_list_par",
 /* 190 */ "expr_list_par_optional ::= expr_list",
 /* 191 */ "expr_list_par_many ::= expr_list_par_many COMMA expr_list_par",
 /* 192 */ "expr_list_par_many ::= expr_list_par",
 /* 193 */ "expr_list_par ::= PAR_OPEN expr_list PAR_CLOSE",
 /* 194 */ "expr_list ::= expr_list COMMA expr",
 /* 195 */ "expr_list ::= expr",
 /* 196 */ "expr_list_as ::= expr_list_as COMMA expr_as",
 /* 197 */ "expr_list_as ::= expr_as",
 /* 198 */ "expr_as ::= expr",
 /* 199 */ "expr_as ::= expr T_AS alpha",
 /* 200 */ "expr_as ::= expr alpha",
 /* 201 */ "table_name ::= colname",
 /* 202 */ "colname ::= alpha T_DOT alpha_or_all",
 /* 203 */ "colname ::= alpha_or_all",
 /* 204 */ "colname ::= T_STRING1",
 /* 205 */ "colname ::= T_STRING2",
 /* 206 */ "colname ::= variable",
 /* 207 */ "alpha ::= T_DEFAULT",
 /* 208 */ "alpha ::= COLLATE",
 /* 209 */ "alpha ::= INTERVAL",
 /* 210 */ "alpha ::= AUTO_INCREMENT",
 /* 211 */ "alpha ::= ALPHA",
 /* 212 */ "alpha ::= COLUMN",
 /* 213 */ "alpha_or_all ::= alpha",
 /* 214 */ "alpha_or_all ::= T_TIMES",
 /* 215 */ "variable ::= QUESTION",
 /* 216 */ "variable ::= T_DOLLAR|T_COLON variable_name",
 /* 217 */ "variable_name ::= ALPHA",
 /* 218 */ "variable_name ::= LIMIT|INSERT|UPDATE|FROM|SELECT|COLLATE|AUTO_INCREMENT|T_DEFAULT|PRIMARY|OFFSET|KEY",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param SQLParser_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new SQLParser_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new SQLParser_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 3 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 3 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 0 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 2 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 128, 'rhs' => 1 ),
  array( 'lhs' => 128, 'rhs' => 0 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 130, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 124, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 4 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 3 ),
  array( 'lhs' => 133, 'rhs' => 5 ),
  array( 'lhs' => 133, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 7 ),
  array( 'lhs' => 141, 'rhs' => 1 ),
  array( 'lhs' => 141, 'rhs' => 0 ),
  array( 'lhs' => 140, 'rhs' => 1 ),
  array( 'lhs' => 140, 'rhs' => 0 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 139, 'rhs' => 1 ),
  array( 'lhs' => 139, 'rhs' => 0 ),
  array( 'lhs' => 138, 'rhs' => 1 ),
  array( 'lhs' => 138, 'rhs' => 2 ),
  array( 'lhs' => 138, 'rhs' => 0 ),
  array( 'lhs' => 120, 'rhs' => 9 ),
  array( 'lhs' => 143, 'rhs' => 2 ),
  array( 'lhs' => 143, 'rhs' => 0 ),
  array( 'lhs' => 151, 'rhs' => 1 ),
  array( 'lhs' => 145, 'rhs' => 2 ),
  array( 'lhs' => 145, 'rhs' => 0 ),
  array( 'lhs' => 152, 'rhs' => 3 ),
  array( 'lhs' => 152, 'rhs' => 1 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 3 ),
  array( 'lhs' => 153, 'rhs' => 2 ),
  array( 'lhs' => 153, 'rhs' => 1 ),
  array( 'lhs' => 146, 'rhs' => 2 ),
  array( 'lhs' => 146, 'rhs' => 0 ),
  array( 'lhs' => 154, 'rhs' => 4 ),
  array( 'lhs' => 155, 'rhs' => 2 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 3 ),
  array( 'lhs' => 155, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 1 ),
  array( 'lhs' => 157, 'rhs' => 0 ),
  array( 'lhs' => 158, 'rhs' => 1 ),
  array( 'lhs' => 158, 'rhs' => 0 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 2 ),
  array( 'lhs' => 156, 'rhs' => 4 ),
  array( 'lhs' => 156, 'rhs' => 0 ),
  array( 'lhs' => 147, 'rhs' => 2 ),
  array( 'lhs' => 147, 'rhs' => 0 ),
  array( 'lhs' => 149, 'rhs' => 3 ),
  array( 'lhs' => 149, 'rhs' => 0 ),
  array( 'lhs' => 160, 'rhs' => 3 ),
  array( 'lhs' => 160, 'rhs' => 1 ),
  array( 'lhs' => 161, 'rhs' => 2 ),
  array( 'lhs' => 161, 'rhs' => 1 ),
  array( 'lhs' => 150, 'rhs' => 4 ),
  array( 'lhs' => 150, 'rhs' => 4 ),
  array( 'lhs' => 150, 'rhs' => 2 ),
  array( 'lhs' => 150, 'rhs' => 0 ),
  array( 'lhs' => 148, 'rhs' => 3 ),
  array( 'lhs' => 148, 'rhs' => 5 ),
  array( 'lhs' => 148, 'rhs' => 0 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 2 ),
  array( 'lhs' => 121, 'rhs' => 4 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 119, 'rhs' => 3 ),
  array( 'lhs' => 123, 'rhs' => 6 ),
  array( 'lhs' => 122, 'rhs' => 7 ),
  array( 'lhs' => 163, 'rhs' => 3 ),
  array( 'lhs' => 163, 'rhs' => 2 ),
  array( 'lhs' => 167, 'rhs' => 1 ),
  array( 'lhs' => 167, 'rhs' => 4 ),
  array( 'lhs' => 165, 'rhs' => 5 ),
  array( 'lhs' => 165, 'rhs' => 0 ),
  array( 'lhs' => 166, 'rhs' => 2 ),
  array( 'lhs' => 168, 'rhs' => 3 ),
  array( 'lhs' => 168, 'rhs' => 1 ),
  array( 'lhs' => 169, 'rhs' => 3 ),
  array( 'lhs' => 127, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 7 ),
  array( 'lhs' => 172, 'rhs' => 2 ),
  array( 'lhs' => 172, 'rhs' => 0 ),
  array( 'lhs' => 173, 'rhs' => 3 ),
  array( 'lhs' => 174, 'rhs' => 2 ),
  array( 'lhs' => 174, 'rhs' => 1 ),
  array( 'lhs' => 171, 'rhs' => 3 ),
  array( 'lhs' => 171, 'rhs' => 1 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 137, 'rhs' => 4 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 142, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 3 ),
  array( 'lhs' => 176, 'rhs' => 1 ),
  array( 'lhs' => 177, 'rhs' => 3 ),
  array( 'lhs' => 179, 'rhs' => 1 ),
  array( 'lhs' => 179, 'rhs' => 0 ),
  array( 'lhs' => 178, 'rhs' => 3 ),
  array( 'lhs' => 178, 'rhs' => 0 ),
  array( 'lhs' => 137, 'rhs' => 3 ),
  array( 'lhs' => 180, 'rhs' => 2 ),
  array( 'lhs' => 180, 'rhs' => 5 ),
  array( 'lhs' => 180, 'rhs' => 5 ),
  array( 'lhs' => 182, 'rhs' => 0 ),
  array( 'lhs' => 182, 'rhs' => 1 ),
  array( 'lhs' => 181, 'rhs' => 2 ),
  array( 'lhs' => 181, 'rhs' => 0 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 2 ),
  array( 'lhs' => 183, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 2 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 4 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 3 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 136, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 1 ),
  array( 'lhs' => 187, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 2 ),
  array( 'lhs' => 186, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 190, 'rhs' => 2 ),
  array( 'lhs' => 190, 'rhs' => 1 ),
  array( 'lhs' => 189, 'rhs' => 3 ),
  array( 'lhs' => 189, 'rhs' => 5 ),
  array( 'lhs' => 191, 'rhs' => 5 ),
  array( 'lhs' => 191, 'rhs' => 4 ),
  array( 'lhs' => 175, 'rhs' => 3 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 2 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 175, 'rhs' => 1 ),
  array( 'lhs' => 184, 'rhs' => 1 ),
  array( 'lhs' => 170, 'rhs' => 1 ),
  array( 'lhs' => 185, 'rhs' => 1 ),
  array( 'lhs' => 192, 'rhs' => 2 ),
  array( 'lhs' => 159, 'rhs' => 3 ),
  array( 'lhs' => 159, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 1 ),
  array( 'lhs' => 193, 'rhs' => 2 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 162, 'rhs' => 1 ),
  array( 'lhs' => 164, 'rhs' => 3 ),
  array( 'lhs' => 164, 'rhs' => 1 ),
  array( 'lhs' => 188, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 3 ),
  array( 'lhs' => 194, 'rhs' => 1 ),
  array( 'lhs' => 144, 'rhs' => 3 ),
  array( 'lhs' => 144, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 1 ),
  array( 'lhs' => 195, 'rhs' => 3 ),
  array( 'lhs' => 195, 'rhs' => 2 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 134, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 129, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 196, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 1 ),
  array( 'lhs' => 197, 'rhs' => 2 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
  array( 'lhs' => 198, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        58 => 1,
        84 => 1,
        119 => 1,
        191 => 1,
        196 => 1,
        2 => 2,
        3 => 3,
        124 => 3,
        130 => 3,
        193 => 3,
        4 => 4,
        5 => 4,
        6 => 4,
        7 => 4,
        8 => 4,
        9 => 4,
        10 => 4,
        11 => 4,
        12 => 4,
        13 => 4,
        14 => 4,
        15 => 4,
        46 => 4,
        50 => 4,
        56 => 4,
        80 => 4,
        106 => 4,
        108 => 4,
        137 => 4,
        149 => 4,
        157 => 4,
        158 => 4,
        162 => 4,
        175 => 4,
        176 => 4,
        180 => 4,
        187 => 4,
        189 => 4,
        190 => 4,
        201 => 4,
        203 => 4,
        204 => 4,
        205 => 4,
        206 => 4,
        207 => 4,
        208 => 4,
        209 => 4,
        210 => 4,
        211 => 4,
        213 => 4,
        217 => 4,
        218 => 4,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        27 => 27,
        28 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        73 => 43,
        75 => 43,
        136 => 43,
        49 => 49,
        52 => 52,
        53 => 53,
        65 => 53,
        117 => 53,
        138 => 53,
        54 => 54,
        115 => 54,
        55 => 55,
        128 => 55,
        59 => 59,
        85 => 59,
        118 => 59,
        192 => 59,
        197 => 59,
        198 => 59,
        60 => 60,
        62 => 60,
        88 => 60,
        93 => 60,
        199 => 60,
        202 => 60,
        61 => 61,
        63 => 61,
        200 => 61,
        64 => 64,
        90 => 64,
        66 => 66,
        139 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        81 => 79,
        83 => 79,
        91 => 79,
        107 => 79,
        129 => 79,
        131 => 79,
        82 => 82,
        86 => 86,
        87 => 87,
        89 => 89,
        92 => 92,
        95 => 95,
        96 => 95,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        109 => 109,
        125 => 109,
        185 => 109,
        194 => 109,
        110 => 110,
        126 => 110,
        186 => 110,
        195 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        127 => 127,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 134,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        150 => 150,
        154 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        155 => 153,
        156 => 156,
        159 => 159,
        160 => 160,
        161 => 161,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 165,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        177 => 177,
        178 => 178,
        179 => 179,
        181 => 181,
        182 => 182,
        183 => 183,
        184 => 184,
        188 => 188,
        212 => 212,
        214 => 214,
        215 => 215,
        216 => 216,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 30 "src/SQLParser/Parser.y"
    function yy_r0(){ $this->body = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2333 "src/SQLParser/Parser.php"
#line 32 "src/SQLParser/Parser.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2336 "src/SQLParser/Parser.php"
#line 33 "src/SQLParser/Parser.y"
    function yy_r2(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];      }
#line 2339 "src/SQLParser/Parser.php"
#line 35 "src/SQLParser/Parser.y"
    function yy_r3(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 2342 "src/SQLParser/Parser.php"
#line 37 "src/SQLParser/Parser.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2345 "src/SQLParser/Parser.php"
#line 49 "src/SQLParser/Parser.y"
    function yy_r16(){ $this->_retvalue = null;     }
#line 2348 "src/SQLParser/Parser.php"
#line 51 "src/SQLParser/Parser.y"
    function yy_r17(){ $this->_retvalue = new SQL\BeginTransaction;     }
#line 2351 "src/SQLParser/Parser.php"
#line 52 "src/SQLParser/Parser.y"
    function yy_r18(){ $this->_retvalue = new SQL\BeginTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2354 "src/SQLParser/Parser.php"
#line 53 "src/SQLParser/Parser.y"
    function yy_r19(){ $this->_retvalue = new SQL\CommitTransaction;     }
#line 2357 "src/SQLParser/Parser.php"
#line 54 "src/SQLParser/Parser.y"
    function yy_r20(){ $this->_retvalue = new SQL\CommitTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2360 "src/SQLParser/Parser.php"
#line 55 "src/SQLParser/Parser.y"
    function yy_r21(){ $this->_retvalue = new SQL\RollbackTransaction;     }
#line 2363 "src/SQLParser/Parser.php"
#line 56 "src/SQLParser/Parser.y"
    function yy_r22(){ $this->_retvalue = new SQL\RollbackTransaction($this->yystack[$this->yyidx + 0]->minor);     }
#line 2366 "src/SQLParser/Parser.php"
#line 65 "src/SQLParser/Parser.y"
    function yy_r27(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;    }
#line 2369 "src/SQLParser/Parser.php"
#line 68 "src/SQLParser/Parser.y"
    function yy_r29(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor->setTableName($this->yystack[$this->yyidx + -1]->minor);     }
#line 2372 "src/SQLParser/Parser.php"
#line 70 "src/SQLParser/Parser.y"
    function yy_r30(){ $this->_retvalue = new SQL\AlterTable\DropPrimaryKey;     }
#line 2375 "src/SQLParser/Parser.php"
#line 71 "src/SQLParser/Parser.y"
    function yy_r31(){ $this->_retvalue = new SQL\AlterTable\DropIndex($this->yystack[$this->yyidx + 0]->minor);     }
#line 2378 "src/SQLParser/Parser.php"
#line 72 "src/SQLParser/Parser.y"
    function yy_r32(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2381 "src/SQLParser/Parser.php"
#line 73 "src/SQLParser/Parser.y"
    function yy_r33(){ $this->_retvalue = new SQL\AlterTable\SetDefault($this->yystack[$this->yyidx + -2]->minor, NULL);     }
#line 2384 "src/SQLParser/Parser.php"
#line 74 "src/SQLParser/Parser.y"
    function yy_r34(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2387 "src/SQLParser/Parser.php"
#line 75 "src/SQLParser/Parser.y"
    function yy_r35(){ $this->_retvalue = new SQL\AlterTable\ChangeColumn($this->yystack[$this->yyidx + -1]->minor->getName(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2390 "src/SQLParser/Parser.php"
#line 76 "src/SQLParser/Parser.y"
    function yy_r36(){ $this->_retvalue = new SQL\AlterTable\AddColumn($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2393 "src/SQLParser/Parser.php"
#line 77 "src/SQLParser/Parser.y"
    function yy_r37(){ $this->_retvalue = new SQL\AlterTable\DropColumn($this->yystack[$this->yyidx + 0]->minor);     }
#line 2396 "src/SQLParser/Parser.php"
#line 78 "src/SQLParser/Parser.y"
    function yy_r38(){ $this->_retvalue = new SQL\AlterTable\RenameTable($this->yystack[$this->yyidx + 0]->minor);     }
#line 2399 "src/SQLParser/Parser.php"
#line 79 "src/SQLParser/Parser.y"
    function yy_r39(){ $this->_retvalue = new SQL\AlterTable\RenameIndex($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2402 "src/SQLParser/Parser.php"
#line 80 "src/SQLParser/Parser.y"
    function yy_r40(){ $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2405 "src/SQLParser/Parser.php"
#line 82 "src/SQLParser/Parser.y"
    function yy_r41(){
    $this->_retvalue = new SQL\AlterTable\AddIndex($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue->setTableName($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2411 "src/SQLParser/Parser.php"
#line 87 "src/SQLParser/Parser.y"
    function yy_r42(){ $this->_retvalue = 'UNIQUE';     }
#line 2414 "src/SQLParser/Parser.php"
#line 88 "src/SQLParser/Parser.y"
    function yy_r43(){ $this->_retvalue = '';     }
#line 2417 "src/SQLParser/Parser.php"
#line 98 "src/SQLParser/Parser.y"
    function yy_r49(){ $this->_retvalue = TRUE;     }
#line 2420 "src/SQLParser/Parser.php"
#line 104 "src/SQLParser/Parser.y"
    function yy_r52(){
    $this->_retvalue = new SQL\Select($this->yystack[$this->yyidx + -6]->minor);
    if ($this->yystack[$this->yyidx + -5]->minor)  {
        foreach ($this->yystack[$this->yyidx + -5]->minor as $table) {
            $this->_retvalue->from($table[0], $table[1]);
        }
    }
    if ($this->yystack[$this->yyidx + -7]->minor) $this->_retvalue->setOptions($this->yystack[$this->yyidx + -7]->minor);
    if ($this->yystack[$this->yyidx + -3]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor)  $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor)  $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->groupBy($this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2436 "src/SQLParser/Parser.php"
#line 119 "src/SQLParser/Parser.y"
    function yy_r53(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2439 "src/SQLParser/Parser.php"
#line 120 "src/SQLParser/Parser.y"
    function yy_r54(){ $this->_retvalue = array();     }
#line 2442 "src/SQLParser/Parser.php"
#line 121 "src/SQLParser/Parser.y"
    function yy_r55(){ $this->_retvalue = strtoupper($this->yystack[$this->yyidx + 0]->minor);     }
#line 2445 "src/SQLParser/Parser.php"
#line 127 "src/SQLParser/Parser.y"
    function yy_r59(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];     }
#line 2448 "src/SQLParser/Parser.php"
#line 129 "src/SQLParser/Parser.y"
    function yy_r60(){ $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2451 "src/SQLParser/Parser.php"
#line 130 "src/SQLParser/Parser.y"
    function yy_r61(){ $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];     }
#line 2454 "src/SQLParser/Parser.php"
#line 133 "src/SQLParser/Parser.y"
    function yy_r64(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, NULL];     }
#line 2457 "src/SQLParser/Parser.php"
#line 136 "src/SQLParser/Parser.y"
    function yy_r66(){ $this->_retvalue = [];     }
#line 2460 "src/SQLParser/Parser.php"
#line 138 "src/SQLParser/Parser.y"
    function yy_r67(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor->setTable($this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1]);
    if ($this->yystack[$this->yyidx + 0]->minor[0]) {
        $this->_retvalue->{$this->yystack[$this->yyidx + 0]->minor[0]}($this->yystack[$this->yyidx + 0]->minor[1]);
    }
    }
#line 2468 "src/SQLParser/Parser.php"
#line 145 "src/SQLParser/Parser.y"
    function yy_r68(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2471 "src/SQLParser/Parser.php"
#line 146 "src/SQLParser/Parser.y"
    function yy_r69(){ $this->_retvalue = new Stmt\Join('LEFT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2474 "src/SQLParser/Parser.php"
#line 147 "src/SQLParser/Parser.y"
    function yy_r70(){ $this->_retvalue = new Stmt\Join('RIGHT', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2477 "src/SQLParser/Parser.php"
#line 148 "src/SQLParser/Parser.y"
    function yy_r71(){ $this->_retvalue = new Stmt\Join('INNER', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2480 "src/SQLParser/Parser.php"
#line 150 "src/SQLParser/Parser.y"
    function yy_r72(){ $this->_retvalue = 'NATURAL';     }
#line 2483 "src/SQLParser/Parser.php"
#line 152 "src/SQLParser/Parser.y"
    function yy_r74(){ $this->_retvalue = 'OUTER';     }
#line 2486 "src/SQLParser/Parser.php"
#line 155 "src/SQLParser/Parser.y"
    function yy_r76(){ $this->_retvalue = ['ON', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2489 "src/SQLParser/Parser.php"
#line 156 "src/SQLParser/Parser.y"
    function yy_r77(){ $this->_retvalue = ['USING', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2492 "src/SQLParser/Parser.php"
#line 157 "src/SQLParser/Parser.y"
    function yy_r78(){ $this->_retvalue =['USING',  $this->yystack[$this->yyidx + -1]->minor];     }
#line 2495 "src/SQLParser/Parser.php"
#line 158 "src/SQLParser/Parser.y"
    function yy_r79(){ $this->_retvalue = NULL;     }
#line 2498 "src/SQLParser/Parser.php"
#line 163 "src/SQLParser/Parser.y"
    function yy_r82(){
    $this->_retvalue = new Stmt\ExprList;
    $this->_retvalue->setExprs($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2504 "src/SQLParser/Parser.php"
#line 172 "src/SQLParser/Parser.y"
    function yy_r86(){
    $this->_retvalue = new Stmt\Expr(strtoupper($this->yystack[$this->yyidx + 0]->minor), $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2509 "src/SQLParser/Parser.php"
#line 175 "src/SQLParser/Parser.y"
    function yy_r87(){ $this->_retvalue = new Stmt\Expr("ASC", $this->yystack[$this->yyidx + 0]->minor);     }
#line 2512 "src/SQLParser/Parser.php"
#line 178 "src/SQLParser/Parser.y"
    function yy_r89(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -2]->minor];     }
#line 2515 "src/SQLParser/Parser.php"
#line 182 "src/SQLParser/Parser.y"
    function yy_r92(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];     }
#line 2518 "src/SQLParser/Parser.php"
#line 186 "src/SQLParser/Parser.y"
    function yy_r95(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->yystack[$this->yyidx + -1]->minor->values($this->yystack[$this->yyidx + 0]->minor);     }
#line 2521 "src/SQLParser/Parser.php"
#line 188 "src/SQLParser/Parser.y"
    function yy_r97(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor; $this->yystack[$this->yyidx + -3]->minor->values($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2527 "src/SQLParser/Parser.php"
#line 192 "src/SQLParser/Parser.y"
    function yy_r98(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    $keys   = new Stmt\ExprList;
    $values = [];
    foreach ($this->yystack[$this->yyidx + -1]->minor->getExprs() as $field) {
        $member = $field->getMembers();
        $keys->addTerm($member[0]);
        $values[] = $member[1];
    }
    $this->yystack[$this->yyidx + -2]->minor->values([$values])->fields($keys);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->onDuplicate($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2541 "src/SQLParser/Parser.php"
#line 205 "src/SQLParser/Parser.y"
    function yy_r99(){
    $this->_retvalue = new SQL\Drop('TABLE', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2546 "src/SQLParser/Parser.php"
#line 209 "src/SQLParser/Parser.y"
    function yy_r100(){
    $this->_retvalue = new SQL\Delete($this->yystack[$this->yyidx + -3]->minor[0], $this->yystack[$this->yyidx + -3]->minor[1]);
    if ($this->yystack[$this->yyidx + -2]->minor) $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2554 "src/SQLParser/Parser.php"
#line 216 "src/SQLParser/Parser.y"
    function yy_r101(){
    $this->_retvalue = new SQL\Update($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor);
    if ($this->yystack[$this->yyidx + -4]->minor) $this->_retvalue->joins($this->yystack[$this->yyidx + -4]->minor);
    if ($this->yystack[$this->yyidx + -2]->minor)  $this->_retvalue->where($this->yystack[$this->yyidx + -2]->minor);
    if ($this->yystack[$this->yyidx + -1]->minor) $this->_retvalue->orderBy($this->yystack[$this->yyidx + -1]->minor);
    if ($this->yystack[$this->yyidx + 0]->minor) $this->_retvalue->limit($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2563 "src/SQLParser/Parser.php"
#line 224 "src/SQLParser/Parser.y"
    function yy_r102(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -2]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2570 "src/SQLParser/Parser.php"
#line 229 "src/SQLParser/Parser.y"
    function yy_r103(){
    $this->_retvalue = new SQL\Insert($this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue->into($this->yystack[$this->yyidx + 0]->minor[0]);
    if ($this->yystack[$this->yyidx + 0]->minor[1]) $this->_retvalue->fields($this->yystack[$this->yyidx + 0]->minor[1]);
    }
#line 2577 "src/SQLParser/Parser.php"
#line 235 "src/SQLParser/Parser.y"
    function yy_r104(){ $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor, null];    }
#line 2580 "src/SQLParser/Parser.php"
#line 236 "src/SQLParser/Parser.y"
    function yy_r105(){ $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor];     }
#line 2583 "src/SQLParser/Parser.php"
#line 243 "src/SQLParser/Parser.y"
    function yy_r109(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addTerm($this->yystack[$this->yyidx + 0]->minor);     }
#line 2586 "src/SQLParser/Parser.php"
#line 244 "src/SQLParser/Parser.y"
    function yy_r110(){ $this->_retvalue = new Stmt\ExprList($this->yystack[$this->yyidx + 0]->minor);     }
#line 2589 "src/SQLParser/Parser.php"
#line 245 "src/SQLParser/Parser.y"
    function yy_r111(){
    $this->_retvalue = new Stmt\Expr("=", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2594 "src/SQLParser/Parser.php"
#line 249 "src/SQLParser/Parser.y"
    function yy_r112(){
    $this->_retvalue = new SQL\View($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2599 "src/SQLParser/Parser.php"
#line 253 "src/SQLParser/Parser.y"
    function yy_r113(){
    $this->_retvalue = new SQL\Table($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2604 "src/SQLParser/Parser.php"
#line 257 "src/SQLParser/Parser.y"
    function yy_r114(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2607 "src/SQLParser/Parser.php"
#line 260 "src/SQLParser/Parser.y"
    function yy_r116(){
    $this->_retvalue[implode(" ", $this->yystack[$this->yyidx + -2]->minor)] = $this->yystack[$this->yyidx + 0]->minor->getMember(0);
    }
#line 2612 "src/SQLParser/Parser.php"
#line 268 "src/SQLParser/Parser.y"
    function yy_r120(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2615 "src/SQLParser/Parser.php"
#line 270 "src/SQLParser/Parser.y"
    function yy_r121(){
    $this->_retvalue = ['primary', $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2620 "src/SQLParser/Parser.php"
#line 273 "src/SQLParser/Parser.y"
    function yy_r122(){
    $this->_retvalue = ['unique', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2625 "src/SQLParser/Parser.php"
#line 276 "src/SQLParser/Parser.y"
    function yy_r123(){
    $this->_retvalue = ['key', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2630 "src/SQLParser/Parser.php"
#line 284 "src/SQLParser/Parser.y"
    function yy_r127(){
    $this->_retvalue = new Stmt\Expr('INDEX', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2635 "src/SQLParser/Parser.php"
#line 293 "src/SQLParser/Parser.y"
    function yy_r132(){
    $this->_retvalue = new Stmt\Column($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor[0], $this->yystack[$this->yyidx + -1]->minor[1], $this->yystack[$this->yyidx + -1]->minor[2]);
    foreach ($this->yystack[$this->yyidx + 0]->minor as $setting) {
        if (is_array($setting)) {
            $this->_retvalue->{$setting[0]}($setting[1]);
        } else {
            $this->_retvalue->$setting();
        }
    }
    }
#line 2647 "src/SQLParser/Parser.php"
#line 304 "src/SQLParser/Parser.y"
    function yy_r133(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -1]->minor, NULL, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2652 "src/SQLParser/Parser.php"
#line 308 "src/SQLParser/Parser.y"
    function yy_r134(){
    $this->_retvalue = [$this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor];
    }
#line 2657 "src/SQLParser/Parser.php"
#line 322 "src/SQLParser/Parser.y"
    function yy_r140(){ $this->_retvalue = ['defaultValue', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2660 "src/SQLParser/Parser.php"
#line 323 "src/SQLParser/Parser.y"
    function yy_r141(){ $this->_retvalue = ['collate', $this->yystack[$this->yyidx + 0]->minor];     }
#line 2663 "src/SQLParser/Parser.php"
#line 324 "src/SQLParser/Parser.y"
    function yy_r142(){ $this->_retvalue = 'primaryKey';     }
#line 2666 "src/SQLParser/Parser.php"
#line 325 "src/SQLParser/Parser.y"
    function yy_r143(){    $this->_retvalue = 'notNull';     }
#line 2669 "src/SQLParser/Parser.php"
#line 326 "src/SQLParser/Parser.y"
    function yy_r144(){ $this->_retvalue = 'autoincrement';     }
#line 2672 "src/SQLParser/Parser.php"
#line 329 "src/SQLParser/Parser.y"
    function yy_r145(){ $this->_retvalue = new Stmt\Expr('and', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2675 "src/SQLParser/Parser.php"
#line 330 "src/SQLParser/Parser.y"
    function yy_r146(){ $this->_retvalue = new Stmt\Expr('or', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2678 "src/SQLParser/Parser.php"
#line 331 "src/SQLParser/Parser.y"
    function yy_r147(){
    if ($this->yystack[$this->yyidx + 0]->minor->getType() === 'IS NULL') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getMembers();
        $this->_retvalue = new Stmt\Expr('IS NOT NULL', $parts[0]);
        return;
    }
    $this->_retvalue = new Stmt\Expr('not', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2688 "src/SQLParser/Parser.php"
#line 339 "src/SQLParser/Parser.y"
    function yy_r148(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + -1]->minor);     }
#line 2691 "src/SQLParser/Parser.php"
#line 341 "src/SQLParser/Parser.y"
    function yy_r150(){
    $members = $this->yystack[$this->yyidx + -2]->minor->getMembers();
    if  ($this->yystack[$this->yyidx + -2]->minor->getType() === 'VALUE' && count($members) === 2&& $members[1] == 2) {
        $this->yystack[$this->yyidx + -2]->minor = new Stmt\Expr('COLUMN', $members[0]);
    }
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2700 "src/SQLParser/Parser.php"
#line 348 "src/SQLParser/Parser.y"
    function yy_r151(){ $this->_retvalue = new Stmt\Expr("IS NOT NULL", $this->yystack[$this->yyidx + -3]->minor);     }
#line 2703 "src/SQLParser/Parser.php"
#line 349 "src/SQLParser/Parser.y"
    function yy_r152(){ $this->_retvalue = new Stmt\Expr("IS NULL", $this->yystack[$this->yyidx + -2]->minor);     }
#line 2706 "src/SQLParser/Parser.php"
#line 350 "src/SQLParser/Parser.y"
    function yy_r153(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2709 "src/SQLParser/Parser.php"
#line 359 "src/SQLParser/Parser.y"
    function yy_r156(){ $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor));     }
#line 2712 "src/SQLParser/Parser.php"
#line 363 "src/SQLParser/Parser.y"
    function yy_r159(){ $this->_retvalue = 'IN';     }
#line 2715 "src/SQLParser/Parser.php"
#line 364 "src/SQLParser/Parser.y"
    function yy_r160(){ $this->_retvalue = 'NOT IN';     }
#line 2718 "src/SQLParser/Parser.php"
#line 366 "src/SQLParser/Parser.y"
    function yy_r161(){ $this->_retvalue = 'NOT ' . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2721 "src/SQLParser/Parser.php"
#line 369 "src/SQLParser/Parser.y"
    function yy_r163(){ $this->_retvalue = 'IS';     }
#line 2724 "src/SQLParser/Parser.php"
#line 370 "src/SQLParser/Parser.y"
    function yy_r164(){ $this->_retvalue = 'LIKE';     }
#line 2727 "src/SQLParser/Parser.php"
#line 371 "src/SQLParser/Parser.y"
    function yy_r165(){ $this->_retvalue = 'GLOB';     }
#line 2730 "src/SQLParser/Parser.php"
#line 375 "src/SQLParser/Parser.y"
    function yy_r167(){
    $this->yystack[$this->yyidx + -1]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -1]->minor);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -1]->minor);
    }
#line 2736 "src/SQLParser/Parser.php"
#line 379 "src/SQLParser/Parser.y"
    function yy_r168(){
    $this->yystack[$this->yyidx + -3]->minor = array_merge(['CASE'], $this->yystack[$this->yyidx + -3]->minor, [$this->yystack[$this->yyidx + -1]->minor]);
    $this->_retvalue = new Stmt\Expr($this->yystack[$this->yyidx + -3]->minor);
    }
#line 2742 "src/SQLParser/Parser.php"
#line 384 "src/SQLParser/Parser.y"
    function yy_r169(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor; $this->yystack[$this->yyidx + -4]->minor[] = new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2745 "src/SQLParser/Parser.php"
#line 385 "src/SQLParser/Parser.y"
    function yy_r170(){ $this->_retvalue = array(new Stmt\Expr("WHEN", $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2748 "src/SQLParser/Parser.php"
#line 387 "src/SQLParser/Parser.y"
    function yy_r171(){ $this->_retvalue = new Stmt\Expr('timeinterval', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2751 "src/SQLParser/Parser.php"
#line 388 "src/SQLParser/Parser.y"
    function yy_r172(){ $this->_retvalue = new Stmt\Expr('value', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2754 "src/SQLParser/Parser.php"
#line 389 "src/SQLParser/Parser.y"
    function yy_r173(){ $this->_retvalue = new Stmt\Expr('value', -1 * $this->yystack[$this->yyidx + 0]->minor);     }
#line 2757 "src/SQLParser/Parser.php"
#line 390 "src/SQLParser/Parser.y"
    function yy_r174(){ $this->_retvalue = new Stmt\Expr('value', 0+$this->yystack[$this->yyidx + 0]->minor);     }
#line 2760 "src/SQLParser/Parser.php"
#line 393 "src/SQLParser/Parser.y"
    function yy_r177(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 1);     }
#line 2763 "src/SQLParser/Parser.php"
#line 394 "src/SQLParser/Parser.y"
    function yy_r178(){ $this->_retvalue = new Stmt\Expr('value', trim($this->yystack[$this->yyidx + 0]->minor, "'\""), 2);     }
#line 2766 "src/SQLParser/Parser.php"
#line 395 "src/SQLParser/Parser.y"
    function yy_r179(){ $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2769 "src/SQLParser/Parser.php"
#line 397 "src/SQLParser/Parser.y"
    function yy_r181(){ $this->_retvalue = new Stmt\Expr('expr', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2772 "src/SQLParser/Parser.php"
#line 398 "src/SQLParser/Parser.y"
    function yy_r182(){
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Stmt\VariablePlaceholder) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else if (is_array($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    } else {
        $this->_retvalue = new Stmt\Expr('column', $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2783 "src/SQLParser/Parser.php"
#line 408 "src/SQLParser/Parser.y"
    function yy_r183(){ $this->_retvalue = new Stmt\Expr('value', NULL);    }
#line 2786 "src/SQLParser/Parser.php"
#line 410 "src/SQLParser/Parser.y"
    function yy_r184(){
    if (strtolower($this->yystack[$this->yyidx + -1]->minor) === 'isnull') {
        $parts = $this->yystack[$this->yyidx + 0]->minor->getExprs();
        if (!empty($parts[0]) && $parts[0]->getType() === 'COLUMN') {
            // This is a "isnull" function call, we must convert
            // `isnull(col)` to `col IS NULL` (which is the correct
            // SQL-standard way of representing that statement)
            $this->_retvalue = new Stmt\Expr('IS NULL', $parts[0]);
            return;
        }
    }
    $this->_retvalue = new Stmt\Expr('CALL', $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2801 "src/SQLParser/Parser.php"
#line 428 "src/SQLParser/Parser.y"
    function yy_r188(){ $this->_retvalue = new Stmt\ExprList();     }
#line 2804 "src/SQLParser/Parser.php"
#line 461 "src/SQLParser/Parser.y"
    function yy_r212(){ $this->_retvalue = trim($this->yystack[$this->yyidx + 0]->minor, "` \r\n\t");     }
#line 2807 "src/SQLParser/Parser.php"
#line 464 "src/SQLParser/Parser.y"
    function yy_r214(){ $this->_retvalue = new Stmt\Expr("ALL");     }
#line 2810 "src/SQLParser/Parser.php"
#line 466 "src/SQLParser/Parser.y"
    function yy_r215(){ $this->_retvalue = new Stmt\VariablePlaceholder;     }
#line 2813 "src/SQLParser/Parser.php"
#line 467 "src/SQLParser/Parser.y"
    function yy_r216(){ $this->_retvalue = new Stmt\VariablePlaceholder($this->yystack[$this->yyidx + 0]->minor);     }
#line 2816 "src/SQLParser/Parser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //SQLParser_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new SQLParser_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 11 "src/SQLParser/Parser.y"

    $expect = array();
    foreach ($this->yy_get_expected_tokens($yymajor) as $token) {
        $expect[] = self::$yyTokenName[$token];
    }
    throw new RuntimeException('Unexpected ' . $this->tokenName($yymajor) . '(' . $TOKEN. ') Expecting ' . implode(",", $expect));
#line 2936 "src/SQLParser/Parser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new SQLParser_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
